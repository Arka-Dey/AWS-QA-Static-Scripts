package com.components;
import java.awt.Graphics2D;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import com.Database.DatabaseComponent;
import javax.imageio.ImageIO;
import org.openqa.selenium.Keys;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.baseClasses.BaseClass_Web;
import com.baseClasses.PDFResultReport;
import com.baseClasses.ThreadLocalWebdriver;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.objectRepository.TenderCreation_Locators;
import static io.restassured.RestAssured.given;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import java.util.Map.Entry;

public class Dynamicity extends BaseClass_Web {
	public TenderCreation_Locators tendercreationlocators = new TenderCreation_Locators();
	public RfqFromPRComponent etenderPRcomponentobj = new RfqFromPRComponent(pdfResultReport);
	static WebDriver driver;
	LocalDateTime localdatetime = LocalDateTime.now();
	public String FieldshortName;
	public static String FieldlongName;
	public static String TabshortName;
	public String TablongName;
	static Properties prop = new Properties();
	int i;
	int y = 0;
	int loop = 0;
	public String tabularformat;
	public String templateTypeFormat;
	public String templateShortName;
	public static String masterprocessids;
	public static String subProcessName;
	public static String shortName;
	//public PDFResultReport pdfResultReport=new PDFResultReport();
	String tenderRef = null;
	//public String filePath=null;
	public String filePath = System.getProperty("user.dir")+ "\\src\\main\\java\\com\\DataProperties\\InputForTenderCreation.properties";
	public static String filePath_1 = System.getProperty("user.dir")+ "\\src\\main\\java\\com\\DataProperties\\Dynamic_PreCondition_Details.properties";
	public String filePath_2 = System.getProperty("user.dir")+ "\\src\\main\\java\\com\\DataProperties\\InputForTenderCreation.properties";
	public String filePath_4 = System.getProperty("user.dir")+ "\\src\\main\\java\\com\\DataProperties\\Dynamic_PreCondition_Details.properties";
	public String filePath_3 = System.getProperty("user.dir")+ "\\src\\main\\java\\com\\DataProperties\\FetchTenderFieldDetails.properties";
	public static String filePath_5 = System.getProperty("user.dir")+ "\\src\\main\\java\\com\\DataProperties\\FetchTenderFieldDetails.properties";
	public FileOutputStream output = null;
	public String QueryParameter = null;
	public String getrandomInt = null;
	public static int searchTime = 1;
	public String randomDecimal=null;
	public static JsonPath jsResponse=null;
	public static JsonPath jsResponse_v1=null;
	public static JsonPath jsResponse_v2=null;
	public static JsonPath jsResponse_cd=null;
	public static String Authorization=null;
		public Dynamicity(PDFResultReport pdfResultReport) {
			this.pdfResultReport = pdfResultReport;
	}
		public void templateGroupDetails() throws Throwable {
			waitForObj(1000);
			String TemplateGroup =getDataFromPropertiesFile("Template", filePath_4);
			waitForObj(1000);
			boolean interactable_qp=isElementEnable_Updated(By.xpath("(//option[text()='" + TemplateGroup + "'])[1]"), 30);
			if (interactable_qp == true) {
				QueryParameter = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//option[text()='" + TemplateGroup + "'])[1]")).getAttribute("value");
			}
			updateDataIntoPropertyFile("queryparam", QueryParameter, filePath_4);
			//DatabaseComponent.organizationName(TemplateGroup, QueryParameter);
			int itr=1;
			while(itr>0) {
				DatabaseComponent.organizationName(TemplateGroup, QueryParameter);
				itr = (orgValue == null || approvalConfirmMsgStatus==null) ? 1 : 0;
				}
			waitForObj(1000);
			String tempString="//div[@class='row customHform']/div[2]/select[contains(@class, 'form-control ng-untouched ng-pristine ng-invalid')]";
			boolean fielddisplay=isElementDisplayed_Updated(By.xpath(tempString), 30);
			boolean interactable=isElementEnable_Updated(By.xpath(tempString), 30);
			if (fielddisplay == true && interactable == true) {
				selectbyvalue(By.xpath(tempString),QueryParameter);
				ThreadLocalWebdriver.getDriver().findElement(By.xpath("//button[contains(text(),'Proceed')]")).click();
			}
			int tGD=0;
			while(tGD==0) {
			try {
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails(QueryParameter);
			tGD=1;
			}
			catch(Exception e) {
				tGD=0;
			}
			}
		}
		public static void extractVendorDetails() {
			try {
				API_Component.sBAD();
				API_Component.sBLRFQId();
			} catch (InterruptedException e1) {
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
	        JSONObject jsonObject = new JSONObject(cd_S);
	        JSONArray tenderVendors = jsonObject.getJSONArray("bidevaluationactivityDetailsList");
	        for (int i = 0; i < tenderVendors.length(); i++) {
	            JSONObject vendor = tenderVendors.getJSONObject(i);
	            //String vendorOrg = vendor.getString("vendorOrg");
	            JSONObject userdetails = vendor.getJSONObject("userdetails");
	            JSONObject vendors = vendor.getJSONObject("vendor");
	            int userId = userdetails.getInt("userId");
	            String vendorOrg = vendors.getString("companyname");
	            orgBidDetails.put(vendorOrg, userId);
	        }
	        for(Entry<String, Integer> obd : orgBidDetails.entrySet()) {
	        	try {
	        		bID=Integer.toString(obd.getValue());
					API_Component.gQBCId();
					BidderQuotations.put(obd.getKey(), qID);
				} catch (InterruptedException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
	        }
		}
		public static void bid_GI() throws Throwable {
			if(brc==0) {
			int j=0;
			while(j==0) {
			try {
			DatabaseComponent.sysTID();
			j=1;
			}
			catch(Exception e) {
				j=0;
			}
			}
			int k=0;
			while(k==0) {
			try {
				API_Component.provideTokenObject();
				API_Component.Login();
				API_Component.sDQISWDBTD();
				k=1;
			}		
			catch(Exception e) {
				k=0;
			}
			}
			}
		}
		public static String bid_EGI(int h) throws Throwable {
			int q=0;
			while(q==0) {
			try {
				API_Component.gDQTD(templateMap.get(h));
				if(response.equalsIgnoreCase("") || response == null) {
				q=0;
				}
				else {
				q=1;
				}
			}
			catch(Exception e) {
				q=0;
			}
			}
			return response;
		}
		public void templateGroupDetails_TenderFromIndent() throws Throwable {
			String TemplateGroup =getDataFromPropertiesFile("Template", filePath_4);
			//universalNormalWait();
			//QueryParameter=DatabaseComponent.getQueryParam();
			QueryParameter=QueryParameter_Global;
			//System.out.println("QueryParam for the current Template Group is: " + QueryParameter);
			updateDataIntoPropertyFile("queryparam", QueryParameter, filePath_4);
			//System.out.println("query parameter template value::" +QueryParameter);
			inCheck=0;
			while(inCheck==0) {
			try {
				API_Component.provideTokenObject();
				API_Component.Login();
				API_Component.templateGroupDetails(QueryParameter);
			}
			catch(Exception e) {
				i=0;
			}
			}
		}
		
		public void templateGroupDetails_PO(String QueryParameter) throws Throwable {
			waitForObj(1000);
			poCheck=0;
			while(poCheck==0) {
			try {
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails(QueryParameter);
			System.out.println("Pass");
			}
			catch(Exception e) {
				poCheck=0;
			}
			}
		}
		public void templateGroupDetails_Indent(String QueryParameter) throws Throwable {
			inCheck=0;
			while(inCheck==0) {
			try {
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails(QueryParameter);
			}
			catch(Exception e) {
				inCheck=0;
			}
			}
		}
		public void templateGroupDetails_afterQueryparamCaptured(String SN) throws Throwable {
			String qp=DatabaseComponent.getQueryParam();
			updateDataIntoPropertyFile("queryparam", qp, filePath_4);
			String queryparam =getDataFromPropertiesFile("queryparam", filePath_4);
			API_Component.provideTokenObject();
			API_Component.Login_AfterTenderCreation(SN);
			API_Component.templateGroupDetails_AfterTenderCreation(queryparam);
			jsResponse=API_Component.js;
			if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3))) {
			fetchAllFieldNames_RFQ();
			}
		}
		public void templateGroupDetails_And_UpdateTG(String usercode) throws Throwable {
			String tg=DatabaseComponent.getTGname(usercode);
			updateDataIntoPropertyFile("Template", tg, filePath_4);
			waitForObj(2000);
			String qp=DatabaseComponent.getQueryParam(usercode);
			updateDataIntoPropertyFile("queryparam", qp, filePath_4);
			String queryparam =getDataFromPropertiesFile("queryparam", filePath_4);
			DatabaseComponent.organizationName(tg, qp);
			
			int i=0;
			while(i==0) {
			try {	
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails_AfterTenderCreation(queryparam);
			jsResponse=API_Component.js;
			i=1;
			}
			catch(Exception e) {
				i=0;
			}
			}
			
			if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3))) {
			fetchAllFieldNames_RFQ();
			}
			else {
				if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
					fetchAllFieldNames_RFQ();
				}
			}
		}
		public static void templateGroupDetails_And_UpdateTG() throws Throwable {
			String tg=DatabaseComponent.getTGname(user);
			updateDataIntoPropertyFile("Template", tg, filePath_1);
			waitForObj(2000);
			String qp=DatabaseComponent.getQueryParam(user);
			updateDataIntoPropertyFile("queryparam", qp, filePath_1);
			String queryparam =getDataFromPropertiesFile("queryparam", filePath_1);
			DatabaseComponent.organizationName(tg, qp);
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails_AfterTenderCreation(queryparam);
			if(!getDataFromPropertiesFile("Template", filePath_1).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_5))) {
				fetchAllFieldNames();
			}
			else {
				if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_1).equalsIgnoreCase("Yes")) {
					fetchAllFieldNames();
				}
			}
		}
		public void templateGroupDetails_MSN() throws Throwable {
			String qp=null;
			int itr=1;
			while(itr>0) {
				qp=DatabaseComponent.getQueryParam_ST(user);
				itr = (qp == null) ? 1 : 0;
				if(!(qp == null)) {
					updateDataIntoPropertyFile("queryparam", qp, filePath_4);
				}
			}
			String queryparam =getDataFromPropertiesFile("queryparam", filePath_4);
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails_AfterTenderCreation(queryparam);
			if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3))) {
			fetchAllFieldNames_RFQ();
			waitForObj(2000);
			}
			else {
				if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
					fetchAllFieldNames_RFQ();
					waitForObj(2000);
				}
			}
		}
		public void templateGroupDetails_MSN_Updated() throws Throwable {
			updateDataIntoPropertyFile("queryparam", Integer.toString(sanctionGroupID), filePath_4);
			String queryparam =getDataFromPropertiesFile("queryparam", filePath_4);
			API_Component.provideTokenObject();
			API_Component.Login();
			API_Component.templateGroupDetails_AfterTenderCreation(queryparam);
			if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3))) {
			fetchAllFieldNames_RFQ();
			waitForObj(2000);
			}
			else {
				if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
					fetchAllFieldNames_RFQ();
					waitForObj(2000);
				}
			}
		}
		public void CreateTenderFromPR_STG() throws Throwable {
				try {
					String TemplateGroup = prop.getProperty("Template");
					Thread.sleep(3000);
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//select[@name='templateGroup'])[2]")))
					.selectByVisibleText(TemplateGroup);
					ThreadLocalWebdriver.getDriver().findElement(By.xpath("//button[contains(text(),'Proceed')]")).click();
					JsonPath js=jsResponse;
					int itemtemplatecount = js.getInt("groupTemplateList.size()");
					select(tendercreationlocators.bitPartdropdown, Dynamicity.getDataFromPropertiesFile("BidPart", filePath_4));
					click(tendercreationlocators.bitPartRadio, "bitPartRadio");
					tenderRef = "TendRef_";
					int getrandomInterger = getrandomInterger(10000, 1000000000);
					tenderRef = tenderRef.concat(String.valueOf(getrandomInterger));
					clear(tendercreationlocators.tenderReferenceNumber, "tenderReferenceNumber");
					set(tendercreationlocators.tenderReferenceNumber, tenderRef, "tenderReferenceNumber");
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='currency']")))
					.selectByVisibleText("INR - INDIAN RUPEE"); 
					Thread.sleep(1000);
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderType']"))).selectByVisibleText("OTE-Open Tender");
					scrollToElement(tendercreationlocators.Min_bid_no);
					set(tendercreationlocators.Min_bid_no, Dynamicity.getDataFromPropertiesFile("Minimum_Number_Of_Bids", filePath_4), "MinimumNoOfBids");
					set(tendercreationlocators.detailedDescription, "this is dynamic Tender", "detailedDescription");
					scrollToTopOfThePage();
					click(tendercreationlocators.savebutton, "savebutton");
					waitForObj(4000);
					//input.close();
					List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
						By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'renderTabData')]"));
					for (int h = 1; h <= tabcount.size(); h++) {
					String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
							"(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'renderTabData')])[" + h + "]")).getText();
					//System.out.println("UI Tabname:" + uitabname);
					for (int i = 0; i < itemtemplatecount; i++) {
						masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
						if (masterprocessids.equalsIgnoreCase("1")) {
							String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
							if (uitabname.equalsIgnoreCase(tabName)) {
								String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
								//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
								if(h % 4 == 0) {
									//scrollToElement(tendercreationlocators.nextButtonBidDetails);
									JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
								}
								scrollToTopOfThePage();
								JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
								WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(
										By.xpath("//ul[@class='nav nav-tabs']//li//a[text()=\"" + tabName + "\"]"));
								javas.executeScript("arguments[0].click();", tabElem);
								Thread.sleep(6000);
								tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
								templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
								if (tabularformat.equalsIgnoreCase("100")) {
									try {
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
													.toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
														.toString();
												FieldlongName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
														.toString();
												shortName.add(FieldshortName);
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(Date(10));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("102")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("103")) {
													String xpath = "//input[@type='radio']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("108")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "_"
													+ FieldshortName + "')]"; 
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (interactable == true) {
													scrollToElement(By.xpath(xpath));
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													} else {
													longName.remove(FieldlongName);
													}
													}
											}
										}
										waitForObj(2000);
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
									}
								}
								else if (tabularformat.equalsIgnoreCase("101")) {
									try {
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
													.toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
														.toString();
												shortName.add(FieldshortName);
												FieldlongName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
														.toString();
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(Date(10));
														if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
															clear(By.xpath(xpath), "BidSubmissionStartDate");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getBidStartDate(10));
														}
														else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
															clear(By.xpath(xpath), "BidSubmissionStartDate");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getBidDueDate(40));
														}
														else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
															clear(By.xpath(xpath), "BidSubmissionStartDate");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getBidOpenDate(50));
														}
														else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
															clear(By.xpath(xpath), "BidSubmissionStartDate");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getBidOpenDate(45));
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("102")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("103")) {
													String xpath = "//input[@type='radio']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("108")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "_"
													+ FieldshortName + "')]"; 
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (interactable == true) {
													scrollToElement(By.xpath(xpath));
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													} else {
													longName.remove(FieldlongName);
													}
													}
											}
										}
										//waitForObj(2000);
										waitForObj(5000);
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
									}
								}
								else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100")) {
									try {
										List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//button[@data-original-title='Add']"));
										if (addpopupbtns.size() > 0) {
											try {
												for (int m = 1; m < addpopupbtns.size(); m++) {
													boolean adddisplay = isElementDisplayed_Updated(By.xpath(
															"(//button[@data-original-title='Add'])[" + m + "]"), 5);
													boolean isEnable = isElementEnable_Updated(By.xpath(
															"(//button[@data-original-title='Add'])[" + m + "]"), 5);
													/*
													boolean adddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(
																	"(//button[@data-original-title='Add'])[" + m + "]"))
															.isDisplayed();
															*/
													if (adddisplay == true && isEnable==true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
																.click();
													}
												}
											} catch (Exception e) {
											}
										}
										List<WebElement> addnonsorbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//button[contains(@ng-click,'addNonSORItem')]"));
										if (addnonsorbtns.size() > 0) {
											try {
												for (int m = 1; m <= addnonsorbtns.size(); m++) {
													boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
															.findElement(
																	By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
													if (addnonsortdisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(
																"(//button[contains(@ng-click,'addNonSORItem')])[" + m + "]")).click();
													}
												}
											} catch (Exception e) {
											}
										}
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
													.toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
														.toString();
												FieldlongName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
														.toString();
												shortName.add(FieldshortName);
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													//JSClick(By.xpath(xpath), FieldshortName);
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].formula").toString();
													String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].isAggregation").toString();
													//System.out.println(formula);
													if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
														}
													}
												}
												if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(0);
														if(FieldshortName.equalsIgnoreCase("payment_type"))
														{
															sel.selectByIndex(2);
															ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(
																	"//button[@id='savePayment4']"))
															.click();
														}
														/*
														if(FieldshortName.equalsIgnoreCase("payment_currency"))
														{
															sel.selectByIndex(2);
														}
														*/
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(8));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("102")) {
													if(!(TabshortName.equalsIgnoreCase("rfqpayment"))) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} 
												}
												else {
													longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("103")) {
														String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("108")) {
													try {
														String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
														//System.out.println(shortName_Data);
														if(shortName_Data.equalsIgnoreCase("rfqattachment")) {
														String xpath = "(//a[contains(@ng-if,'108')])[1]";
														boolean fielddisplay1 = ThreadLocalWebdriver.getDriver()
																.findElement(By.xpath(xpath)).isDisplayed();
														if (fielddisplay1 == true) {
														//==============================
														File f = new File("text.xlsx");
														String absolute = f.getAbsolutePath();
														StringSelection sel = new StringSelection(absolute);
														Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
														//System.out.println("selection" + sel);
														ThreadLocalWebdriver.getDriver()
																.findElement(By.xpath("(//a[contains(@ng-if,'108')])[1]"))
																.click();
														Thread.sleep(5000);
														Robot robot = new Robot();
														Thread.sleep(2000);
														robot.keyPress(KeyEvent.VK_CONTROL);
														robot.keyPress(KeyEvent.VK_V);
														robot.keyRelease(KeyEvent.VK_V);
														robot.keyRelease(KeyEvent.VK_CONTROL);
														Thread.sleep(3000);
														robot.keyPress(KeyEvent.VK_ENTER);
														robot.keyRelease(KeyEvent.VK_ENTER);
														Thread.sleep(5000);
														longName.remove(FieldlongName);
														}
													}
														//==========================================
														else if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
														String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																+ FieldshortName + "')]";
														set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
													}
													} catch (Exception e) {
													}
													longName.remove(FieldlongName);
												}
											}
										}
										//============================================
										List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//button[contains(@id, 'add-author')]"));
										try {
											for (int c = 1; c <= okbtnspopup.size(); c++) {
												boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By
																.xpath("(//button[contains(@id, 'add-author')])[" + c + "]"))
														.isDisplayed();
												if (okbtnpopupdisplay == true) {
													ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(
																	"(//button[contains(@id, 'add-author')])[" + c + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
										//============================================
										//waitForObj(2000);
										waitForObj(5000);
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
									}
								}
								else if (tabularformat.equalsIgnoreCase("104")) {
									try {
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
													.toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
														.toString();
												FieldlongName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
														.toString();
												shortName.add(FieldshortName);
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(Date(10));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
														clear(By.xpath(xpath), "Clear previous Data");	
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear previous Data");
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear previous Data");
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("102")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("103")) {
													String xpath = "//input[@type='radio']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("108")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "_"
													+ FieldshortName + "')]"; 
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (interactable == true) {
													scrollToElement(By.xpath(xpath));
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													} else {
													longName.remove(FieldlongName);
													}
													}
											}
										}
										waitForObj(2000);
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
									}
								}
								else if (tabularformat.equalsIgnoreCase("103")) {
									try {
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
													.toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
														.toString();
												FieldlongName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
														.toString();
												shortName.add(FieldshortName);
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(Date(10));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("102")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("103")) {
													String xpath = "//input[@type='radio']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("108")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "_"
													+ FieldshortName + "')]"; 
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (interactable == true) {
													scrollToElement(By.xpath(xpath));
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													} else {
													longName.remove(FieldlongName);
													}
													}
											}
										}
										waitForObj(2000);
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
									}
								}
								else if (tabularformat.equalsIgnoreCase("105")) {
									try {
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
													.toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
														.toString();
												FieldlongName = js.get(
														"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
														.toString();
												shortName.add(FieldshortName);
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(Date(10));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("102")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("103")) {
													String xpath = "//input[@type='radio']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true) {
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												if (controlTypeId.equalsIgnoreCase("108")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "_"
													+ FieldshortName + "')]"; 
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (interactable == true) {
													scrollToElement(By.xpath(xpath));
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													} else {
													longName.remove(FieldlongName);
													}
													}
											}
										}
										waitForObj(2000);
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
												"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
									}
								}
							}
						}
					}
				}
				// Savebutton
				waitForObj(2000);
				scrollToTopOfThePage();
				//scrollToElement(By.xpath("//button[@data-original-title='Save']"));
				waitForObj(2000);
				ThreadLocalWebdriver.getDriver().findElement(By.xpath("//button[@data-original-title='Save']")).click();
				waitForObj(5000);
				pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
			}
			catch (Exception e) {
				pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
						"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
				}
		}
		public void generalInformation() throws Throwable {
			try {
				log.info("started executing the method:: generalInformation");
				templateGroupDetails();
				if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3)) || !getDataFromPropertiesFile("Environment", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Environment", filePath_3))) {
				fetchAllFieldNames_RFQ();
				}
				else {
					if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
						fetchAllFieldNames_RFQ();
					}
				}
				//dynamic_Loader(tendercreationlocators.loadingLocator, 2);
				waitForObj(2000);
				select(tendercreationlocators.bitPartdropdown, Dynamicity.getDataFromPropertiesFile("BidPart", filePath_4));
				click(By.xpath("//input[@calss='bidpartoption']"), "bitPartRadio");
				WebElement selectElement = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[@id='mat-select-value-1']"));
				selectElement.click();
				JSClick(By.xpath("//span[contains(text(),'Select All')]"), "Select All Bidding Currencies");
				JSClick(By.xpath("//div[@id='mat-select-value-1']"), "Bidding Currencies");
				String TenderType = getDataFromPropertiesFile("TenderType", filePath_4);
				if(TenderType.equalsIgnoreCase("Limited")) {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("100");
					try {
			            String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
			            String[] suppliers = supplierValue.split(",\\s*"); 
			            for (String supplier : suppliers) {
				            	click(tendercreationlocators.addSupplier, "Limited Supplier Selection");
								set(tendercreationlocators.searchSupplier, supplier, "Limited Supplier Selection");
								click(tendercreationlocators.searchSupplierButton, "searchSupplierButton");
								boolean ds=isElementDisplayed_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 10);
								boolean es=isElementEnable_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 10);
								if (ds == true && es == true) {
								click(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), "Limited Supplier Selection");
								}
								boolean ac_ds=isElementDisplayed_Updated(tendercreationlocators.add_close, 10);
								boolean ac_es=isElementEnable_Updated(tendercreationlocators.add_close, 10);
								if (ac_ds == true && ac_es == true) {
								JSClick(tendercreationlocators.add_close, "Limited Supplier Selection");
								}
								supplierCount++;
								pdfResultReport.addStepDetails("supplierSelection", "supplier must be selected sucessfully",
										"Successfully selected supplier " + " ", "Pass", "Y");
								log.info("completed executing the method:: supplierSelection");
			            	}
			        } catch (IOException ex) {
			            ex.printStackTrace();
			        }
				}
				else {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("101");
					String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
					String[] suppliers = supplierValue.split(",\\s*");
	            	supplierCount=suppliers.length;
				}
				scrollToElement(tendercreationlocators.Min_bid_no);
				//set(tendercreationlocators.offerValidity, "100", "offerValidity");
				boolean fielddisplay_OV=isElementDisplayed_Updated(tendercreationlocators.offerValidity, searchTime);
				boolean interactable_OV=isElementEnable_Updated(tendercreationlocators.offerValidity, searchTime);
				if (fielddisplay_OV == true && interactable_OV == true) {
					clear(tendercreationlocators.offerValidity, "offerValidity");
					set(tendercreationlocators.offerValidity, getDataFromPropertiesFile("OfferValidity", filePath_4), "offerValidity");
				}
				set(tendercreationlocators.Min_bid_no, getDataFromPropertiesFile("Minimum_Number_Of_Bids", filePath_4), "MinimumNoOfBids");
				set(tendercreationlocators.detailedDescription, getDataFromPropertiesFile("DescriptionForGeneralInformation", filePath_4), "detailedDescription");
				scrollToTopOfThePage();
				String SaveButton="//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]";
				boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SaveButton), 60);
				boolean interactableSB=isElementEnable_Updated(By.xpath(SaveButton), 60);
				if (fielddisplaySB == true && interactableSB == true) {
					JSClick(By.xpath(SaveButton), "savebutton");
				}
				String giSM="//button[contains(text(),'Ok')]";
				boolean fielddisplaygiSM=isElementDisplayed_Updated(By.xpath(giSM), 60);
				boolean interactablegiSM=isElementEnable_Updated(By.xpath(giSM), 60);
				if (fielddisplaygiSM == true && interactablegiSM == true) {
					JSClick(By.xpath(giSM), "Success MSG");
				}
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				scrollToTopOfThePage();
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				//===============================================================================
				pdfResultReport.addStepDetails("Successfully Saved", "generalInformation must be selected successfully in search field", "generalInformation is successfully selected in search field" + " ", "Pass", "Y");
				if(Dynamicity.getDataFromPropertiesFile("UpdateFieldDetails", filePath_4).equalsIgnoreCase("Yes")) {
				try{
					updateDataDuringRunTime("TenderCreator", TenderDetails, filePath_3);
				}
				catch(Exception e) {
					pdfResultReport.addStepDetails("Not able to update Tender field Details", "Not able to update Tender field Details",
							"Unable to Tender field Details" + e.getMessage(), "Fail", "N");
				}
				}
				log.info("completed executing the method:: generalInformation");
			} catch (Exception e) {
				log.fatal("Not able to select generalInformation" + e.getMessage());
				pdfResultReport.addStepDetails("Not able to select generalInformation", "Not able to select generalInformation",
						"Unable to select generalInformation" + e.getMessage(), "Fail", "N");
			}
		}
		public void generalInformation_multiData() throws Throwable {
			try {
				log.info("started executing the method:: generalInformation");
				templateGroupDetails();
				if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3)) || !getDataFromPropertiesFile("Environment", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Environment", filePath_3))) {
				fetchAllFieldNames_RFQ();
				}
				else {
					if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
						fetchAllFieldNames_RFQ();
					}
				}
				//dynamic_Loader(tendercreationlocators.loadingLocator, 2);
				waitForObj(2000);
				select(tendercreationlocators.bitPartdropdown, Dynamicity.getDataFromPropertiesFile("BidPart", filePath_4));
				click(By.xpath("//input[@calss='bidpartoption']"), "bitPartRadio");
				WebElement selectElement = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[@id='mat-select-value-1']"));
				selectElement.click();
				JSClick(By.xpath("//span[contains(text(),'Select All')]"), "Select All Bidding Currencies");
				JSClick(By.xpath("//div[@id='mat-select-value-1']"), "Bidding Currencies");
				String TenderType = getDataFromPropertiesFile("TenderType", filePath_4);
				if(TenderType.equalsIgnoreCase("Limited")) {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("100");
					try {
			            String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
			            String[] suppliers = supplierValue.split(",\\s*"); 
			            for (String supplier : suppliers) {
				            	click(tendercreationlocators.addSupplier, "Limited Supplier Selection");
								set(tendercreationlocators.searchSupplier, supplier, "Limited Supplier Selection");
								click(tendercreationlocators.searchSupplierButton, "searchSupplierButton");
								boolean ds=isElementDisplayed_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 2);
								boolean es=isElementEnable_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 2);
								if (ds == true && es == true) {
								click(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), "Limited Supplier Selection");
								}
								boolean ac_ds=isElementDisplayed_Updated(tendercreationlocators.add_close, 2);
								boolean ac_es=isElementEnable_Updated(tendercreationlocators.add_close, 2);
								if (ac_ds == true && ac_es == true) {
								JSClick(tendercreationlocators.add_close, "Limited Supplier Selection");
								}
								supplierCount++;
								pdfResultReport.addStepDetails("supplierSelection", "supplier must be selected sucessfully",
										"Successfully selected supplier " + " ", "Pass", "Y");
								log.info("completed executing the method:: supplierSelection");
			            	}
			        } catch (IOException ex) {
			            ex.printStackTrace();
			        }
				}
				else {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("101");
					String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
					String[] suppliers = supplierValue.split(",\\s*");
	            	supplierCount=suppliers.length;
				}
				scrollToElement(tendercreationlocators.Min_bid_no);
				//set(tendercreationlocators.offerValidity, "100", "offerValidity");
				boolean fielddisplay_OV=isElementDisplayed_Updated(tendercreationlocators.offerValidity, searchTime);
				boolean interactable_OV=isElementEnable_Updated(tendercreationlocators.offerValidity, searchTime);
				if (fielddisplay_OV == true && interactable_OV == true) {
					clear(tendercreationlocators.offerValidity, "offerValidity");
					set(tendercreationlocators.offerValidity, getDataFromPropertiesFile("OfferValidity", filePath_4), "offerValidity");
				}
				set(tendercreationlocators.Min_bid_no, getDataFromPropertiesFile("Minimum_Number_Of_Bids", filePath_4), "MinimumNoOfBids");
				set(tendercreationlocators.detailedDescription, getDataFromPropertiesFile("DescriptionForGeneralInformation", filePath_4), "detailedDescription");
				scrollToTopOfThePage();
				String SaveButton="//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]";
				boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SaveButton), 60);
				boolean interactableSB=isElementEnable_Updated(By.xpath(SaveButton), 60);
				if (fielddisplaySB == true && interactableSB == true) {
					JSClick(By.xpath(SaveButton), "savebutton");
				}
				String giSM="//button[contains(text(),'Ok')]";
				boolean fielddisplaygiSM=isElementDisplayed_Updated(By.xpath(giSM), 60);
				boolean interactablegiSM=isElementEnable_Updated(By.xpath(giSM), 60);
				if (fielddisplaygiSM == true && interactablegiSM == true) {
					JSClick(By.xpath(giSM), "Success MSG");
				}
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				scrollToTopOfThePage();
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				//===============================================================================
				pdfResultReport.addStepDetails("Successfully Saved", "generalInformation must be selected successfully in search field", "generalInformation is successfully selected in search field" + " ", "Pass", "Y");
				if(Dynamicity.getDataFromPropertiesFile("UpdateFieldDetails", filePath_4).equalsIgnoreCase("Yes")) {
				try{
					updateDataDuringRunTime_multiData("TenderCreator", TenderDetails, filePath_3);
				}
				catch(Exception e) {
					pdfResultReport.addStepDetails("Not able to update Tender field Details", "Not able to update Tender field Details",
							"Unable to Tender field Details" + e.getMessage(), "Fail", "N");
				}
				}
				log.info("completed executing the method:: generalInformation");
			} catch (Exception e) {
				log.fatal("Not able to select generalInformation" + e.getMessage());
				pdfResultReport.addStepDetails("Not able to select generalInformation", "Not able to select generalInformation",
						"Unable to select generalInformation" + e.getMessage(), "Fail", "N");
			}
		}
		public void generalInformation_TenderFromIndent() throws Throwable {
			try {
				log.info("started executing the method:: generalInformation");
				templateGroupDetails_TenderFromIndent();
				if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(getDataFromPropertiesFile("Template", filePath_3)) || !getDataFromPropertiesFile("Environment", filePath_4).equalsIgnoreCase(getDataFromPropertiesFile("Environment", filePath_3))) {
						fetchAllFieldNames_RFQ();
						}
				else {
					if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
						fetchAllFieldNames_RFQ();
					}
				}
				//select(tendercreationlocators.bitPartdropdown, pdfResultReport.testData.get("BidParts"));
				selectbyvalue(tendercreationlocators.bitPartdropdown, Dynamicity.getDataFromPropertiesFile("BidPart", filePath_4));
				click(By.xpath("(//div[@class='radio text-left margin0 ng-star-inserted']/label/input)[1]"), "bitPartRadio");
				//click(By.xpath("//input[@calss='bidpartoption']"), "bitPartRadio");
				tenderRef = "TendRef_";
				int getrandomInterger = getrandomInterger(10000, 1000000000);
				tenderRef = tenderRef.concat(String.valueOf(getrandomInterger));
				clear(tendercreationlocators.tenderReferenceNumber, "tenderReferenceNumber");
				set(tendercreationlocators.tenderReferenceNumber, tenderRef, "tenderReferenceNumber");
				new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tendercurrency']")))
				.selectByVisibleText("INR - INDIAN RUPEE"); 
				boolean fielddisplay_PAC=isElementDisplayed_Updated(By.xpath("//input[@placeholder='Input Amount']"), searchTime);
				boolean interactable_PAC=isElementEnable_Updated(By.xpath("//input[@placeholder='Input Amount']"), searchTime);
				if (fielddisplay_PAC == true && interactable_PAC == true) {
					clear(By.xpath("//input[@placeholder='Input Amount']"), "PAC Amount");
					set(By.xpath("//input[@placeholder='Input Amount']"), "5000", "PAC Amount");
				}
				WebElement selectElement = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[@id='mat-select-value-1']"));
				selectElement.click();
				JSClick(By.xpath("//span[contains(text(),'Select All')]"), "Select All Bidding Currencies");
				JSClick(By.xpath("//div[@id='mat-select-value-1']"), "Bidding Currencies");
				/*
	            Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
	            actions.keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).perform();
	            */
				String TenderType = getDataFromPropertiesFile("TenderType", filePath_4);
				if(TenderType.equalsIgnoreCase("Limited")) {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("100");
					try {
			            String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
			            String[] suppliers = supplierValue.split(",\\s*"); 
			            for (String supplier : suppliers) {
			            	click(tendercreationlocators.addSupplier, "Limited Supplier Selection");
							set(tendercreationlocators.searchSupplier, supplier, "Limited Supplier Selection");
							click(tendercreationlocators.searchSupplierButton, "searchSupplierButton");
							boolean ds=isElementDisplayed_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 2);
							boolean es=isElementEnable_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 2);
							if (ds == true && es == true) {
							click(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), "Limited Supplier Selection");
							}
							boolean ac_ds=isElementDisplayed_Updated(tendercreationlocators.add_close, 2);
							boolean ac_es=isElementEnable_Updated(tendercreationlocators.add_close, 2);
							if (ac_ds == true && ac_es == true) {
							JSClick(tendercreationlocators.add_close, "Limited Supplier Selection");
							}
							supplierCount++;
							pdfResultReport.addStepDetails("supplierSelection", "supplier must be selected sucessfully", "Successfully selected supplier " + " ", "Pass", "Y");
							log.info("completed executing the method:: supplierSelection");
			            	}
			        } catch (IOException ex) {
			            ex.printStackTrace();
			        }
				}
				else {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("101");
					String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
					String[] suppliers = supplierValue.split(",\\s*");
	            	supplierCount=suppliers.length;
				}
				scrollToElement(tendercreationlocators.Min_bid_no);
				select(tendercreationlocators.actionEnabled, pdfResultReport.testData.get("actionEnabled"));
				//set(tendercreationlocators.offerValidity, "100", "offerValidity");
				boolean fielddisplay_OV=isElementDisplayed_Updated(tendercreationlocators.offerValidity, searchTime);
				boolean interactable_OV=isElementEnable_Updated(tendercreationlocators.offerValidity, searchTime);
				if (fielddisplay_OV == true && interactable_OV == true) {
					clear(tendercreationlocators.offerValidity, "offerValidity");
					set(tendercreationlocators.offerValidity, "500", "offerValidity");
				}
				set(tendercreationlocators.Min_bid_no, "1", "MinimumNoOfBids");
				set(tendercreationlocators.detailedDescription, "this is dynamic Tender", "detailedDescription");
				scrollToTopOfThePage();
				String SaveButton="//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]";
				boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SaveButton), 2);
				boolean interactableSB=isElementEnable_Updated(By.xpath(SaveButton), 2);
				if (fielddisplaySB == true && interactableSB == true) {
					JSClick(By.xpath(SaveButton), "savebutton");
				}
				String giSM="//button[contains(text(),'Ok')]";
				boolean fielddisplaygiSM=isElementDisplayed_Updated(By.xpath(giSM), 2);
				boolean interactablegiSM=isElementEnable_Updated(By.xpath(giSM), 2);
				if (fielddisplaygiSM == true && interactablegiSM == true) {
					JSClick(By.xpath(giSM), "Success MSG");
				}
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				scrollToTopOfThePage();
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				if(Dynamicity.getDataFromPropertiesFile("UpdateFieldDetails", filePath_4).equalsIgnoreCase("Yes")) {
					try{
						updateDataDuringRunTime("TenderCreator", TenderDetails, filePath_3);
					}
					catch(Exception e) {
						pdfResultReport.addStepDetails("Not able to update Tender field Details", "Not able to update Tender field Details",
								"Unable to Tender field Details" + e.getMessage(), "Fail", "N");
					}
					}
				pdfResultReport.addStepDetails("Successfully Saved",
						"generalInformation must be selected successfully in search field",
						"generalInformation is successfully selected in search field" + " ", "Pass", "Y");
				log.info("completed executing the method:: generalInformation");
			} catch (Exception e) {
				log.fatal("Not able to select generalInformation" + e.getMessage());
				pdfResultReport.addStepDetails("Not able to select generalInformation", "Not able to select generalInformation",
						"Unable to select generalInformation" + e.getMessage(), "Fail", "N");
			}
		}
		public void generalInformation_AddSupplierTabValidation() throws Throwable {
			try {
				log.info("started executing the method:: generalInformation");
				templateGroupDetails();
				//==============Fetch All fields Names for new TG====================
						if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3))) {
						fetchAllFieldNames_RFQ();
						}
				//==============General Information fields=============
				select(tendercreationlocators.bitPartdropdown, Dynamicity.getDataFromPropertiesFile("BidPart", filePath_4));
				WebElement selectElement = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[@id='mat-select-value-1']"));
				selectElement.click();
				JSClick(By.xpath("//button[contains(text(),'Select All')]"), "Select All Bidding Currencies");
				JSClick(By.xpath("//div[@id='mat-select-value-1']"), "Bidding Currencies");
				Thread.sleep(1000);
				//=================================================
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByVisibleText("Limited Tender");
					click(tendercreationlocators.addSupplier, "Limited Supplier Selection");
					waitForObj(1000);
					set(tendercreationlocators.searchSupplier, pdfResultReport.testData.get("SupplierKeyword"), "SupplierKeyword");
					waitForObj(1000);
					click(tendercreationlocators.searchSupplierButton, "searchSupplierButton");
					String supplierName=getDataFromPropertiesFile("Supplier"+i, filePath_4);
					click(By.xpath("//span[text()='"+supplierName+"']/../parent::tr/td[1]"), "Limited Supplier Selection");
					waitForObj(1000);
					//JSClick(tendercreationlocators.selectAllSuppliers, "Limited Supplier Selection");
					waitForObj(1000);
					JSClick(tendercreationlocators.add_close, "Limited Supplier Selection");
					waitForObj(1000);
				//============================================================
				scrollToElement(tendercreationlocators.Min_bid_no);
				//set(tendercreationlocators.offerValidity, "100", "offerValidity");
				boolean fielddisplay_OV=isElementDisplayed_Updated(tendercreationlocators.offerValidity, searchTime);
				boolean interactable_OV=isElementEnable_Updated(tendercreationlocators.offerValidity, searchTime);
				if (fielddisplay_OV == true && interactable_OV == true) {
					clear(tendercreationlocators.offerValidity, "offerValidity");
					set(tendercreationlocators.offerValidity, "500", "offerValidity");
				}
				set(tendercreationlocators.Min_bid_no, Dynamicity.getDataFromPropertiesFile("Minimum_Number_Of_Bids", filePath_4), "MinimumNoOfBids");
				set(tendercreationlocators.detailedDescription, "this is dynamic Tender", "detailedDescription");
				scrollToTopOfThePage();
				//click(tendercreationlocators.savebutton, "savebutton");
				waitForElementToBeVisible(By.xpath("//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]/fa-icon"));
				JSClick(By.xpath("//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]/fa-icon"), "savebutton");
				waitForElementToBeVisible(By.xpath("//button[contains(text(),'Ok')]"));
				JSClick(By.xpath("//button[contains(text(),'Ok')]"), "Success MSG");
				waitForObj(2000);
				scrollToTopOfThePage();
				//===============================================================================
				pdfResultReport.addStepDetails("Successfully Saved",
						"generalInformation must be selected successfully in search field",
						"generalInformation is successfully selected in search field" + " ", "Pass", "Y");
				log.info("completed executing the method:: generalInformation");
			} catch (Exception e) {
				log.fatal("Not able to select generalInformation" + e.getMessage());
				pdfResultReport.addStepDetails("Not able to select generalInformation", "Not able to select generalInformation",
						"Unable to select generalInformation" + e.getMessage(), "Fail", "N");
			}
		}
		public void generalInformation_FreshTender() throws Throwable {
			try {
				log.info("started executing the method:: generalInformation");
				templateGroupDetails();
				if(!getDataFromPropertiesFile("Template", filePath_4).equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("Template", filePath_3))) {
				fetchAllFieldNames_RFQ();
				}
				else {
					if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
						fetchAllFieldNames_RFQ();
					}
				}
				select(tendercreationlocators.bitPartdropdown, Dynamicity.getDataFromPropertiesFile("BidPart", filePath_4));
				//click(tendercreationlocators.bitPartRadio, "bitPartRadio");
				//click(By.xpath("//input[@calss='bidpartoption']"), "bitPartRadio");
				tenderRef = "TendRef_";
				int getrandomInterger = getrandomInterger(10000, 1000000000);
				tenderRef = tenderRef.concat(String.valueOf(getrandomInterger));
				clear(tendercreationlocators.tenderReferenceNumber, "tenderReferenceNumber");
				set(tendercreationlocators.tenderReferenceNumber, tenderRef, "tenderReferenceNumber");
				try {
				new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tendercurrency']")))
				.selectByVisibleText(Dynamicity.getDataFromPropertiesFile("TenderCurrency", filePath_4)); 
				
				}
				catch(Exception e)
				{
					System.out.println("currency not Present");
					log.fatal("Not able to select generalInformation" + e.getMessage());
					pdfResultReport.addStepDetails("select currency", "Not able to select currency",
							"Unable to select mentioned currency" + e.getMessage(), "Fail", "N");
					
				}
				boolean fielddisplay_PAC=isElementDisplayed_Updated(By.xpath("//input[@placeholder='Input Amount']"), searchTime);
				boolean interactable_PAC=isElementEnable_Updated(By.xpath("//input[@placeholder='Input Amount']"), searchTime);
				if (fielddisplay_PAC == true && interactable_PAC == true) {
					clear(By.xpath("//input[@placeholder='Input Amount']"), "PAC Amount");
					set(By.xpath("//input[@placeholder='Input Amount']"), "5000", "PAC Amount");
				}
				WebElement selectElement = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[@id='mat-select-value-1']"));
				selectElement.click();
				JSClick(By.xpath("//span[contains(text(),'Select All')]"), "Select All Bidding Currencies");
				JSClick(By.xpath("//div[@id='mat-select-value-1']"), "Bidding Currencies");
				/*
	            Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
	            actions.keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).perform();
	            */
				String TenderType = getDataFromPropertiesFile("TenderType", filePath_4);
				if(TenderType.equalsIgnoreCase("Limited")) {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("100");
					try {
			            String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
			            String[] suppliers = supplierValue.split(",\\s*"); 
			            for (String supplier : suppliers) {
			            	click(tendercreationlocators.addSupplier, "Limited Supplier Selection");
							set(tendercreationlocators.searchSupplier, supplier, "Limited Supplier Selection");
							click(tendercreationlocators.searchSupplierButton, "searchSupplierButton");
							boolean ds=isElementDisplayed_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 2);
							boolean es=isElementEnable_Updated(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), 2);
							if (ds == true && es == true) {
							click(By.xpath("//span[text()='"+supplier+"']/../parent::tr/td[1]"), "Limited Supplier Selection");
							}
							boolean ac_ds=isElementDisplayed_Updated(tendercreationlocators.add_close, 2);
							boolean ac_es=isElementEnable_Updated(tendercreationlocators.add_close, 2);
							if (ac_ds == true && ac_es == true) {
							JSClick(tendercreationlocators.add_close, "Limited Supplier Selection");
							}
							supplierCount++;
							pdfResultReport.addStepDetails("supplierSelection", "supplier must be selected sucessfully", "Successfully selected supplier " + " ", "Pass", "Y");
							log.info("completed executing the method:: supplierSelection");
			            	}
			        } catch (IOException ex) {
			            ex.printStackTrace();
			        }
				}
				else {
					new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath("//select[@name='tenderTypeid']"))).selectByValue("101");
					String supplierValue = Dynamicity.getDataFromPropertiesFile("Supplier", filePath_4);
					String[] suppliers = supplierValue.split(",\\s*");
	            	supplierCount=suppliers.length;
				}
				scrollToElement(tendercreationlocators.Min_bid_no);
				//set(tendercreationlocators.offerValidity, "100", "offerValidity");
				boolean fielddisplay_OV=isElementDisplayed_Updated(tendercreationlocators.offerValidity, searchTime);
				boolean interactable_OV=isElementEnable_Updated(tendercreationlocators.offerValidity, searchTime);
				if (fielddisplay_OV == true && interactable_OV == true) {
					clear(tendercreationlocators.offerValidity, "offerValidity");
					set(tendercreationlocators.offerValidity, "500", "offerValidity");
				}
				set(tendercreationlocators.Min_bid_no, Dynamicity.getDataFromPropertiesFile("Minimum_Number_Of_Bids", filePath_4), "MinimumNoOfBids");
				set(tendercreationlocators.detailedDescription, "this is dynamic Tender", "detailedDescription");
				scrollToTopOfThePage();
				//click(tendercreationlocators.savebutton, "savebutton");
				waitForElementToBeVisible(By.xpath("//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]/fa-icon"));
				JSClick(By.xpath("//button[contains(@class, 'roundActionBtn m-r-15 btn-primary animate_btn')]/fa-icon"), "savebutton");
				waitForElementToBeVisible(By.xpath("//button[contains(text(),'Ok')]"));
				JSClick(By.xpath("//button[contains(text(),'Ok')]"), "Success MSG");
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				scrollToTopOfThePage();
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				pdfResultReport.addStepDetails("Successfully Saved",
						"generalInformation must be selected successfully in search field",
						"generalInformation is successfully selected in search field" + " ", "Pass", "Y");
				log.info("completed executing the method:: generalInformation");
			} catch (Exception e) {
				log.fatal("Not able to select generalInformation" + e.getMessage());
				pdfResultReport.addStepDetails("Not able to select generalInformation", "Not able to select generalInformation",
						"Unable to select generalInformation" + e.getMessage(), "Fail", "N");
			}
		}
		public void CreateTenderFromPRwithNonSOR_STG() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				//System.out.println(jsResponse);
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//div[contains(@id, 'mat-tab-label')]"));
				for (int h = 1; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//div[contains(@id, 'mat-tab-label')])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								JSClick(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"),"Traverse button");
							}
							scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(
									By.xpath("//div/span[text()='" + tabName + "']"));
							isElementEnable(By.xpath("//div/span[text()='" + tabName + "']"), 60);
							JSClick(By.xpath("//div/span[text()='" + tabName + "']"), "tabName");
							universalNormalWait();
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							templateShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104") && !templateShortName.equalsIgnoreCase("rfqdate") && !templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													/*
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														//System.out.println(ST);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														waitForObj(3000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
														Dynamicity.updateDataIntoPropertyFile("bidStartDate", getBidStartDate(ST), filePath_4);
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														waitForObj(3000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "bid_open_date");
														waitForObj(3000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+11;
														clear(By.xpath(xpath), "doc_sub_date");
														waitForObj(3000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_start_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+2;
														clear(By.xpath(xpath), "doc_sub_date");
														waitForObj(3000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+8;
														clear(By.xpath(xpath), "doc_sub_date");
														waitForObj(3000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													*/
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("rfqdate")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {		
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														//System.out.println(ST);
														//clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
														Dynamicity.updateDataIntoPropertyFile("bidStartDate", getBidStartDate(ST), filePath_4);
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+ST;
														//clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+2;
														//clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+1;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													if(FieldshortName.equalsIgnoreCase("meeting_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)-2;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)-1;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && !templateShortName.equalsIgnoreCase("rfqattachment") && !templateShortName.equalsIgnoreCase("requiredbidderattachment")) {
								try {
									List<WebElement> addTermsSpecification = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div[1]/div/button"));
									if (addTermsSpecification.size() > 0) {
										try {
											for (int m = 1; m <= addTermsSpecification.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]")).click();
												}
											}
										} catch (Exception e) {
											//System.out.println("addTermsSpecification not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												}
												//========
												//String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+SB+"]";
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												}
												//========
												//String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												//========
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														waitForObj(2000);
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
														//==========
														String xpath =null;
														List<WebElement> wb = ThreadLocalWebdriver.getDriver()
																.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]"));
														int SB=wb.size();
														if (SB> 1) {
															xpath="(//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')])["+SB+"]";
														}
														else {
															xpath = "//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]";
														}
														//========
														//String xpath1 = "//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]";
														boolean fielddisplay = ThreadLocalWebdriver.getDriver()
																.findElement(By.xpath(xpath)).isDisplayed();
														boolean fieldEnable = ThreadLocalWebdriver.getDriver()
																.findElement(By.xpath(xpath)).isEnabled();
														if(fieldEnable== true) {
														set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														}
														longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqattachment")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button"));
									int addB=addpopupbtns.size();
									if (addB> 0) {
										try {
											for (int m = 1; m <= addB; m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)[" + addB + "]")).click();
													}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														waitForObj(2000);
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("requiredbidderattachment")) {
								try {
									List<WebElement> addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div[1]/a/button"));
									if (addRequiredAttachment.size() > 0) {
										try {
											for (int m = 1; m <= addRequiredAttachment.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button/fa-icon)["+ m + "]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)[" + m + "]")).click();
													}
											}
										} catch (Exception e) {
											//System.out.println("addRequiredAttachment not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														waitForObj(2000);
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("103")) {
								try {
									List<WebElement> addPRItems = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a//button[contains(@tooltip, 'Add PR line Item')]"));
									List<WebElement> addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
									if (addnonsorbtns.size() > 0 && addPRItems.size()==0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath(
														"(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]"), 5);
												/*
												boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(
																By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
																*/
												if (addnonsortdisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]")).click();
													waitForObj(4000);
													ArrayList<String> shortName = new ArrayList<String>();
													ArrayList<String> longName = new ArrayList<String>();
													TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
													for (int j = 0; j < js
															.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
														if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
																.toString().equalsIgnoreCase("Y")) {
															FieldshortName = js.get(
																	"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																	.toString();
															FieldlongName = js.get(
																	"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																	.toString();
															shortName.add(FieldshortName);
															longName.add(FieldlongName);
															String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].controlTypeId").toString();
															if (controlTypeId.equalsIgnoreCase("112")) {
																longName.remove(FieldlongName);
															}
															if (controlTypeId.equalsIgnoreCase("110")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																	}
																	else {
																	//String generateDate=generateRandomDate();
																	String generateDate=getFutureDate(100);
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(generateDate);
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("104")) {
																String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(Date(10));
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("100")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																			+ j + "].dataTypeId").toString();
																	if(DataTypeId.equalsIgnoreCase("101")) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(generateRandomString(6));
																		}
																	}
																	if(DataTypeId.equalsIgnoreCase("100")) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		getrandomInt = Integer.toString(getrandomInterger(2,50));
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(getrandomInt);
																		}
																	}
																	if(DataTypeId.equalsIgnoreCase("102")) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(randomDecimal);
																		}
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("106")
																	|| controlTypeId.equalsIgnoreCase("105")) {
																String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable==true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	Select sel = new Select(
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																	sel.selectByVisibleText(keysValue);
																	}
																	else {
																		if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																			/*
																			String mandatory_item="//div/button[text()='Confirm']";
																			waitForElementToBeVisible(By.xpath(mandatory_item));
																			JSClick(By.xpath(mandatory_item), "confirm mandatory item");
																			waitForObj(1000);
																			*/
																			Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																			sel_MI.selectByValue("Yes");
																		}
																		else {
																			Select sel = new Select(
																					ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																			sel.selectByIndex(1);
																		}
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("107")) {
																String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(generateRandomString(15));
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("102")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	/*
																	String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																			.replaceAll("\\p{P}", ""));
																	*/
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																	System.out.println("Buyer Does not want to select Checkbox/Radio button");
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("103")) {
																String xpath = "//input[@type='radio']";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true) {
																	/*
																	String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																			.replaceAll("\\p{P}", ""));
																	*/
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																	System.out.println("Buyer Does not want to select Checkbox/Radio button");
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("108")) {
																try {
																	String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																	//System.out.println(shortName_Data);
																	if(shortName_Data.equalsIgnoreCase("rfqattachment")) {
																	String xpath = "(//a[contains(@ng-if,'108')])[1]";
																	boolean fielddisplay1 = ThreadLocalWebdriver.getDriver()
																			.findElement(By.xpath(xpath)).isDisplayed();
																	if (fielddisplay1 == true) {
																	//==============================
																	File f = new File("text.xlsx");
																	String absolute = f.getAbsolutePath();
																	StringSelection sel = new StringSelection(absolute);
																	Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
																	//System.out.println("selection" + sel);
																	ThreadLocalWebdriver.getDriver()
																			.findElement(By.xpath("(//a[contains(@ng-if,'108')])[1]"))
																			.click();
																	Thread.sleep(5000);
																	Robot robot = new Robot();
																	Thread.sleep(2000);
																	robot.keyPress(KeyEvent.VK_CONTROL);
																	robot.keyPress(KeyEvent.VK_V);
																	robot.keyRelease(KeyEvent.VK_V);
																	robot.keyRelease(KeyEvent.VK_CONTROL);
																	Thread.sleep(3000);
																	robot.keyPress(KeyEvent.VK_ENTER);
																	robot.keyRelease(KeyEvent.VK_ENTER);
																	Thread.sleep(5000);
																	longName.remove(FieldlongName);
																	}
																}
																	//==========================================
																	else if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																	String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																			+ FieldshortName + "')]";
																	set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																	longName.remove(FieldlongName);
																}
																} catch (Exception e) {
																	longName.remove(FieldlongName);
																}
															}
														}
													}
												}
											}
										} catch (Exception e) {
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			// Savebutton
			waitForObj(2000);
			scrollToTopOfThePage();
			waitForObj(2000);
			String SB="//button[@class='roundActionBtn m-r-15 btn-primary animate_btn']";
			boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SB), 60);
			boolean interactableSB=isElementEnable_Updated(By.xpath(SB), 60);
			//System.out.println("Field is displayed: " + fielddisplaySB);
			//System.out.println("Field is displayed: " + interactableSB);
			if (fielddisplaySB == true && interactableSB == true) {
				click(By.xpath(SB), "Save Button");
			}
			//click(By.xpath("//button[@class='roundActionBtn m-r-15 btn-primary animate_btn']"), "Tender Save");
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void CreateTenderwithNonSOR() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//div[contains(@id, 'mat-tab-label')]"));
				for (int h = 1; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//div[contains(@id, 'mat-tab-label')])[" + h + "]")).getText();
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							if(h % 4 == 0) {
								boolean temT=isElementEnable_Updated(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"), 1);
								if(temT==true){
									JSClick(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"), "Traverse");
									}
								}
							scrollToTopOfThePage();
							waitForObj(500);
							boolean temE=isElementEnable_Updated(By.xpath("//div/span[text()='" + tabName + "']"), 30);
							boolean temD=isElementDisplayed_Updated(By.xpath("//div/span[text()='" + tabName + "']"), 30);
							if(temE==true && temD==true){
							JSClick(By.xpath("//div/span[text()='" + tabName + "']"), "tabName");
							waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
							}
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							templateShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")){
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && !templateShortName.equalsIgnoreCase("rfqdate") && !templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("rfqdate")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {		
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
														//Dynamicity.updateDataIntoPropertyFile("bidStartDate", getBidStartDate(ST), filePath_4);
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+ST;
														//clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+2;
														//clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+1;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													if(FieldshortName.equalsIgnoreCase("meeting_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														//int bidSubmission=((SC*BT)+ST)-10;
														int bidSubmission=ST+3;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														//int bidSubmission=((SC*BT)+ST)-8;  
														int bidSubmission=ST+4;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												if(fielddisplay == true && interactable == true) {
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
												}
												else {
													log.info("locator is not present");
												}
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && !templateShortName.equalsIgnoreCase("rfqattachment") && !templateShortName.equalsIgnoreCase("requiredbidderattachment") && !templateShortName.equalsIgnoreCase("rfqpayment")) {
								try {
									List<WebElement> addTermsSpecification = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div[1]/div/button"));
									if (addTermsSpecification.size() > 0) {
										try {
											for (int m = 1; m <= addTermsSpecification.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]")).click();
												}
											}
										} catch (Exception e) {
											//System.out.println("addTermsSpecification not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												}
												//========
												//String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																clear(By.xpath(xpath), " ");
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+SB+"]";
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												}
												//========
												//String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												//========
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpathSpan= "//span[contains(@id, '" + TabshortName + "_" + FieldshortName + "')]";
												String xpath = "//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]"; 
													List<WebElement> uploadIconCounts = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpathSpan));
													int uploadC=uploadIconCounts.size();
													String uploadXpath="(//span[contains(@id, '" + TabshortName + "_" + FieldshortName + "')])["+uploadC+"]";
													List<WebElement> fileInputCounts = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
													int fileInputC=fileInputCounts.size();
													String inputXpath="(//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')])["+fileInputC+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(uploadXpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(uploadXpath), searchTime);
												if(fielddisplay==true && interactable==true){
												scrollToElement(By.xpath(uploadXpath));
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(inputXpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
													} 
												}
											else {
												longName.remove(FieldlongName);
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqattachment")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button"));
									int addB=addpopupbtns.size();
									if (addB> 0) {
										try {
											for (int m = 1; m <= addB; m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)[" + addB + "]")).click();
													}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																clear(By.xpath(xpath), " ");
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation1.xlsx","fileName");
														longName.remove(FieldlongName);
														
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									waitForObj(2000);
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									if(okbtnspopup.size()==0) {
										universalNormalWait();
										okbtnspopup = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									}
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											//boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]")).isDisplayed();
											boolean okbtnpopupdisplay = isElementDisplayed_Updated(By.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"), 1);
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
												waitForObj(2000);
											}
										}
									} catch (Exception e) {
									}
									//============================================
									waitForObj(3000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqpayment")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112") || controlTypeId.equalsIgnoreCase("102") || controlTypeId.equalsIgnoreCase("103") || controlTypeId.equalsIgnoreCase("107") || controlTypeId.equalsIgnoreCase("108") || controlTypeId.equalsIgnoreCase("109") || controlTypeId.equalsIgnoreCase("110") || controlTypeId.equalsIgnoreCase("104") || controlTypeId.equalsIgnoreCase("111") || controlTypeId.equalsIgnoreCase("100") || ((controlTypeId.equalsIgnoreCase("106")|| controlTypeId.equalsIgnoreCase("105")) &&  !FieldshortName.equalsIgnoreCase("payment_type"))) {
												longName.remove(FieldlongName);
											}
											else if ((controlTypeId.equalsIgnoreCase("106")|| controlTypeId.equalsIgnoreCase("105")) &&  FieldshortName.equalsIgnoreCase("payment_type")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByValue("Not Required");;
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='savePayment4']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//*[@id='savePayment4'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='savePayment4'])[" + c + "]")).click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("requiredbidderattachment")) {
								try {
									List<WebElement> addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div[1]/a/button"));
									if(addRequiredAttachment.size()==0) {
										universalNormalWait();
										addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div[1]/a/button"));
									}
									if (addRequiredAttachment.size() > 0) {
										try {
											for (int m = 1; m <= addRequiredAttachment.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button/fa-icon)["+ m + "]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)[" + m + "]")).click();
													}
											}
										} catch (Exception e) {
											//System.out.println("addRequiredAttachment not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																clear(By.xpath(xpath), " ");
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e){
														//System.out.println("Index 1 is not present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("103")&& !Dynamicity.getDataFromPropertiesFile("ExcelUpload", filePath_4).equalsIgnoreCase("Yes")) {
								try {
									List<WebElement> addPRItems = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a//button[contains(@tooltip, 'Add PR line Item')]"));
									String itemGrouping="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a/button[@tooltip='Item Grouping']";
									List<WebElement> addnonsorbtns =new ArrayList<>();
									String addButtons;
									if(isElementEnable_Updated(By.xpath(itemGrouping), searchTime)) {
										addnonsorbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
										addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]";
									}
									else {
										addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
										addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]";
									}
									if (addnonsorbtns.size() > 0 && addPRItems.size()==0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
												/*
												boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(
																By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
																*/
												if (addnonsortdisplay == true && isEnable==true) {
													int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
													int dateIterator=1;
													for(int FIC=0; FIC<FreshIndentTenderItemCount; FIC++){
														//ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]")).click();
														JSClick(By.xpath("("+addButtons+")[" + m + "]"), "Add button");
														if ((FIC+1) % 20 == 1) {
															String nextButton="(//a[text()=' Next '])[2]";
															if(isElementEnable_Updated(By.xpath(nextButton), 1)==true && isElementEnable_Updated(By.xpath(nextButton), 2)==true) {
																JSClick(By.xpath(nextButton), "Next Button");
																}
															dateIterator=1;
														}
														
														ArrayList<String> shortName = new ArrayList<String>();
														ArrayList<String> longName = new ArrayList<String>();
														TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
														for (int j = 0; j < js
																.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
															if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
																FieldshortName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																		.toString();
																FieldlongName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																		.toString();
																shortName.add(FieldshortName);
																longName.add(FieldlongName);
																String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].controlTypeId").toString();
																if (controlTypeId.equalsIgnoreCase("112")) {
																	longName.remove(FieldlongName);
																}
																else if (controlTypeId.equalsIgnoreCase("110")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		//String generateDate=generateRandomDate();
																		String generateDate=getFutureDate(100);
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateDate);
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("104")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(Date(10));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("100")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																				+ j + "].dataTypeId").toString();
																		if(DataTypeId.equalsIgnoreCase("101")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(6));
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("100")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			getrandomInt = Integer.toString(getrandomInterger(2,50));
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(getrandomInt);
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("102")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			clear(By.xpath(xpath), " ");
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																			clear(By.xpath(xpath), "clear Decimal field");
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(randomDecimal);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("106")
																		|| controlTypeId.equalsIgnoreCase("105")) {
																	String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable==true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		Select sel = new Select(
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																		sel.selectByVisibleText(keysValue);
																		}
																		else {
																			if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																				/*
																				String mandatory_item="//div/button[text()='Confirm']";
																				waitForElementToBeVisible(By.xpath(mandatory_item));
																				JSClick(By.xpath(mandatory_item), "confirm mandatory item");
																				
																				*/
																				Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel_MI.selectByValue("Yes");
																			}
																			else {
																				Select sel = new Select(
																						ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel.selectByIndex(1);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("107")) {
																	String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC +"')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(15));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("102")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		/*
																		String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																				.replaceAll("\\p{P}", ""));
																		*/
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("103")) {
																	String xpath = "(//input[@type='radio'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true) {
																		/*
																		String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																				.replaceAll("\\p{P}", ""));
																		*/
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("108")) {
																	try {
																		String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																		//System.out.println(shortName_Data);
																		if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																		String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																				+ FieldshortName + "." + FIC + "')]";
																		set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																		longName.remove(FieldlongName);
																	}
																	} catch (Exception e) {
																		longName.remove(FieldlongName);
																		}
																	}
																}
															}
														dateIterator=dateIterator+1;	
													}		
												}
											}
										} catch (Exception e) {
										}
									}
									else {
										if(isElementEnable_Updated(By.xpath(itemGrouping), searchTime)) {
											addnonsorbtns = ThreadLocalWebdriver.getDriver()
													.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
											addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]";
										}
										else {
											addnonsorbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2')]"));
											addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2')]";
										}
										//if (addnonsorbtns.size() > 0 && addPRItems.size()==0) {
										if (addnonsorbtns.size() > 0) {
											try {
												for (int m = 1; m <= addnonsorbtns.size(); m++) {
													boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
													boolean isEnable = isElementEnable_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
													/*
													boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
															.findElement(
																	By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
																	*/
													if (addnonsortdisplay == true && isEnable==true) {
														int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
														int dateIterator=1;
														for(int FIC=0; FIC<FreshIndentTenderItemCount; FIC++){
															//ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]")).click();
															JSClick(By.xpath("("+addButtons+")[" + m + "]"), "Add button");
															if ((FIC+1) % 20 == 1) {
																String nextButton="(//a[text()=' Next '])[2]";
																if(isElementEnable_Updated(By.xpath(nextButton), 1)==true && isElementEnable_Updated(By.xpath(nextButton), 2)==true) {
																	JSClick(By.xpath(nextButton), "Next Button");
																	}
																dateIterator=1;
															}
															
															ArrayList<String> shortName = new ArrayList<String>();
															ArrayList<String> longName = new ArrayList<String>();
															TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
															for (int j = 0; j < js
																	.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
																if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
																	FieldshortName = js.get(
																			"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																			.toString();
																	FieldlongName = js.get(
																			"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																			.toString();
																	shortName.add(FieldshortName);
																	longName.add(FieldlongName);
																	String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																			+ j + "].controlTypeId").toString();
																	if (controlTypeId.equalsIgnoreCase("112")) {
																		longName.remove(FieldlongName);
																	}
																	else if (controlTypeId.equalsIgnoreCase("110")) {
																		String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true && interactable == true) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			//String generateDate=generateRandomDate();
																			String generateDate=getFutureDate(100);
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																					.sendKeys(generateDate);
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("104")) {
																		String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true && interactable == true) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																					.sendKeys(Date(10));
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("100")) {
																		String xpath = "//input[contains(@id,'" + TabshortName + "."
																				+ FieldshortName + "." + FIC + "')]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true && interactable == true) {
																			String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																					+ j + "].dataTypeId").toString();
																			if(DataTypeId.equalsIgnoreCase("101")) {
																				String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																				String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																				if(!keysValue.equals("")) {
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																				}
																				else {
																					ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																					.sendKeys(generateRandomString(6));
																				}
																			}
																			if(DataTypeId.equalsIgnoreCase("100")) {
																				String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																				String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																				if(!keysValue.equals("")) {
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																				}
																				else {
																				getrandomInt = Integer.toString(getrandomInterger(2,50));
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(getrandomInt);
																				}
																			}
																			if(DataTypeId.equalsIgnoreCase("102")) {
																				String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																				String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																				if(!keysValue.equals("")) {
																				clear(By.xpath(xpath), " ");
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																				}
																				else {
																				randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																				clear(By.xpath(xpath), "clear Decimal field");
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(randomDecimal);
																				}
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("106")
																			|| controlTypeId.equalsIgnoreCase("105")) {
																		String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+dateIterator+"]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true && interactable==true) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			Select sel = new Select(
																					ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																			sel.selectByVisibleText(keysValue);
																			}
																			else {
																				if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																					/*
																					String mandatory_item="//div/button[text()='Confirm']";
																					waitForElementToBeVisible(By.xpath(mandatory_item));
																					JSClick(By.xpath(mandatory_item), "confirm mandatory item");
																					
																					*/
																					Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																					sel_MI.selectByValue("Yes");
																				}
																				else {
																					Select sel = new Select(
																							ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																					sel.selectByIndex(1);
																				}
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("107")) {
																		String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																				+ FieldshortName + "." + FIC +"')]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true && interactable == true) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																					.sendKeys(generateRandomString(15));
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("102")) {
																		String xpath = "//input[contains(@id,'" + TabshortName + "."
																				+ FieldshortName + "." + FIC + "')]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true && interactable == true) {
																			/*
																			String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																					.replaceAll("\\p{P}", ""));
																			*/
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																			System.out.println("Buyer Does not want to select Checkbox/Radio button");
																			}
																			else {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("103")) {
																		String xpath = "(//input[@type='radio'])["+dateIterator+"]";
																		scrollToElement(By.xpath(xpath));
																		boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																		if (fielddisplay == true) {
																			/*
																			String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																					.replaceAll("\\p{P}", ""));
																			*/
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																			System.out.println("Buyer Does not want to select Checkbox/Radio button");
																			}
																			else {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																			}
																			longName.remove(FieldlongName);
																		} else {
																			longName.remove(FieldlongName);
																		}
																	}
																	else if (controlTypeId.equalsIgnoreCase("108")) {
																		try {
																			String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																			//System.out.println(shortName_Data);
																			if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																			String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																					+ FieldshortName + "." + FIC + "')]";
																			set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																			longName.remove(FieldlongName);
																		}
																		} catch (Exception e) {
																			longName.remove(FieldlongName);
																			}
																		}
																	}
																}
															dateIterator=dateIterator+1;	
														}		
													}
												}
											} catch (Exception e) {
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("103")&& Dynamicity.getDataFromPropertiesFile("ExcelUpload", filePath_4).equalsIgnoreCase("Yes")) {
								try {
									String downloadButton = "//*[@id='"+templateShortName+"']//input[@upload-event='rfqFileUploadEvent']/parent::a/preceding-sibling::a[1]/button";
									String uploadButton= "//*[@id='"+templateShortName+"']//input[@upload-event='rfqFileUploadEvent']";
									int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
									boolean fielddisplay=isElementDisplayed_Updated(By.xpath(downloadButton), searchTime);
									boolean interactable=isElementEnable_Updated(By.xpath(downloadButton), searchTime);
									/*File folder = new File(System.getProperty("user.dir") + "\\Resources\\rfqExcel");
									FileUtils.cleanDirectory(folder);*/
									if (fielddisplay == true && interactable == true) {
										String tg=getDataFromPropertiesFile("Template", filePath_4);
										String env=getDataFromPropertiesFile("Environment", filePath_4);
										tg=tg.replaceAll("\\s+", "").replaceAll("\\p{P}", "");
										String tn=tabName.replaceAll("\\s+", "").replaceAll("\\p{P}", "");
										String path = System.getProperty("user.dir") + "\\Resources\\rfqExcel\\" + tg + "_" + tn + "_Tender_" + env + ".xlsx";
										System.out.println(path);
										ExcelFileProcessor.inputValueIntoB7(path, tabName, FreshIndentTenderItemCount);
										set(By.xpath(uploadButton), path, "Uploaded RFQ Item Template");
										waitForElement(By.xpath("//*[contains(@id,'"+templateShortName+"')]//td[text()='1']"), 60);
										String acceptItems="//div[contains(text(), 'Document uploaded successfully')]/parent::div/following-sibling::div/div/button";
										boolean fielddisplay_AC=isElementDisplayed_Updated(By.xpath(acceptItems), 60);
										boolean interactable_AC=isElementEnable_Updated(By.xpath(acceptItems), 60);
										if (fielddisplay_AC == true && interactable_AC == true) {
											click(By.xpath(acceptItems), "Click on Ok button after upload items");
										}
									}
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After uploaded Excel file",
											"Successfully Not uploaded " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e) {
														//System.out.println("Just one dropdown value is present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												if(fielddisplay == true && interactable == true) {	
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
													}
													else {
														log.info("locator is not present");
													}
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
													}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			// Savebutton
			waitForObj(500);
			scrollToTopOfThePage();
			waitForObj(2000);
			String SB="//button[@class='roundActionBtn m-r-15 btn-primary animate_btn']";
			boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SB), 60);
			boolean interactableSB=isElementEnable_Updated(By.xpath(SB), 60);
			if (fielddisplaySB == true && interactableSB == true) {
				click(By.xpath(SB), "Save Button");
				waitForObj(2000);
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void CreateTenderwithNonSOR_Fresh() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//div[contains(@id, 'mat-tab-label')]"));
				for (int h = 1; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//div[contains(@id, 'mat-tab-label')])[" + h + "]")).getText();
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							if(h % 4 == 0) {
								boolean temT=isElementEnable_Updated(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"), 1);
								if(temT==true){
									JSClick(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"), "Traverse");
									}
								}
							scrollToTopOfThePage();
							waitForObj(500);
							boolean temE=isElementEnable_Updated(By.xpath("//div/span[text()='" + tabName + "']"), 30);
							boolean temD=isElementDisplayed_Updated(By.xpath("//div/span[text()='" + tabName + "']"), 30);
							if(temE==true && temD==true){
							JSClick(By.xpath("//div/span[text()='" + tabName + "']"), "tabName");
							waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
							}
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							templateShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")){
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && !templateShortName.equalsIgnoreCase("rfqdate") && !templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("rfqdate")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {		
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
														//Dynamicity.updateDataIntoPropertyFile("bidStartDate", getBidStartDate(ST), filePath_4);
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+ST;
														//clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+2;
														//clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+1;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													if(FieldshortName.equalsIgnoreCase("meeting_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														//int bidSubmission=((SC*BT)+ST)-10;
														int bidSubmission=ST+3;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														//int bidSubmission=((SC*BT)+ST)-8;  
														int bidSubmission=ST+4;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												if(fielddisplay == true && interactable == true) {
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
												}
												else {
													log.info("locator is not present");
												}
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && !templateShortName.equalsIgnoreCase("rfqattachment") && !templateShortName.equalsIgnoreCase("requiredbidderattachment") && !templateShortName.equalsIgnoreCase("rfqpayment")) {
								try {
									List<WebElement> addTermsSpecification = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div[1]/div/button"));
									if (addTermsSpecification.size() > 0) {
										try {
											for (int m = 1; m <= addTermsSpecification.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]")).click();
												}
											}
										} catch (Exception e) {
											//System.out.println("addTermsSpecification not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												}
												//========
												//String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																clear(By.xpath(xpath), " ");
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+SB+"]";
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												}
												//========
												//String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												//========
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpathSpan= "//span[contains(@id, '" + TabshortName + "_" + FieldshortName + "')]";
												String xpath = "//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]"; 
													List<WebElement> uploadIconCounts = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpathSpan));
													int uploadC=uploadIconCounts.size();
													String uploadXpath="(//span[contains(@id, '" + TabshortName + "_" + FieldshortName + "')])["+uploadC+"]";
													List<WebElement> fileInputCounts = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
													int fileInputC=fileInputCounts.size();
													String inputXpath="(//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')])["+fileInputC+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(uploadXpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(uploadXpath), searchTime);
												if(fielddisplay==true && interactable==true){
												scrollToElement(By.xpath(uploadXpath));
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(inputXpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
													} 
												}
											else {
												longName.remove(FieldlongName);
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqattachment")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button"));
									int addB=addpopupbtns.size();
									if (addB> 0) {
										try {
											for (int m = 1; m <= addB; m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)[" + addB + "]")).click();
													}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																clear(By.xpath(xpath), " ");
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation1.xlsx","fileName");
														longName.remove(FieldlongName);
														
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									waitForObj(2000);
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									if(okbtnspopup.size()==0) {
										universalNormalWait();
										okbtnspopup = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									}
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											//boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]")).isDisplayed();
											boolean okbtnpopupdisplay = isElementDisplayed_Updated(By.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"), 1);
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
												waitForObj(2000);
											}
										}
									} catch (Exception e) {
									}
									//============================================
									waitForObj(3000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqpayment")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112") || controlTypeId.equalsIgnoreCase("102") || controlTypeId.equalsIgnoreCase("103") || controlTypeId.equalsIgnoreCase("107") || controlTypeId.equalsIgnoreCase("108") || controlTypeId.equalsIgnoreCase("109") || controlTypeId.equalsIgnoreCase("110") || controlTypeId.equalsIgnoreCase("104") || controlTypeId.equalsIgnoreCase("111") || controlTypeId.equalsIgnoreCase("100") || ((controlTypeId.equalsIgnoreCase("106")|| controlTypeId.equalsIgnoreCase("105")) &&  !FieldshortName.equalsIgnoreCase("payment_type"))) {
												longName.remove(FieldlongName);
											}
											else if ((controlTypeId.equalsIgnoreCase("106")|| controlTypeId.equalsIgnoreCase("105")) &&  FieldshortName.equalsIgnoreCase("payment_type")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByValue("Not Required");;
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='savePayment4']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//*[@id='savePayment4'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//*[@id='savePayment4'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("requiredbidderattachment")) {
								try {
									List<WebElement> addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div[1]/a/button"));
									if(addRequiredAttachment.size()==0) {
										universalNormalWait();
										addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div[1]/a/button"));
									}
									if (addRequiredAttachment.size() > 0) {
										try {
											for (int m = 1; m <= addRequiredAttachment.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button/fa-icon)["+ m + "]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)[" + m + "]")).click();
													}
											}
										} catch (Exception e) {
											//System.out.println("addRequiredAttachment not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																clear(By.xpath(xpath), " ");
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e){
														//System.out.println("Index 1 is not present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("103")&& !Dynamicity.getDataFromPropertiesFile("ExcelUpload", filePath_4).equalsIgnoreCase("Yes")) {
								try {
									//List<WebElement> addPRItems = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a//button[contains(@tooltip, 'Add PR line Item')]"));
									String itemGrouping="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a/button[@tooltip='Item Grouping']";
									List<WebElement> addnonsorbtns =new ArrayList<>();
									String addButtons;
									if(isElementEnable_Updated(By.xpath(itemGrouping), searchTime)) {
										addnonsorbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
										addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]";
									}
									else {
										addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2')]"));
										addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2')]";
									}
									//if (addnonsorbtns.size() > 0 && addPRItems.size()==0) {
									if (addnonsorbtns.size() > 0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
												/*
												boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(
																By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
																*/
												if (addnonsortdisplay == true && isEnable==true) {
													int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
													int dateIterator=1;
													for(int FIC=0; FIC<FreshIndentTenderItemCount; FIC++){
														//ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]")).click();
														JSClick(By.xpath("("+addButtons+")[" + m + "]"), "Add button");
														if ((FIC+1) % 20 == 1) {
															String nextButton="(//a[text()=' Next '])[2]";
															if(isElementEnable_Updated(By.xpath(nextButton), 1)==true && isElementEnable_Updated(By.xpath(nextButton), 2)==true) {
																JSClick(By.xpath(nextButton), "Next Button");
																}
															dateIterator=1;
														}
														
														ArrayList<String> shortName = new ArrayList<String>();
														ArrayList<String> longName = new ArrayList<String>();
														TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
														for (int j = 0; j < js
																.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
															if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
																FieldshortName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																		.toString();
																FieldlongName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																		.toString();
																shortName.add(FieldshortName);
																longName.add(FieldlongName);
																String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].controlTypeId").toString();
																if (controlTypeId.equalsIgnoreCase("112")) {
																	longName.remove(FieldlongName);
																}
																else if (controlTypeId.equalsIgnoreCase("110")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		//String generateDate=generateRandomDate();
																		String generateDate=getFutureDate(100);
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateDate);
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("104")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(Date(10));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("100")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																				+ j + "].dataTypeId").toString();
																		if(DataTypeId.equalsIgnoreCase("101")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(6));
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("100")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			getrandomInt = Integer.toString(getrandomInterger(2,50));
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(getrandomInt);
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("102")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			clear(By.xpath(xpath), " ");
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																			clear(By.xpath(xpath), "clear Decimal field");
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(randomDecimal);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("106")
																		|| controlTypeId.equalsIgnoreCase("105")) {
																	String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable==true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		Select sel = new Select(
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																		sel.selectByVisibleText(keysValue);
																		}
																		else {
																			if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																				/*
																				String mandatory_item="//div/button[text()='Confirm']";
																				waitForElementToBeVisible(By.xpath(mandatory_item));
																				JSClick(By.xpath(mandatory_item), "confirm mandatory item");
																				
																				*/
																				Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel_MI.selectByValue("Yes");
																			}
																			else {
																				Select sel = new Select(
																						ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel.selectByIndex(1);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("107")) {
																	String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC +"')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(15));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("102")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		/*
																		String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																				.replaceAll("\\p{P}", ""));
																		*/
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("103")) {
																	String xpath = "(//input[@type='radio'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true) {
																		/*
																		String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																				.replaceAll("\\p{P}", ""));
																		*/
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("108")) {
																	try {
																		String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																		//System.out.println(shortName_Data);
																		if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																		String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																				+ FieldshortName + "." + FIC + "')]";
																		set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																		longName.remove(FieldlongName);
																	}
																	} catch (Exception e) {
																		longName.remove(FieldlongName);
																		}
																	}
																}
															}
														dateIterator=dateIterator+1;	
													}		
												}
											}
										} catch (Exception e) {
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("103")&& Dynamicity.getDataFromPropertiesFile("ExcelUpload", filePath_4).equalsIgnoreCase("Yes")) {
								try {
									String downloadButton = "//*[@id='"+templateShortName+"']//input[@upload-event='rfqFileUploadEvent']/parent::a/preceding-sibling::a[1]/button";
									String uploadButton= "//*[@id='"+templateShortName+"']//input[@upload-event='rfqFileUploadEvent']";
									int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
									boolean fielddisplay=isElementDisplayed_Updated(By.xpath(downloadButton), searchTime);
									boolean interactable=isElementEnable_Updated(By.xpath(downloadButton), searchTime);
									/*File folder = new File(System.getProperty("user.dir") + "\\Resources\\rfqExcel");
									FileUtils.cleanDirectory(folder);*/
									if (fielddisplay == true && interactable == true) {
										String tg=getDataFromPropertiesFile("Template", filePath_4);
										String env=getDataFromPropertiesFile("Environment", filePath_4);
										tg=tg.replaceAll("\\s+", "").replaceAll("\\p{P}", "");
										String tn=tabName.replaceAll("\\s+", "").replaceAll("\\p{P}", "");
										String path = System.getProperty("user.dir") + "\\Resources\\rfqExcel\\" + tg + "_" + tn + "_Tender_" + env + ".xlsx";
										System.out.println(path);
										ExcelFileProcessor.inputValueIntoB7(path, tabName, FreshIndentTenderItemCount);
										set(By.xpath(uploadButton), path, "Uploaded RFQ Item Template");
										waitForElement(By.xpath("//*[contains(@id,'"+templateShortName+"')]//td[text()='1']"), 60);
										String acceptItems="//div[contains(text(), 'Document uploaded successfully')]/parent::div/following-sibling::div/div/button";
										boolean fielddisplay_AC=isElementDisplayed_Updated(By.xpath(acceptItems), 60);
										boolean interactable_AC=isElementEnable_Updated(By.xpath(acceptItems), 60);
										if (fielddisplay_AC == true && interactable_AC == true) {
											click(By.xpath(acceptItems), "Click on Ok button after upload items");
										}
									}
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After uploaded Excel file",
											"Successfully Not uploaded " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e) {
														//System.out.println("Just one dropdown value is present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												if(fielddisplay == true && interactable == true) {	
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
													}
													else {
														log.info("locator is not present");
													}
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
													}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			// Savebutton
			waitForObj(500);
			scrollToTopOfThePage();
			waitForObj(1000);
			String SB="//button[@class='roundActionBtn m-r-15 btn-primary animate_btn']";
			boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SB), 60);
			boolean interactableSB=isElementEnable_Updated(By.xpath(SB), 60);
			//System.out.println("Field is displayed: " + fielddisplaySB);
			//System.out.println("Field is displayed: " + interactableSB);
			if (fielddisplaySB == true && interactableSB == true) {
				click(By.xpath(SB), "Save Button");
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		
		public static int dtc(String text) {
			String pattern = "of\\s*(\\d+)\\s*Item\\(s\\)";
	        Pattern r = Pattern.compile(pattern);
	        Matcher m = r.matcher(text);
	     
	        if (m.find()) {
	            return Integer.parseInt(m.group(1));
	        } else {
	            throw new IllegalArgumentException("No match found in the input string.");
	        }
		}
		public static int itemtemplatecount=12;
		public static String uitabname;
		public void Evaluation() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				int ic = js.getInt("templates.size()");
				for (int h = 3; h <=itemtemplatecount+2; h++) {
				if(h % 4 == 0) {
					boolean temTD=isElementDisplayed_Updated(By.xpath("//button[@class='mat-ripple mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after']"), 2);
					boolean temTE=isElementEnable_Updated(By.xpath("//button[@class='mat-ripple mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after']"), 2);
					if(temTD==true && temTE==true){
						JSClick(By.xpath("//button[@class='mat-ripple mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after']"), "Traverse");
						}
					}
				boolean temE=isElementEnable_Updated(By.xpath("((//mat-tab-header/div[@class='mat-mdc-tab-label-container'])[1]/div[@class='mat-mdc-tab-list']/div[@class='mat-mdc-tab-labels']/div)[" + h + "]"), 10);
				boolean temD=isElementDisplayed_Updated(By.xpath("((//mat-tab-header/div[@class='mat-mdc-tab-label-container'])[1]/div[@class='mat-mdc-tab-list']/div[@class='mat-mdc-tab-labels']/div)[" + h + "]"), 10);
				if(temE==true && temD==true){
					uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("((//mat-tab-header/div[@class='mat-mdc-tab-label-container'])[1]/div[@class='mat-mdc-tab-list']/div[@class='mat-mdc-tab-labels']/div)[" + h + "]")).getText();
					JSClick(By.xpath("((//mat-tab-header/div[@class='mat-mdc-tab-label-container'])[1]/div[@class='mat-mdc-tab-list']/div[@class='mat-mdc-tab-labels']/div)[" + h + "]"), uitabname);
				}
				int i=0;
				while(i <ic) {
				int count=0;
					masterprocessids = js.get("templates[" + i + "].associatedBidPart").toString();
					if (masterprocessids.equalsIgnoreCase(Integer.toString(bp)) || masterprocessids.equalsIgnoreCase("3")) {
						String tabName = js.get("templates[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							tabularformat = js.get("templates[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("templates[" + i + "].templateTypeId").toString();
							templateShortName = js.get("templates[" + i + "].shortName").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].roleWiseFieldEntry")
												.toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].roleWiseFieldEntry")
												.toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													clear(By.xpath(xpath), "Clear field value");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), "Clear field value");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), "Clear field value");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												if(fielddisplay == true && interactable == true) {
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
												}
												else {
													log.info("locator is not present");
												}
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].roleWiseFieldEntry")
												.toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e) {
														//System.out.println("Just one dropdown value is present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												if(fielddisplay == true && interactable == true) {	
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
													}
													else {
														log.info("locator is not present");
													}
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
													}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].roleWiseFieldEntry")
												.toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].roleWiseFieldEntry")
												.toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), " ");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), " ");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]"; 
												String xpath_upload = "//span[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_upload), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_upload), searchTime);
												if (interactable==true && fielddisplay==true) {
												//scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation1.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(TabshortName.equalsIgnoreCase("qout_attachment"))) {
								try {	
								ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									String c="//*[@id='"+TabshortName+"']/div/div/div/div/div/app-bid-details-tabular-data/div[1]/div/span";String cs=text(By.xpath(c));count=dtc(cs);
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												String formula = js.get("templates[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("templates[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														}
														else {
															String DataTypeId = js.get("templates[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
															boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
															boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
															if (fielddisplayAL == true && interactableAL == true) {
																JSClick(By.xpath(xpath_A2A), "Apply To All");
																
																String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																
																}
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/preceding-sibling::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/preceding-sibling::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											/*
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												count=elementsCount;
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
													List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
													int elementsCount=elements.size();
													count=elementsCount;
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
											*/
										}
									}
									pdfResultReport.addStepDetails(uitabname, "After filling up all fields",
											"Successfully filled up " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(templateShortName, "After filling up all fields",
											"Successfully filled up " + templateShortName + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									String c="//*[@id='"+TabshortName+"']/div/div/div/div/div/app-bid-details-tabular-data/div/div[2]/div/span";String cs=ThreadLocalWebdriver.getDriver().findElement(By.xpath(c)).getText();count=dtc(cs);
									for (int j = 0; j < js.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
														if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
														//scrollToElement(By.xpath(xpath_A2A));
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														else {
														//String generateDate=generateRandomDate();
														String generateDate=getFutureDate(100);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
																.sendKeys(generateDate);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
														//scrollToElement(By.xpath(xpath_A2A));
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
														//scrollToElement(By.xpath(xpath_A2A));
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(Date(10));
														//System.out.println(Date(10));
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
														//scrollToElement(By.xpath(xpath_A2A));
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
											if(elementsCount>1) {
												String xpath_1 = "//input[@id='" + TabshortName + "." + FieldshortName + ".0']";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												//System.out.println("Field is Enable: " + interactable);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList[" + j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), "Clear field value");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															
															String xpath_A2A = "//input[@id='" + TabshortName + "." + FieldshortName + ".0']/parent::a/fa-icon[@mattooltip='Apply to all']";
															//scrollToElement(By.xpath(xpath_A2A));
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(6));
															
															String xpath_A2A = "//input[@id='" + TabshortName + "." + FieldshortName + ".0']/parent::a/fa-icon[@mattooltip='Apply to all']";
															//scrollToElement(By.xpath(xpath_A2A));
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), "Clear field value");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															
															String xpath_A2A = "//input[@id='" + TabshortName + "." + FieldshortName + ".0']/parent::a/fa-icon[@mattooltip='Apply to all']";
															//scrollToElement(By.xpath(xpath_A2A));
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
														else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(getrandomInt);
															
															String xpath_A2A = "//input[@id='" + TabshortName + "." + FieldshortName + ".0']/parent::a/fa-icon[@mattooltip='Apply to all']";
															//scrollToElement(By.xpath(xpath_A2A));
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), "Clear field value");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															
															String xpath_A2A = "//input[@id='" + TabshortName + "." + FieldshortName + ".0']/parent::a/fa-icon[@mattooltip='Apply to all']";
															//scrollToElement(By.xpath(xpath_A2A));
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
														else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															System.out.println(xpath_1);
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(randomDecimal);
															
															String xpath_A2A = "(//input[@id='" + TabshortName + "." + FieldshortName + ".0'])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
															
															//scrollToElement(By.xpath(xpath_A2A));
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if(elementsCount==1){
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "//select[@id='" + TabshortName + "." + FieldshortName + ".0']";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByVisibleText(keysValue);
														
														String xpath_A2A = "//select[@id='" + TabshortName + "." + FieldshortName + ".0']/preceding-sibling::a/fa-icon[@mattooltip='Apply to all']";
														//scrollToElement(By.xpath(xpath_A2A));
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByIndex(1);
														
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/following-sibling::a/fa-icon[@mattooltip='Apply to all']";
														//scrollToElement(By.xpath(xpath_A2A));
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														boolean isD=isElementDisplayed_Updated(By.xpath(xpath_A2A_Confirm), 5);
														boolean isE=isElementEnable_Updated(By.xpath(xpath_A2A_Confirm), 5);
														if(isD==true && isE==true) {
																click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															}
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "//textarea[@id='" + TabshortName + "." + FieldshortName + ".0']";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													
													String xpath_A2A = "//textarea[@id='" + TabshortName + "." + FieldshortName + ".0']/parent::a/fa-icon[@mattooltip='Apply to all']";
													//scrollToElement(By.xpath(xpath_A2A));
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(15));
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/fa-icon[@mattooltip='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							
						}
					}
					if(count>1){
						i=i+count;
					}
					else{
						i++;
						}
					}
				}
				String SB="//button[@mattooltip='Save']/fa-icon";
				boolean fielddisplaySB=isElementDisplayed_Updated(By.xpath(SB), 5);
				boolean interactableSB=isElementEnable_Updated(By.xpath(SB), 5);
				if (fielddisplaySB == true && interactableSB == true) {
					click(By.xpath(SB), "Save Button");
				}
				isElementDisplayed_Updated(By.xpath("//*[@class='ngx-overlay loading-foreground']"), 1);
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				
				String ignoreB="//button[text()='Ignore']";
				boolean fielddisplayignoreB=isElementDisplayed_Updated(By.xpath(ignoreB), 2);
				boolean interactableignoreB=isElementEnable_Updated(By.xpath(ignoreB), 2);
				if (fielddisplayignoreB == true && interactableignoreB == true) {
					click(By.xpath(ignoreB), "Ignore Button");
				}
				isElementDisplayed_Updated(By.xpath("//*[@class='ngx-overlay loading-foreground']"), 1);
				waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
				String CB="//button[text()='Close']";
				dynamic_Loader(tendercreationlocators.loadingLocator, 2);   //added by pavel 26-12-2024
				boolean fielddisplayCB=isElementDisplayed_Updated(By.xpath(CB), 5);
				boolean interactableCB=isElementEnable_Updated(By.xpath(CB), 5);
				if (fielddisplayCB == true && interactableCB == true) {
					click(By.xpath(CB), "Confirm Button");
				}
			
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void Indent_General_Info_Dynamic(String TemplateGroup) throws Throwable{
			try {
				log.info("started executing the method:: Indent_General_Info_Dynamic()");
				select(tendercreationlocators.Indent_TG_select, TemplateGroup);
				String grabQueryIndentParameter="//option[contains(text(), '"+TemplateGroup+"')]";
				String QueryIndentParameter=null;
				while(QueryIndentParameter==null) {
					try {	
					QueryIndentParameter = ThreadLocalWebdriver.getDriver().findElement(By.xpath(grabQueryIndentParameter)).getAttribute("value");
					}
					catch(Exception e) {
						QueryIndentParameter=null;
					}
				}
				distinctTGCount=DatabaseComponent.countMappedTender(QueryIndentParameter);
				templateGroupDetails_Indent(QueryIndentParameter);
				if(!TemplateGroup.equalsIgnoreCase(Dynamicity.getDataFromPropertiesFile("IndentTemplate", super.filePath_5))) {
					fetchAllFieldNames_Indent();
					}
				else {
					if(Dynamicity.getDataFromPropertiesFile("FirstTimeRun", filePath_4).equalsIgnoreCase("Yes")) {
						fetchAllFieldNames_Indent();
					}
				}
			} catch (Exception e) {
				log.fatal("Not able to save generalInfo tab fields" + e.getMessage());
				pdfResultReport.addStepDetails("Indent_General_Info_Dynamic",
						"Should save generalInfo tab fields during indent creation", "Unable to save generalInfo tab fields during indent creation" + e.getMessage(),
						"Fail", "N");
			}
		}	
		public void CreateIndentwithNonSOR() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				for (int k = 0; k < itemtemplatecount; k++) {
					masterprocessids = js.get("groupTemplateList[" + k + "].masterProcessId").toString();
					templateShortName = js.get("groupTemplateList[" + k + "].shortName").toString();
					tabularformat = js.get("groupTemplateList[" + k + "].displayLayoutid").toString();
					templateTypeFormat = js.get("groupTemplateList[" + k + "].templateTypeId").toString();
						if (masterprocessids.equalsIgnoreCase("3") && templateShortName.equalsIgnoreCase("indent_general_info")) {
							String tabName = js.get("groupTemplateList[" + k + "].subProcessName").toString();
								if (tabularformat.equalsIgnoreCase("101") && templateTypeFormat.equalsIgnoreCase("106")) {
									try {
										ArrayList<String> shortName = new ArrayList<String>();
										ArrayList<String> longName = new ArrayList<String>();
										TabshortName = js.get("groupTemplateList[" + k + "].shortName").toString();
										for (int j = 0; j < js
												.getInt("groupTemplateList[" + k + "].templateFieldList.size()"); j++) {
											if (js.get("groupTemplateList[" + k + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + k + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
												FieldshortName = js.get(
														"groupTemplateList[" + k + "].templateFieldList[" + j + "].shortName")
														.toString();
												shortName.add(FieldshortName);
												FieldlongName = js.get(
														"groupTemplateList[" + k + "].templateFieldList[" + j + "].longName")
														.toString();
												longName.add(FieldlongName);
												String controlTypeId = js.get("groupTemplateList[" + k + "].templateFieldList["
														+ j + "].controlTypeId").toString();
												if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("104") && !templateShortName.equalsIgnoreCase("rfqdate") && !templateShortName.equalsIgnoreCase("prebiddiscussion")) {
													String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(Date(10));
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String DataTypeId = js.get("groupTemplateList[" + k + "].templateFieldList["
																+ j + "].dataTypeId").toString();
														if(DataTypeId.equalsIgnoreCase("101")) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(6));
															}
														}
														if(DataTypeId.equalsIgnoreCase("100")) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
															}
														}
														if(DataTypeId.equalsIgnoreCase("102")) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")
														|| controlTypeId.equalsIgnoreCase("105")) {
													String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(keysValue.equalsIgnoreCase("DoNotSelect")) {
														System.out.println("Buyer Does not want to select Checkbox/Radio button");
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													String xpath = "//input[@type='radio']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														/*
														String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																.replaceAll("\\p{P}", ""));
														*/
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(keysValue.equalsIgnoreCase("DoNotSelect")) {
														System.out.println("Buyer Does not want to select Checkbox/Radio button");
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													String xpath = "//input[contains(@id,'" + TabshortName + "_"
													+ FieldshortName + "')]"; 
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (interactable == true) {
													scrollToElement(By.xpath(xpath));
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													} else {
													longName.remove(FieldlongName);
													}
													}
											}
										}
										
										pdfResultReport.addStepDetails("Indent General Information", "After clicking on Save Button",
												"Successfully Saved " + "Indent General Information" + " tab" + " ", "Pass", "Y");
									} catch (Exception e) {
										pdfResultReport.addStepDetails("Indent General Information", "After clicking on Save Button",
												"Successfully Saved " + "Indent General Information" + " tab" + " ", "Fail", "Y");
									}
								}
								JSClick(tendercreationlocators.Savebtn_IndentNew, "savebutton");
								dynamic_Loader(tendercreationlocators.loadingLocator, 2);
								waitForElementToBeClickable(tendercreationlocators.IndentSuccessOK);//click(tendercreationlocators.IndentSuccessOK, "IndentSuccess");
								JSClick(tendercreationlocators.IndentSuccessOK, "IndentSuccess");
								dynamic_Loader(tendercreationlocators.loadingLocator, 2);
//								universalNormalWait(); //if fail
							}
						}
						
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//div[contains(@class, 'nav nav-tabs')]/button"));
				for (int h = 2; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//div[contains(@class, 'nav nav-tabs')]/button)[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("3")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								String xpath = "//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div";
								boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
								boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
								if (fielddisplay == true && interactable == true) {
								JSClick(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"),"Traverse button");
								}
							}
							scrollToTopOfThePage();
							//JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[contains(@class, 'nav nav-tabs')]/button[text()='" + tabName + "']"));
							if(isElementEnable_Updated(By.xpath("//div[contains(@class, 'nav nav-tabs')]/button[text()='" + tabName + "']"), 10)==true && isElementDisplayed_Updated(By.xpath("//div[contains(@class, 'nav nav-tabs')]/button[text()='" + tabName + "']"), 10)==true) {
							JSClick(By.xpath("//div[contains(@class, 'nav nav-tabs')]/button[text()='" + tabName + "']"), "tabName");
//							waitForObj(1000);  //if fail
							waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
							//universalNormalWait();
							//checkPageIsReady();
							}
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							templateShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("106") && !templateShortName.equalsIgnoreCase("indent_attachment")) {
								try {
									List<WebElement> addTermsSpecification = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[contains(@id,'"+templateShortName+"')]/div/div/div[2]/button[1]"));
									if (addTermsSpecification.size() > 0) {
										try {
											for (int m = 1; m <= addTermsSpecification.size(); m++) {
												//System.out.println("(//*[contains(@id,'"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[contains(@id,'"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[contains(@id,'"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[contains(@id,'"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]")).click();
												}
											}
										} catch (Exception e) {
											//System.out.println("addTermsSpecification not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												}
												//========
												//String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														//ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(generateDate);
														WebElement datePicker = ThreadLocalWebdriver.getDriver().findElement(By.xpath(""+xpath+"//parent::div//following-sibling::div/fa-icon"));
														datePicker.click(); // Open the date picker popup
														// Select date (example assuming it's a calendar-like popup)
														//String desiredDate = generateRandomDate();
														String desiredDate = "11";
														//System.out.println(desiredDate);
														WebElement dateWidget = ThreadLocalWebdriver.getDriver().findElement(By.xpath("/html/body/bs-datepicker-container/div/div/div/div[1]/bs-days-calendar-view/bs-calendar-layout/div[2]/table/tbody")); // Replace with actual date picker locator
														List<WebElement> columns = dateWidget.findElements(By.tagName("td"));
														int columnsC= columns.size();
														//System.out.println(columnsC);
														for (WebElement cell : columns) {
														    // Select desired date
															//System.out.println(cell.getText());
														    if (cell.getText().equals(desiredDate)) {
														        //cell.findElement(By.linkText(desiredDate)).click();
														    	cell.findElement(By.xpath("//span[text()='"+desiredDate+"']")).click();
														        break;
														    }
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+SB+"]";
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												}
												//========
												//String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												//========
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("106") && templateShortName.equalsIgnoreCase("indent_attachment")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[contains(@id, '"+templateShortName+"')]/div[1]/div[1]/button/fa-icon"));
									int addB=addpopupbtns.size();
									if (addB> 0) {
										try {
											for (int m = 1; m <= addB; m++) {
												//System.out.println("(//*[contains(@id, '"+templateShortName+"')]/div[1]/div[1]/button/fa-icon)["+ addB + "]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div[1]/div[1]/button/fa-icon)["+ addB + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div[1]/div[1]/button/fa-icon)["+ addB + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div[1]/div[1]/button/fa-icon)[" + addB + "]")).click();
													}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"; 
												//String xpath = "//*[contains(@id, '" + TabshortName + "')]/div/div/div[2]/div/table/tbody/tr/td[2]/span/button/input";
												String xpath="//div[@id='addAttachment'] //input[@class='uploadBtncls']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												/*
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
													}
													*/
												
												longName.remove(FieldlongName);
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									//List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='addAttachment']/div/div/div[3]/button"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//*[@id='addAttachment']/div/div/div[3]/button)[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//*[@id='addAttachment']/div/div/div[3]/button)[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("107") && !Dynamicity.getDataFromPropertiesFile("ExcelUpload", filePath_4).equalsIgnoreCase("Yes")) {
								try {
									List<WebElement> addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[contains(@id, '"+templateShortName+"')]/div[2]/button[1]"));
									if (addnonsorbtns.size() > 0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath(
														"(//*[contains(@id, '"+templateShortName+"')]/div[2]/button[1])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//*[contains(@id, '"+templateShortName+"')]/div[2]/button[1])[" + m + "]"), 5);
												/*
												boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(
																By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
																*/
												if (addnonsortdisplay == true && isEnable==true) {
													int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
													int dateIterator=1;
													for(int FIC=0; FIC<FreshIndentTenderItemCount; FIC++){
														//ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]")).click();
														JSClick(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div[2]/button[1])[" + m + "]"), "Add button");
														if ((FIC+1) % 20 == 1) {
															String nextButton="//*[contains(@id, '"+templateShortName+"')]/pagination-controls/pagination-template/nav/ul/li[5]/a";
															boolean fielddisplay=isElementDisplayed_Updated(By.xpath(nextButton), 1);
															boolean interactable=isElementEnable_Updated(By.xpath(nextButton), 1);
															if (fielddisplay == true && interactable == true) {
															JSClick(By.xpath(nextButton), "Next Button");
															dateIterator=1;
															}
														}
														
														ArrayList<String> shortName = new ArrayList<String>();
														ArrayList<String> longName = new ArrayList<String>();
														TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
														for (int j = 0; j < js
																.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
															if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
																FieldshortName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																		.toString();
																FieldlongName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																		.toString();
																shortName.add(FieldshortName);
																longName.add(FieldlongName);
																String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].controlTypeId").toString();
																if (controlTypeId.equalsIgnoreCase("112")) {
																	longName.remove(FieldlongName);
																}
																else if (controlTypeId.equalsIgnoreCase("110")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		//String generateDate=generateRandomDate();
																		String generateDate=getFutureDate(100);
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateDate);
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("104")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(Date(10));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("100")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																				+ j + "].dataTypeId").toString();
																		if(DataTypeId.equalsIgnoreCase("101")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(6));
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("100")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			getrandomInt = Integer.toString(getrandomInterger(2,50));
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(getrandomInt);
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("102")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(randomDecimal);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("106")
																		|| controlTypeId.equalsIgnoreCase("105")) {
																	String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable==true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																		if(!keysValue.equals("")) {
																		Select sel = new Select(
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																		sel.selectByVisibleText(keysValue);
																		}
																		else {
																			if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																				/*
																				String mandatory_item="//div/button[text()='Confirm']";
																				waitForElementToBeVisible(By.xpath(mandatory_item));
																				JSClick(By.xpath(mandatory_item), "confirm mandatory item");
																				
																				*/
																				Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel_MI.selectByValue("Yes");
																			}
																			else {
																				Select sel = new Select(
																						ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel.selectByIndex(1);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("107")) {
																	String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC +"')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(15));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("102")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		/*
																		String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																				.replaceAll("\\p{P}", ""));
																		*/
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("103")) {
																	String xpath = "(//input[@type='radio'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true) {
																		/*
																		String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																				.replaceAll("\\p{P}", ""));
																		*/
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("108")) {
																	try {
																		String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																		//System.out.println(shortName_Data);
																		if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																		String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																				+ FieldshortName + "." + FIC + "')]";
																		set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																		longName.remove(FieldlongName);
																	}
																	} catch (Exception e) {
																		longName.remove(FieldlongName);
																		}
																	}
																}
															}
														dateIterator=dateIterator+1;	
													}		
												}
											}
										} catch (Exception e) {
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("107")&& Dynamicity.getDataFromPropertiesFile("ExcelUpload", filePath_4).equalsIgnoreCase("Yes")) {
								try {
									String downloadButton = "//*[contains(@id,'"+templateShortName+"')]//input[@upload-event='uploadTabData']/parent::button/preceding-sibling::button[1]";
									String uploadButton= "//*[contains(@id,'"+templateShortName+"')]//input[@upload-event='uploadTabData']";
									int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
									boolean fielddisplay=isElementDisplayed_Updated(By.xpath(downloadButton), searchTime);
									boolean interactable=isElementEnable_Updated(By.xpath(downloadButton), searchTime);
									if (fielddisplay == true && interactable == true) {
										String tg=getDataFromPropertiesFile("IndentTemplate", filePath_4);
										String env=getDataFromPropertiesFile("Environment", filePath_4);
										tg=tg.replaceAll("\\s+", "").replaceAll("\\p{P}", "");
										String tn=tabName.replaceAll("\\s+", "").replaceAll("\\p{P}", "");
										String path = System.getProperty("user.dir") + "\\Resources\\rfqExcel\\" + tg + "_" + tn + "_Indent_" + env + ".xlsx";
										System.out.println(path);
										ExcelFileProcessor.inputValueIntoB7(path, tabName, FreshIndentTenderItemCount);
										set(By.xpath(uploadButton), path, "Uploaded RFQ Item Template");
										waitForElement(By.xpath("//*[contains(@id,'"+templateShortName+"')]//td[text()='1']"), 60);
										
										String acceptItems="//div[contains(text(), 'Document has been attached successfully')]/parent::div/following-sibling::div/button";
										boolean fielddisplay_AC=isElementDisplayed_Updated(By.xpath(acceptItems), 60);
										boolean interactable_AC=isElementEnable_Updated(By.xpath(acceptItems), 60);
										if (fielddisplay_AC == true && interactable_AC == true) {
											click(By.xpath(acceptItems), "Click on Ok button after upload items");
										}
									}
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After uploaded Excel file",
											"Successfully Not uploaded " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear "+longName+" field");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), "Clear "+longName+" field");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e) {
														log.error("unable to find Index no 1");
														//System.out.println("unable to find Index no 1");
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												try {
												scrollToElement(By.xpath(xpath));
												//set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												
												set(By.xpath(xpath),filePath,"fileName");
												
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
												} catch (Exception e) {
													//System.out.println("Failed to upload the file: " + e.getMessage());	
													longName.remove(FieldlongName);
													}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear "+longName+" field");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath), "Clear "+longName+" field");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, super.filePath_5);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}			
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
				
		public void CreatePODynamically() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//div[contains(@id, 'mat-tab-label')]"));
				for (int h = 1; h <= tabcount.size(); h++) {
				scrollToElement(By.xpath("(//div[contains(@id, 'mat-tab-label')])[" + h + "]"));
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//div[contains(@id, 'mat-tab-label')])[" + h + "]")).getText();
				for (int i = 0; i <itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("7")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								if(isElementDisplayed_Updated(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"), 2)==true)
								{
								JSClick(By.xpath("//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div"),"Traverse button");
								}
							}
							waitForObj(1000);
							boolean newUI=isElementEnable_Updated(By.xpath("//span/span[text()='" + tabName + "']"), 10);
							boolean newUI_D=isElementDisplayed_Updated(By.xpath("//span/span[text()='" + tabName + "']"), 10);
							if(newUI==true && newUI_D==true) {
								waitForSpinnerToDisappear(By.xpath("//*[@class='ngx-overlay loading-foreground']"));
								waitForObj(1000);
								JSClick(By.xpath("//span/span[text()='" + tabName + "']"), "tabName");
							}
							
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							templateShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104") && !templateShortName.equalsIgnoreCase("rfqdate") && !templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("rfqdate")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {		
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														//System.out.println(ST);
														//clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
														Dynamicity.updateDataIntoPropertyFile("bidStartDate", getBidStartDate(ST), filePath_4);
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+ST;
														//clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+2;
														//clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)+1;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													if(FieldshortName.equalsIgnoreCase("meeting_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)-2;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)-1;
														//clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && (templateTypeFormat.equalsIgnoreCase("116")||templateTypeFormat.equalsIgnoreCase("118")||templateTypeFormat.equalsIgnoreCase("119")||templateTypeFormat.equalsIgnoreCase("120")||templateTypeFormat.equalsIgnoreCase("111"))) {
								try {
									List<WebElement> addTermsSpecification = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button[1]"));
									if (addTermsSpecification.size() > 0) {
										try {
											for (int m = 1; m <= addTermsSpecification.size(); m++) {
												//System.out.println("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button[1])["+m+"]")).click();
												}
											}
										} catch (Exception e) {
											//System.out.println("addTermsSpecification not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
											try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "_-" + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
															}
														} 
													}
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
															}
														}
													}
												longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Date(getrandomInterger(20, 60));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
													}
													}
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Date(getrandomInterger(20, 60));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
															}
														} 
													}
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+it+"]";
													String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].formula").toString();
													String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].isAggregation").toString();
													//System.out.println(formula);
													if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
																String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].dataTypeId").toString();
																if(DataTypeId.equalsIgnoreCase("101")) {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(generateRandomString(6));
																}
																if(DataTypeId.equalsIgnoreCase("100")) {
																	getrandomInt = Integer.toString(getrandomInterger(2,50));
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(getrandomInt);
																}
																if(DataTypeId.equalsIgnoreCase("102")) {
																	randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(randomDecimal);
																		}
																	}
																} 
															}
														}
													}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
													String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].formula").toString();
													String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].isAggregation").toString();
													//System.out.println(formula);
													if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
																String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].dataTypeId").toString();
																if(DataTypeId.equalsIgnoreCase("101")) {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(generateRandomString(6));
																}
																if(DataTypeId.equalsIgnoreCase("100")) {
																	getrandomInt = Integer.toString(getrandomInterger(2,50));
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(getrandomInt);
																}
																if(DataTypeId.equalsIgnoreCase("102")) {
																	randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(randomDecimal);
																	}
																}
															}
														}
													}
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
															}
														} 
													}
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
															}
														}
													} 
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable== true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
															}
														} 
													}
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable== true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
															}
														}
													}
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												//========
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													/*
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													*/
														String xpath =null;
														List<WebElement> wb = ThreadLocalWebdriver.getDriver()
																.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]"));
														int SB=wb.size();
														if (SB> 1) {
															for(int it=1; it<=SB; it++) {
															xpath="(//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')])["+it+"]";
															boolean fielddisplay = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isDisplayed();
															boolean fieldEnable = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isEnabled();
															if(fieldEnable== true) {
															set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																}
															}
														}
														else {
															xpath = "//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]";
															boolean fielddisplay = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isDisplayed();
															boolean fieldEnable = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isEnabled();
															if(fieldEnable== true) {
															set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																	}
															}
															longName.remove(FieldlongName);
														} 
														catch (Exception e) {
															longName.remove(FieldlongName);
														}
												}
											}
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("112")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button"));
									int addB=addpopupbtns.size();
									if (addB> 0) {
										try {
											for (int m = 1; m <= addB; m++) {
												//System.out.println("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)["+ addB + "]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)["+ addB + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)["+ addB + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)[" + addB + "]")).click();
													}
											}
										} catch (Exception e) {
										}
									}
									String crossB="//button[contains(@id, '"+templateShortName+"')]";
									int cbc=ThreadLocalWebdriver.getDriver().findElements(By.xpath(crossB)).size();
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+cbc+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+cbc+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+cbc+"]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+cbc+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "(//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+cbc+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+cbc+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "(//input[@type='radio'])["+cbc+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath = "(//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')])["+cbc+"]";
													set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
														}
													} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("113")) {
								try {
									List<WebElement> addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button"));
									if (addRequiredAttachment.size() > 0) {
										try {
											for (int m = 1; m <= addRequiredAttachment.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div/div[2]/button)["+ m + "]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)["+ m + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)["+ m + "]"), 1);
												//System.out.println("adddisplay: "+adddisplay);
												//System.out.println("isEnable: "+isEnable);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[contains(@id, '"+templateShortName+"')]/div/div/div[2]/button)[" + m + "]")).click();
													boolean adddisplay_SelectAll = isElementDisplayed_Updated(By.xpath("//*[@id='Order']"), 2);
													boolean isEnable_SelectAll = isElementEnable_Updated(By.xpath("//*[@id='Order']"), 2);
													if (adddisplay_SelectAll == true && isEnable_SelectAll==true) {
														click(By.xpath("//*[@id='Order']"), "Select All Items");
													}
													String AddDocument="//button[contains(text(),'Add Document')]";
													click(By.xpath(AddDocument), "Add Document");
												}
											}
										} catch (Exception e) {
											//System.out.println("addRequiredAttachment not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
											try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "_-" + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
															}
														} 
													}
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "_" + FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														String generateDate=generateRandomDate();
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
															}
														}
													}
												longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Date(getrandomInterger(20, 60));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
													}
													}
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Date(getrandomInterger(20, 60));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
															}
														} 
													}
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+it+"]";
													String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].formula").toString();
													String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].isAggregation").toString();
													//System.out.println(formula);
													if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
																String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].dataTypeId").toString();
																if(DataTypeId.equalsIgnoreCase("101")) {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(generateRandomString(6));
																}
																if(DataTypeId.equalsIgnoreCase("100")) {
																	getrandomInt = Integer.toString(getrandomInterger(2,50));
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(getrandomInt);
																}
																if(DataTypeId.equalsIgnoreCase("102")) {
																	randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(randomDecimal);
																		}
																	}
																} 
															}
														}
													}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
													String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].formula").toString();
													String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].isAggregation").toString();
													//System.out.println(formula);
													if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
																String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].dataTypeId").toString();
																if(DataTypeId.equalsIgnoreCase("101")) {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(generateRandomString(6));
																}
																if(DataTypeId.equalsIgnoreCase("100")) {
																	getrandomInt = Integer.toString(getrandomInterger(2,50));
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(getrandomInt);
																}
																if(DataTypeId.equalsIgnoreCase("102")) {
																	randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(randomDecimal);
																	}
																}
															}
														}
													}
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
															}
														} 
													}
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
															}
														}
													} 
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												try {
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													for(int it=1; it<=SB; it++) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+it+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable== true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
															}
														} 
													}
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable== true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateRandomString(15));
															}
														}
													}
													longName.remove(FieldlongName);
												}
												catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												//========
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
														String xpath =null;
														List<WebElement> wb = ThreadLocalWebdriver.getDriver()
																.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]"));
														int SB=wb.size();
														if (SB> 1) {
															for(int it=1; it<=SB; it++) {
															xpath="(//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')])["+it+"]";
															boolean fielddisplay = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isDisplayed();
															boolean fieldEnable = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isEnabled();
															if(fieldEnable== true) {
															set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																}
															}
														}
														else {
															xpath = "//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]";
															boolean fielddisplay = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isDisplayed();
															boolean fieldEnable = ThreadLocalWebdriver.getDriver()
																	.findElement(By.xpath(xpath)).isEnabled();
															if(fieldEnable== true) {
															set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																	}
															}
															longName.remove(FieldlongName);
														} 
														catch (Exception e) {
															longName.remove(FieldlongName);
														}
												}
											}
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && (templateTypeFormat.equalsIgnoreCase("121")||templateTypeFormat.equalsIgnoreCase("122")||templateTypeFormat.equalsIgnoreCase("109"))) {
								try {
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									
									String ItemNumber=null;
									String itemCountString="//div[contains(@id, '"+TabshortName+"')]//div/span[contains(text(), 'Record(s)')]";
									String text= ThreadLocalWebdriver.getDriver().findElement(By.xpath(itemCountString)).getText();
							        String regex = "(\\d+)\\s+Record\\(s\\)";
							        Pattern pattern = Pattern.compile(regex);
							        Matcher matcher = pattern.matcher(text);
							        if (matcher.find()) {
							            ItemNumber = matcher.group(1); 
							            System.out.println("Extracted number from input1: " + ItemNumber);
							        } else {
							            System.out.println("No match found for item Count");
							        }
									//===========================
										//int POItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("POItemCount", filePath_4));
							        int POItemCount=Integer.parseInt(ItemNumber);
							        System.out.println(POItemCount);
										int dateIterator=1;
										pageValue=20;
										for(int FIC=0; FIC<POItemCount; FIC++){
											if ((FIC+1) > pageValue) {
												String nextButton="(//a[text()=' Next '])[2]";
												JSClick(By.xpath(nextButton), "Next Button");
												pageValue=+20;
												dateIterator=1;
											}
											ArrayList<String> shortName = new ArrayList<String>();
											ArrayList<String> longName = new ArrayList<String>();
											for (int j = 0; j < js
													.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
												if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
														.toString().equalsIgnoreCase("Y")) {
													FieldshortName = js.get(
															"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
															.toString();
													FieldlongName = js.get(
															"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
															.toString();
													shortName.add(FieldshortName);
													longName.add(FieldlongName);
													String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].controlTypeId").toString();
													if (controlTypeId.equalsIgnoreCase("112")) {
														longName.remove(FieldlongName);
													}
													if (controlTypeId.equalsIgnoreCase("110")) {
														String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true && interactable == true) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
															//String generateDate=generateRandomDate();
															String generateDate=getFutureDate(100);
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("104")) {
														String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true && interactable == true) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(Date(10));
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("100")) {
														String xpath = "//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "." + FIC + "')]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true && interactable == true) {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
																String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																String keysValue = getDataFromPropertiesFile(keys, filePath_6);
																if(!keysValue.equals("")) {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																}
																else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
																}
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																String keysValue = getDataFromPropertiesFile(keys, filePath_6);
																if(!keysValue.equals("")) {
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																}
																else {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
																}
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																String keysValue = getDataFromPropertiesFile(keys, filePath_6);
																if(!keysValue.equals("")) {
																clear(By.xpath(xpath), "Clear Decimal field before entering value");
																
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																String qtyAlert="//div[contains(text(), 'Quantity not more than main quantity!')]";
																boolean fielddisplay_qtyAlert=isElementDisplayed_Updated(By.xpath(qtyAlert), searchTime);
																boolean interactable_qtyAlert=isElementEnable_Updated(By.xpath(qtyAlert), searchTime);
																//System.out.println("Field is displayed: " + fielddisplay_qtyAlert);
																if (fielddisplay_qtyAlert == true) {
																	String qtyAlert_OK="//div[contains(text(), 'Quantity not more than main quantity!')]/parent::div//following-sibling::div/button";
																	click(By.xpath(qtyAlert_OK), "click ok against alert: Quantity not more than main quantity! ");
																	}
																}
																else {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																clear(By.xpath(xpath), "Clear Decimal field before entering value");
																
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
																String qtyAlert="//div[contains(text(), 'Quantity not more than main quantity!')]";
																boolean fielddisplay_qtyAlert=isElementDisplayed_Updated(By.xpath(qtyAlert), searchTime);
																boolean interactable_qtyAlert=isElementEnable_Updated(By.xpath(qtyAlert), searchTime);
																//System.out.println("Field is displayed: " + fielddisplay_qtyAlert);
																if (fielddisplay_qtyAlert == true) {
																	String qtyAlert_OK="//div[contains(text(), 'Quantity not more than main quantity!')]/parent::div//following-sibling::div/button";
																	click(By.xpath(qtyAlert_OK), "click ok against alert: Quantity not more than main quantity! ");
																	}
																}
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("106")
															|| controlTypeId.equalsIgnoreCase("105")) {
														String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+dateIterator+"]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true && interactable==true) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
															}
															else {
																if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																	
																	Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																	sel_MI.selectByValue("Yes");
																}
																else {
																	Select sel = new Select(
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																	try {
																	sel.selectByIndex(1);
																	}
																	catch(Exception e) {
																		System.out.println("Sorry only value is present in this list so 1st one is selected defaultly: "+e);
																	}
																}
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("107")) {
														String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "." + FIC +"')]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true && interactable == true) {
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
															}
															else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(15));
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("102")) {
														String xpath = "//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "." + FIC + "')]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true && interactable == true) {
															/*
															String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																	.replaceAll("\\p{P}", ""));
															*/
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(keysValue.equalsIgnoreCase("DoNotSelect")) {
															System.out.println("Buyer Does not want to select Checkbox/Radio button");
															}
															else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("103")) {
														String xpath = "(//input[@type='radio'])["+dateIterator+"]";
														scrollToElement(By.xpath(xpath));
														boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
														if (fielddisplay == true) {
															/*
															String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																	.replaceAll("\\p{P}", ""));
															*/
															String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
															String keysValue = getDataFromPropertiesFile(keys, filePath_6);
															if(keysValue.equalsIgnoreCase("DoNotSelect")) {
															System.out.println("Buyer Does not want to select Checkbox/Radio button");
															}
															else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
															}
															longName.remove(FieldlongName);
														} else {
															longName.remove(FieldlongName);
														}
													}
													if (controlTypeId.equalsIgnoreCase("108")) {
														try {
															String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
															//System.out.println(shortName_Data);
															if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
															String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																	+ FieldshortName + "." + FIC + "')]";
															set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
															longName.remove(FieldlongName);
														}
														} catch (Exception e) {
															longName.remove(FieldlongName);
															}
														}
													}
												}
											dateIterator=dateIterator+1;	
										}
						pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
								"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
					} catch (Exception e) {
						pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
								"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
					}
				}
							
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear Date field");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=generateRandomDate();
														clear(By.xpath(xpath), "Clear Date field");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear Date field");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														if(FieldshortName.equalsIgnoreCase("po_date")) {
															//System.out.println("don't need to pass PO Date");
														}
														else if(FieldshortName.equalsIgnoreCase("po_start_date")) {
															//System.out.println("don't need to pass PO Start Date");
														}
														else {
														clear(By.xpath(xpath), "Clear Date field");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(Date(10000));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath),"clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															clear(By.xpath(xpath),"clear field Details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath),"clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath),"clear field Details");
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_6);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath),"clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														clear(By.xpath(xpath),"clear field Details");
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_6);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			pdfResultReport.addStepDetails("Fill up PO details", "Before clicking on Save Button", "Success msg will come up after Saving details" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "Before clicking on Save Button",
					"Successfully not filled up all details " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		public void CreateTender_BidSubmission_FromPRwithNonSOR_STG() throws Throwable {
			try {
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
			//====================================================================================================================
				String gitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']")).getText();
				//System.out.println("UI Tabname:" + gitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String gitabNameBE = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (gitabname.equalsIgnoreCase(gitabNameBE)) {
							//System.out.println("Tender Creation Tab name:" + gitabname);
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + gitabNameBE + " is :" + ParentChildItem);
							JavascriptExecutor giJS = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement gitabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']"));
							giJS.executeScript("arguments[0].click();", gitabElem);
							Thread.sleep(6000);
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("105")&& templateTypeFormat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
				
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
				for (int h = 1; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 1; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(
									By.xpath("//ul[@class='nav nav-tabs']//li//a[text()=\"" + tabName + "\"]"));
							javas.executeScript("arguments[0].click();", tabElem);
							Thread.sleep(6000);
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[@data-original-title='Add']"));
									if (addpopupbtns.size() > 0) {
										try {
											for (int m = 1; m < addpopupbtns.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[@data-original-title='Add'])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[@data-original-title='Add'])[" + m + "]"), 5);
												/*
												boolean adddisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
														.isDisplayed();
														*/
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[@data-original-title='Add'])[" + m + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
									}
									List<WebElement> addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click,'addNonSORItem')]"));
									if (addnonsorbtns.size() > 0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(
																By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
												if (addnonsortdisplay == true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click,'addNonSORItem')])[" + m + "]")).click();
												}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath = "(//a[contains(@ng-if,'108')])[1]";
													String xpath2 = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay1 = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fielddisplay2 = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath2)).isEnabled();
													if(fielddisplay2== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														waitForObj(2000);
													}
													else if (fielddisplay1 == true) {
													//==============================
													File f = new File("text.xlsx");
													String absolute = f.getAbsolutePath();
													StringSelection sel = new StringSelection(absolute);
													Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
													//System.out.println("selection" + sel);
													ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath("(//a[contains(@ng-if,'108')])[1]"))
															.click();
													Thread.sleep(5000);
													Robot robot = new Robot();
													Thread.sleep(2000);
													robot.keyPress(KeyEvent.VK_CONTROL);
													robot.keyPress(KeyEvent.VK_V);
													robot.keyRelease(KeyEvent.VK_V);
													robot.keyRelease(KeyEvent.VK_CONTROL);
													Thread.sleep(3000);
													robot.keyPress(KeyEvent.VK_ENTER);
													robot.keyRelease(KeyEvent.VK_ENTER);
													Thread.sleep(5000);
													longName.remove(FieldlongName);
													}
													//==========================================
													else if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@id, 'add-author')]"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//button[contains(@id, 'add-author')])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[contains(@id, 'add-author')])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									List<WebElement> addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click,'addNonSORItem')]"));
									if (addnonsorbtns.size() > 0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[contains(@ng-click,'addNonSORItem')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[contains(@ng-click,'addNonSORItem')])[" + m + "]"), 5);
												/*
												boolean addnonsortdisplay = ThreadLocalWebdriver.getDriver()
														.findElement(
																By.xpath("(//button[contains(@ng-click,'addNonSORItem')])["+ m + "]")).isDisplayed();
																*/
												if (addnonsortdisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click,'addNonSORItem')])[" + m + "]")).click();
													waitForObj(4000);
													ArrayList<String> shortName = new ArrayList<String>();
													ArrayList<String> longName = new ArrayList<String>();
													TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
													for (int j = 0; j < js
															.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
														if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
																.toString().equalsIgnoreCase("Y")) {
															FieldshortName = js.get(
																	"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																	.toString();
															FieldlongName = js.get(
																	"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																	.toString();
															shortName.add(FieldshortName);
															longName.add(FieldlongName);
															String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].controlTypeId").toString();
															if (controlTypeId.equalsIgnoreCase("112")) {
																longName.remove(FieldlongName);
															}
															if (controlTypeId.equalsIgnoreCase("110")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																	}
																	else {
																	//String generateDate=generateRandomDate();
																	String generateDate=getFutureDate(100);
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(generateDate);
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("104")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(Date(10));
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("100")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																			+ j + "].dataTypeId").toString();
																	if(DataTypeId.equalsIgnoreCase("101")) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(generateRandomString(6));
																		}
																	}
																	if(DataTypeId.equalsIgnoreCase("100")) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		getrandomInt = Integer.toString(getrandomInterger(2,50));
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(getrandomInt);
																		}
																	}
																	if(DataTypeId.equalsIgnoreCase("102")) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																		.sendKeys(randomDecimal);
																		}
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("106")
																	|| controlTypeId.equalsIgnoreCase("105")) {
																String xpath = "//select[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable==true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	Select sel = new Select(
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																	sel.selectByVisibleText(keysValue);
																	}
																	else {
																	Select sel = new Select(
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																	sel.selectByIndex(1);
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("107")) {
																String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(!keysValue.equals("")) {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(generateRandomString(15));
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("102")) {
																String xpath = "//input[contains(@id,'" + TabshortName + "."
																		+ FieldshortName + "')]";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true && interactable == true) {
																	/*
																	String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																			.replaceAll("\\p{P}", ""));
																	*/
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																	System.out.println("Buyer Does not want to select Checkbox/Radio button");
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("103")) {
																String xpath = "//input[@type='radio']";
																boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																if (fielddisplay == true) {
																	/*
																	String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
																			.replaceAll("\\p{P}", ""));
																	*/
																	String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																	String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																	if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																	System.out.println("Buyer Does not want to select Checkbox/Radio button");
																	}
																	else {
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																	}
																	longName.remove(FieldlongName);
																} else {
																	longName.remove(FieldlongName);
																}
															}
															if (controlTypeId.equalsIgnoreCase("108")) {
																try {
																	String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																	//System.out.println(shortName_Data);
																	if(shortName_Data.equalsIgnoreCase("rfqattachment")) {
																	String xpath = "(//a[contains(@ng-if,'108')])[1]";
																	boolean fielddisplay1 = ThreadLocalWebdriver.getDriver()
																			.findElement(By.xpath(xpath)).isDisplayed();
																	if (fielddisplay1 == true) {
																	//==============================
																	File f = new File("text.xlsx");
																	String absolute = f.getAbsolutePath();
																	StringSelection sel = new StringSelection(absolute);
																	Toolkit.getDefaultToolkit().getSystemClipboard().setContents(sel, null);
																	//System.out.println("selection" + sel);
																	ThreadLocalWebdriver.getDriver()
																			.findElement(By.xpath("(//a[contains(@ng-if,'108')])[1]"))
																			.click();
																	Thread.sleep(5000);
																	Robot robot = new Robot();
																	Thread.sleep(2000);
																	robot.keyPress(KeyEvent.VK_CONTROL);
																	robot.keyPress(KeyEvent.VK_V);
																	robot.keyRelease(KeyEvent.VK_V);
																	robot.keyRelease(KeyEvent.VK_CONTROL);
																	Thread.sleep(3000);
																	robot.keyPress(KeyEvent.VK_ENTER);
																	robot.keyRelease(KeyEvent.VK_ENTER);
																	Thread.sleep(5000);
																	longName.remove(FieldlongName);
																	}
																}
																	//==========================================
																	else if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																	String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																			+ FieldshortName + "')]";
																	set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																	longName.remove(FieldlongName);
																}
																} catch (Exception e) {
																	longName.remove(FieldlongName);
																}
															}
														}
													}
												}
											}
										} catch (Exception e) {
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			// Savebutton
			waitForObj(2000);
			scrollToTopOfThePage();
			//scrollToElement(By.xpath("//button[@data-original-title='Save']"));
			waitForObj(2000);
			ThreadLocalWebdriver.getDriver().findElement(By.xpath("//button[@data-original-title='Save']")).click();
			waitForObj(5000);
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		public static Map<Integer, Integer> getTemplateMap() {
	        JSONObject jsonObject = new JSONObject(response);
	        JSONArray templates = jsonObject.getJSONArray("templates");
	        templateMap = new HashMap<>();
	        tempCount=templates.length();
	        for (int i = 0; i < tempCount; i++) {
	            JSONObject template = templates.getJSONObject(i);
	            int displaySequenceNo = template.getInt("displaySequenceNo");
	            int templategroupId = template.getInt("templategroupId");
	            if (!templateMap.containsKey(displaySequenceNo)) {
	                templateMap.put(displaySequenceNo, templategroupId);
	            }
	        }
	        
	        //========================================================
	        List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
					int tabCountSize = tabcount.size();
					ExecutorService executorService = Executors.newFixedThreadPool(tabCountSize-1);
					for (int h = 2; h <= tabCountSize; h++) {
			            final int tabIndex = h; 
			            executorService.submit(new Callable<Void>() {
			                
			                public Void call() throws Exception {
			                    try {
			                    	 String result =bid_EGI(tabIndex);
			                    	 tabres.put(tabIndex, result);
								} catch (Throwable e) {
									e.printStackTrace();
								}
			                    return null;
			                }
			            });
			        }
					
			        executorService.shutdown();
			        try {
			            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
			                executorService.shutdownNow();
			            }
			        } catch (InterruptedException e) {
			            executorService.shutdownNow();
			        }
				//===================================================
	        return templateMap;
	    }
		private static final String ALPHABETS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	    private static final Random RANDOM = new Random();
	    public static String generateRandomPAN() {
	        StringBuilder pan = new StringBuilder();
	        for (int i = 0; i < 5; i++) {
	            pan.append(ALPHABETS.charAt(RANDOM.nextInt(ALPHABETS.length())));
	        }
	        for (int i = 0; i < 4; i++) {
	            pan.append(RANDOM.nextInt(10));
	        }
	        pan.append(ALPHABETS.charAt(RANDOM.nextInt(ALPHABETS.length())));
	        return pan.toString().toUpperCase();
	    }
		public static int getrandomInterger(int min, int max) {
			return ((int) (Math.random() * (max - min))) + min;
		}
		public static String generateRandomString(int length) {
	        String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
	        StringBuilder randomString = new StringBuilder();
	        Random random = new Random();
	        for (int i = 0; i < length; i++) {
	            int randomIndex = random.nextInt(characters.length());
	            randomString.append(characters.charAt(randomIndex));
	        }
	        return randomString.toString();
	    }
		public static LocalDate generateRandomDate(int yearsIntoFuture) {
	        LocalDate currentDate = LocalDate.now();
	        int randomDays = new Random().nextInt(yearsIntoFuture * 365); // Assuming an average of 365 days in a year
	        return currentDate.plusDays(randomDays);
	    }
		public static int generateRandomNumber() {
	        Random random = new Random();
	        // Generate a random number between 10 and 999 (inclusive)
	        int randomNumber = random.nextInt(990) + 10;
	        return randomNumber;
	    }
		public static String generateRandomDate() {
	        Random random = new Random();
	        // Generate a random year between 2022 and 2025 (you can adjust this range)
	        int year = random.nextInt(4) + 2024;
	        // Generate a random month between 1 and 12
	        int month = random.nextInt(12) + 1;
	        // Generate a random day between 1 and the maximum days of the month
	        int maxDays = LocalDate.of(year, month, 1).lengthOfMonth();
	        int day = random.nextInt(maxDays) + 1;
	        // Create a LocalDate object with the generated values
	        LocalDate randomDate = LocalDate.of(year, month, day);
	        // Format the LocalDate as a String in the desired format "dd-MM-yyyy"
	        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
	        return randomDate.format(formatter);
	    }
		public static String getFutureDate(int numberOfDays) {
	        // Get current date
	        Calendar calendar = Calendar.getInstance();
	        calendar.add(Calendar.DAY_OF_YEAR, numberOfDays); // Add numberOfDays to the current date
	        // Format the date
	        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
	        Date futureDate = calendar.getTime();
	        // Return the formatted future date
	        return dateFormat.format(futureDate);
	    }
		public static double generateRandomTwoDigitDecimal() {
	        Random random = new Random();
	        // Generate a random integer between 10 and 99
	        int randomNumber = random.nextInt(900) + 100;
	        // Convert the random integer to a decimal number between 0.10 and 0.99
	        double randomDecimal = (double) randomNumber / 100;
	        return randomDecimal;
	    }
		public static String getDataFromPropertiesFile(String value, String filepath ) throws IOException {
			FileInputStream fileReader = null;
			Properties properties = null;
			String propertyValue;
			try {
				final String filePath = filepath;
				fileReader = new FileInputStream(filePath);
				properties = new Properties();
				properties.load(fileReader);
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			propertyValue = properties.getProperty(value);
			fileReader.close();
			return propertyValue;
		}
		public static String updateDataIntoPropertyFile(String key, String value, String Filepath) throws IOException {
			FileOutputStream fileWriter = null;
			Properties properties = null;
			try {
				final String filePath = Filepath;
				properties = new Properties();
				FileInputStream fis = new FileInputStream(filePath);
				properties.load(fis);
				fis.close();
				fileWriter = new FileOutputStream(filePath);
			} catch (IOException  e) {
				e.printStackTrace();
			}
			// properties.replace("tenderId", value);
			properties.replace(key, properties.get(key), value);
			try {
				properties.store(fileWriter, null);
			} catch (IOException e) {
				e.printStackTrace();
			}
			fileWriter.close();
			return value;
		}
		public static String createRandomPNG(String outputPath) {
	        // Generate a random image
	        BufferedImage image = generateRandomImage();
	        // Save the image as a PNG file
	        String filePath = outputPath + File.separator + generateRandomString(6)+ ".png";
	        saveImageAsPNG(image, filePath);
	        return filePath;
	    }
	    private static BufferedImage generateRandomImage() {
	        // Generate a random image
	        Random random = new Random();
	        int width = 200; // Width of the image
	        int height = 200; // Height of the image
	        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	        // Fill the image with random colors
	        Graphics2D graphics = image.createGraphics();
	        for (int y = 0; y < height; y++) {
	            for (int x = 0; x < width; x++) {
	                int alpha = 255; // Alpha channel (transparency), set to 255 for opaque
	                int red = random.nextInt(256); // Red component
	                int green = random.nextInt(256); // Green component
	                int blue = random.nextInt(256); // Blue component
	                int pixel = (alpha << 24) | (red << 16) | (green << 8) | blue; // ARGB format
	                image.setRGB(x, y, pixel);
	            }
	        }
	        graphics.dispose();
	        return image;
	    }
	    //==================If size is mentioned by Business===========
	    public static BufferedImage generateRandomImage(int width, int height) {
	        Random random = new Random();
	        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	        Graphics2D graphics = image.createGraphics();
	        
	        // Fill the image with random colors
	        for (int y = 0; y < height; y++) {
	            for (int x = 0; x < width; x++) {
	                int alpha = 255; // Full opacity
	                int red = random.nextInt(256); // Random red
	                int green = random.nextInt(256); // Random green
	                int blue = random.nextInt(256); // Random blue
	                int pixel = (alpha << 24) | (red << 16) | (green << 8) | blue; // ARGB format
	                image.setRGB(x, y, pixel);
	            }
	        }
	        graphics.dispose();
	        return image;
	    }
	    public static void saveImageWithTargetSize(BufferedImage image, String filePath, long targetSizeMB) throws IOException {
	        // Try different resolutions or quality until the image file size matches target size
	        File file = new File(filePath);
	        long targetSizeBytes = targetSizeMB * 1024 * 1024; // Convert MB to bytes

	        int width = image.getWidth();
	        int height = image.getHeight();

	        // Loop to adjust the image until the file size is close to the target
	        while (true) {
	            // Save the image as PNG
	            ImageIO.write(image, "PNG", file);

	            // Check file size
	            long fileSize = file.length();
	            if (fileSize <= targetSizeBytes) {
	                break;  // Exit if the file size is within the target size
	            }

	            // Reduce image resolution if the file is too large
	            width /= 2;  // Decrease the width
	            height /= 2; // Decrease the height
	            image = generateRandomImage(width, height);
	        }
	        System.out.println("Image saved: " + file.getAbsolutePath());
	        System.out.println("File size: " + file.length() / (1024 * 1024) + " MB");
	    }
	    //===========================================================================
	    private static void saveImageAsPNG(BufferedImage image, String filePath) {
	        try {
	            // Save the image as a PNG file
	            File outputFile = new File(filePath);
	            ImageIO.write(image, "png", outputFile);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
		public void fetchAllFieldNames_RFQ() throws Exception {
			try {
			InputStream input = new FileInputStream(System.getProperty("user.dir")
					+ "\\src\\main\\java\\com\\DataProperties\\Dynamic_PreCondition_Details.properties");
			prop.load(input);
			JsonPath js=jsResponse;
			int itemtemplatecount = js.getInt("groupTemplateList.size()");
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1") || masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
							ArrayList<String> longName = new ArrayList<String>();
							TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							int g = 0;
							for (int f = 0; f < js.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); f++) {
								String FieldValidation1;
								String CurrentFieldName = null;
								FieldValidation1 = js
										.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].isVisible")
										.toString();
								//System.out.println(FieldValidation1);
								if (FieldValidation1.equalsIgnoreCase("Y")|| FieldValidation1.equalsIgnoreCase("N")){
									FieldlongName = js
											.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].longName")
											.toString();
									longName.add(FieldlongName);
									CurrentFieldName = longName.get(g).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
									//System.out.println(CurrentFieldName);
									File fi = new File(this.filePath_3);
									InputStream input1 = new FileInputStream(fi);
									FileOutputStream output1 = null;
									output1 = new FileOutputStream(this.filePath_3);
									if (input != null) {
										prop.load(input1);
										prop.setProperty(CurrentFieldName, "");
										prop.store(output1, "");
										output1.close();
									}
									g = g + 1;
								}
							}
					}
				}
			}
			catch(Exception e) {
				System.out.println(e);
			}
				//input.close();
	    }
		public static void fetchAllFieldNames() throws Exception {
			//===============Select Properties File============================
			InputStream input = new FileInputStream(System.getProperty("user.dir")
					+ "\\src\\main\\java\\com\\DataProperties\\Dynamic_PreCondition_Details.properties");
			prop.load(input);
			JsonPath js=jsResponse;
			int itemtemplatecount = js.getInt("groupTemplateList.size()");
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1") || masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
							ArrayList<String> longName = new ArrayList<String>();
							TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							int g = 0;
							for (int f = 0; f < js.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); f++) {
								String FieldValidation1;
								String CurrentFieldName = null;
								FieldValidation1 = js
										.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].isVisible")
										.toString();
								//System.out.println(FieldValidation1);
								if (FieldValidation1.equalsIgnoreCase("Y")|| FieldValidation1.equalsIgnoreCase("N"))
								{
									FieldlongName = js
											.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].longName")
											.toString();
									longName.add(FieldlongName);
									CurrentFieldName = longName.get(g).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
									//System.out.println(CurrentFieldName);
									File fi = new File(filePath_5);
									InputStream input1 = new FileInputStream(fi);
									FileOutputStream output1 = null;
									output1 = new FileOutputStream(filePath_5);
									if (input != null) {
										prop.load(input1);
										prop.setProperty(CurrentFieldName, "");
										prop.store(output1, "");
										output1.close();
									}
									g = g + 1;
								}
							}
					}
				}
				//input.close();
	    }
		public void fetchAllFieldNames_PO() throws Exception {
		InputStream input = new FileInputStream(System.getProperty("user.dir")
					+ "\\src\\main\\java\\com\\DataProperties\\Dynamic_PreCondition_Details.properties");
			prop.load(input);
			JsonPath js=jsResponse;
			int itemtemplatecount = js.getInt("groupTemplateList.size()");
			for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("7")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
							ArrayList<String> longName = new ArrayList<String>();
							TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							int g = 0;
							for (int f = 0; f < js.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); f++) {
								String FieldValidation1;
								String CurrentFieldName = null;
								FieldValidation1 = js
										.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].isVisible")
										.toString();
								//System.out.println(FieldValidation1);
								if (FieldValidation1.equalsIgnoreCase("Y")|| FieldValidation1.equalsIgnoreCase("N")){
									FieldlongName = js
											.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].longName")
											.toString();
									longName.add(FieldlongName);
									CurrentFieldName = longName.get(g).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
									//System.out.println(CurrentFieldName);
									File fi = new File(filePath_6);
									InputStream input1 = new FileInputStream(fi);
									FileOutputStream output1 = null;
									output1 = new FileOutputStream(filePath_6);
									if (input != null) {
										prop.load(input1);
										prop.setProperty(CurrentFieldName, "");
										prop.store(output1, "");
										output1.close();
									}
									g = g + 1;
								}
							}
					}
				}
				//input.close();
	    }
		public void fetchAllFieldNames_Indent() throws Exception {
			InputStream input = new FileInputStream(System.getProperty("user.dir")
					+ "\\src\\main\\java\\com\\DataProperties\\Dynamic_PreCondition_Details.properties");
			prop.load(input);
			JsonPath js=jsResponse;
			int itemtemplatecount = js.getInt("groupTemplateList.size()");
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("3")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
							ArrayList<String> longName = new ArrayList<String>();
							TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							int g = 0;
							for (int f = 0; f < js.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); f++) {
								String FieldValidation1;
								String CurrentFieldName = null;
								FieldValidation1 = js
										.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].isVisible")
										.toString();
								//System.out.println(FieldValidation1);
								if (FieldValidation1.equalsIgnoreCase("Y")|| FieldValidation1.equalsIgnoreCase("N")){
									FieldlongName = js
											.get("groupTemplateList[" + i + "].templateFieldList[" + f + "].longName")
											.toString();
									longName.add(FieldlongName);
									CurrentFieldName = longName.get(g).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
									//System.out.println(CurrentFieldName);
									File fi = new File(super.filePath_5);
									InputStream input1 = new FileInputStream(fi);
									FileOutputStream output1 = null;
									output1 = new FileOutputStream(super.filePath_5);
									if (input != null) {
										prop.load(input1);
										prop.setProperty(CurrentFieldName, "");
										prop.store(output1, "");
										output1.close();
									}
									g = g + 1;
								}
							}	
					}
				}
				//input.close();
	    }
		public void SaveSystemTenderID() throws InterruptedException, IOException
		{
			String authtoken = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//input[@id='Authorization']"))
					.getAttribute("value");
			//System.out.println("authtoken is" + authtoken);
			String actualtoken[] = authtoken.split("Bearer");
			//System.out.println("Final Token" + actualtoken[1]);
			String token = actualtoken[1];
			RestAssured.baseURI = "https://epsnewprod.mjunction.in/EPSV2Web";
			String response2 = given().header("Authorization", "Bearer" + " " + token)
					.queryParam("tabId", "live_tender").header("Accept", "application/json, text/plain, *")
					.header("Accept-Encoding", "gzip, deflate, br").header("Accept-Language", "en-US,en;q=0.9,te;q=0.8")
					.header("User-Agent",
							"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36")
					.header("Host", "epsnewprod.mjunction.in")
					.log().all().when().post("rest/quotation/showTenderListForBidder").then().extract().response()
					.asString();
			//System.out.println(response2);
			HashMap<Integer, Integer> TenderIDMap = new HashMap<Integer, Integer>();
			InputStream input = new FileInputStream(System.getProperty("user.dir")
					+ "\\src\\main\\java\\com\\DataProperties\\InputForTenderCreation.properties");
			prop.load(input);
			FileOutputStream output = null;
			output = new FileOutputStream(System.getProperty("user.dir")
					+ "\\src\\main\\java\\com\\DataProperties\\InputForTenderCreation.properties");
			JSONArray SystemTenderIDArray = new JSONArray(response2);
			for (int Object = 0; Object < SystemTenderIDArray.length(); Object++) {
				// //System.out.println(SystemTenderIDArray.getJSONObject(Object));
				int MapKey = SystemTenderIDArray.getJSONObject(Object).getInt("orgtenderid");
				int MapValue = SystemTenderIDArray.getJSONObject(Object).getInt("tenderid");
				TenderIDMap.put(MapKey, MapValue);
				if (MapKey == Integer.parseInt(prop.getProperty("tenderIdsave"))) {
					//System.out.println("System Tender ID for the tender " + prop.getProperty("tenderIdsave") + " is :" + MapValue);
					if (input != null) {
						prop.load(input);
						prop.setProperty("tenderId", Integer.toString(MapValue));
						prop.store(output, "");
						output.close();
					}
				}
			}
		}
		public void CreateTender_BidSubmission_FromPRwithNonSOR_STG_New() throws Throwable {
			try {
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				String gitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']")).getText();
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String gitabNameBE = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (gitabname.equalsIgnoreCase(gitabNameBE)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + gitabNameBE + " is :" + ParentChildItem);
							JavascriptExecutor giJS = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement gitabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']"));
							//giJS.executeScript("arguments[0].click();", gitabElem);
							JSClick(By.xpath("//a[@id='quot_gen_info']"), "General Information");
							Thread.sleep(6000);
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=====================Test=======================
							/*
							if(Dynamicity.getDataFromPropertiesFile("SingleBidSubmission", filePath_4).equalsIgnoreCase("N")) {
							//Currency
							String Currency = "//select[@id='quot_gen_info.quote_currency.0']";
							//System.out.println(Currency);						
							boolean fielddisplay_Currency=isElementDisplayed_Updated(By.xpath(Currency), 2);
							boolean interactable_Currency=isElementEnable_Updated(By.xpath(Currency), 2);
							//System.out.println("Field is displayed: " + fielddisplay_Currency);
							//System.out.println("Field is interactable: " + interactable_Currency);
							if (fielddisplay_Currency == true && interactable_Currency == true && !Dynamicity.getDataFromPropertiesFile("Supplier_Currency"+s+"", filePath_4).equalsIgnoreCase("")) {
								String Cur=Dynamicity.getDataFromPropertiesFile("Supplier_Currency"+s+"", filePath_4);
								select(By.xpath(Currency), Cur);
								}
							else {
								//System.out.println("Data is not present for currency");
							}
							waitForObj(1000);
							//Vendor Type 
							String Vendor_Type = "//select[@id='quot_gen_info.unm_string_one.0']";
							//System.out.println(Vendor_Type);						
							boolean fielddisplay_Vendor_Type=isElementDisplayed_Updated(By.xpath(Vendor_Type), 2);
							boolean interactable_Vendor_Type=isElementEnable_Updated(By.xpath(Vendor_Type), 2);
							//System.out.println("Field is displayed: " + fielddisplay_Vendor_Type);
							//System.out.println("Field is interactable: " + interactable_Vendor_Type);
							if (fielddisplay_Vendor_Type == true && interactable_Vendor_Type == true && !Dynamicity.getDataFromPropertiesFile("Vendor_Type"+s+"", filePath_4).equalsIgnoreCase("")) {
								String vt=Dynamicity.getDataFromPropertiesFile("Vendor_Type"+s+"", filePath_4);
								select(By.xpath(Vendor_Type), vt);
								}
							else {
								//System.out.println("Data is not present for Vendor type");
							}
							}
							*/
							//=================================================
							waitForObj(1000);
							click(tendercreationlocators.savebutton_Supplier, "savebutton");
							waitForObj(2000);
						}
					}
				}
				//=================================Template except General Information====================================================================
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
				for (int h = 2; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						String tabShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//ul[@class='nav nav-tabs']//li//a[text()=\"" + tabName + "\"]"));
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='" + tabShortName + "']"));
							JSClick(By.xpath("//a[@id='" + tabShortName + "']"),"tabShortName");
							Thread.sleep(6000);
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
									if (addpopupbtns.size() > 0) {
										try {
											for (int m = 1; m <=addpopupbtns.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												/*
												boolean adddisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
														.isDisplayed();
														*/
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click, 'createRow')])[" + m + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													//===================
													waitForObj(1000);
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//===================
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													//==================
													waitForObj(1000);
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//==================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													//==================
													waitForObj(1000);
													String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//==================
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														//===================
														waitForObj(1000);
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
															}
														//===================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														//===============
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
															}
														//===============
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															//=============
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
															boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
															if (fielddisplayAL == true && interactableAL == true) {
																JSClick(By.xpath(xpath_A2A), "Apply To All");
																waitForObj(1000);
																String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																waitForObj(1000);
																}
															//=================
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
																//=====================
																waitForObj(1000);
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	waitForObj(1000);
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	waitForObj(1000);
																	}
																//====================
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
																//=====================
																waitForObj(1000);
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	waitForObj(1000);
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	waitForObj(1000);
																	}
																//=====================
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													//===============
													waitForObj(1000);
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//===============
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													//====================
													waitForObj(1000);
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//====================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													//=====================
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//=====================
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													//====================
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
													//====================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									//Supplier Specific Attachment++++++++++++++++++++++++++++++++++++++++++++	
									String SSA="//a[contains(text(),'Supplier Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									String BidPart1_Row="//button[@data-btn-row='BidPart1']";
									String BidPart2_Row="//button[@data-btn-row='BidPart2']";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart2_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
									}
									//Attachment++++++++++++++++++++++++++++++++++++++++++++
									waitForObj(1000);
									String AttachmentSubTemplate="//*[contains(@id, 'qout_attachment')]/div/form/div[2]/div/div/ul/li[2]/a";
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										universalNormalWait();
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										waitForObj(500);
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										waitForObj(1000);
										*/
									}
									//Tender Attachment++++++++++++++++++++++++++++++++++++++++++++
									waitForElement(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, 100);
									click(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, "TenderAttachment_subtabLnk_BidSubmission_TG1");
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									universalNormalWait();
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
														if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														//String generateDate=generateRandomDate();
														String generateDate=getFutureDate(100);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
																.sendKeys(generateDate);
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(Date(10));
														//System.out.println(Date(10));
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
											if(elementsCount>1) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')])[1]";
												scrollToElement(By.xpath(xpath_1));
												scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												//System.out.println("Field is Enable: " + interactable);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(6));
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(getrandomInt);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(randomDecimal);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if(elementsCount==1){
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByVisibleText(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByIndex(1);
														waitForObj(1000);
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													waitForObj(1000);
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													waitForObj(1000);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(15));
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													waitForObj(1000);
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													waitForObj(1000);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			waitForElementToBeClickable(tendercreationlocators.savebutton_Supplier);
			JSClick(tendercreationlocators.savebutton_Supplier, "savebutton");
			boolean fielddisplay=isElementDisplayed_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			boolean interactable=isElementEnable_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			if (fielddisplay == true && interactable == true) {
				click(tendercreationlocators.alertClose_QRC_bidSubmission, "alertClose_QRC_bidSubmission");
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		public static int fs=1;
		public static int bdEGI=1;
		public void capture_BDetails() {
			while(bdEGI==1) {
			try {
				DatabaseComponent.bD();
			} catch (IOException e) {
				bdEGI=1;
				e.printStackTrace();
			}
			try {
				API_Component.gttd_BS();
				getTemplateMap();
				bdEGI=0;
				fs=2;
			} catch (InterruptedException | IOException e) {
				bdEGI=1;
				e.printStackTrace();
				}
			}
		}
		public void generalInformaionSupplier() throws Throwable {
			try {
				boolean fielddisplay_GI=isElementDisplayed_Updated(By.xpath("//label[contains(text(), 'Bid End Date:')]"), 20);
				JsonPath js=js_SGI;
				int itemtemplatecount = js.getInt("templates.size()");
				String gitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']")).getText();
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("templates[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String gitabNameBE = js.get("templates[" + i + "].subProcessName").toString();
						if (gitabname.equalsIgnoreCase(gitabNameBE)) {
							String ParentChildItem = js.get("templates[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + gitabNameBE + " is :" + ParentChildItem);
							JavascriptExecutor giJS = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement gitabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']"));
							//giJS.executeScript("arguments[0].click();", gitabElem);
							JSClick(By.xpath("//a[@id='quot_gen_info']"), "General Information");
							
							tabularformat = js.get("templates[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("templates[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															clear(By.xpath(xpath), "Clear field Details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														clear(By.xpath(xpath), "Clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														clear(By.xpath(xpath), "Clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															clear(By.xpath(xpath), "Clear field Details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														clear(By.xpath(xpath), "Clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														clear(By.xpath(xpath), "Clear field Details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), "Clear field Details");
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							
							click(tendercreationlocators.savebutton_Supplier, "savebutton");
							
						}
					}
				}
					pdfResultReport.addStepDetails("Final Save", "The tender is now live on stage, and the "+user+" has saved the general information. They have successfully saved the general information page. No unnecessary messages appeared, and the other templates have been populated", "Successfully Saved" + " ", "Pass", "Y");if(fs==1) {capture_BDetails();}
			}
			catch (Exception e) {
						pdfResultReport.addStepDetails("fail", "After clicking on Save Button of General Information page", "Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
					}
		}
		public void BidSubmission_ExGI() throws Throwable {
			try {
				universalNormalWait();
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
				itemtemplatecount=tabcount.size();
				for (int h = 2; h <= tabcount.size(); h++) {
					JsonPath js;
					String jsS;
					String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')])[" + h + "]")).getText();jsS=tabres.get(h);js=new JsonPath(jsS);
					int i = 0;
					masterprocessids = js.get("templates[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("templates[" + i + "].subProcessName").toString();
						String tabShortName = js.get("templates[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("templates[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							scrollToTopOfThePage();
							boolean tabD=isElementDisplayed_Updated(By.xpath("//a[@id='" + tabShortName + "']"), 100);
							boolean tabE=isElementEnable_Updated(By.xpath("//a[@id='" + tabShortName + "']"), 100);
							if(tabD==true && tabE==true) {
							JSClick(By.xpath("//a[@id='" + tabShortName + "']"),"tabShortName");
							}	
							tabularformat = js.get("templates[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("templates[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
									if(addpopupbtns.size()==0) {
										waitForObj(2000);
										addpopupbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
										
									}
									if (addpopupbtns.size() > 0) {
										try {
											for (int m = 1; m <=addpopupbtns.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												/*
												boolean adddisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
														.isDisplayed();
														*/
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click, 'createRow')])[" + m + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													//==================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("templates[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("templates[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														
														}
														else {
															String DataTypeId = js.get("templates[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
															boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
															if (fielddisplayAL == true && interactableAL == true) {
																JSClick(By.xpath(xpath_A2A), "Apply To All");
																
																String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																
																}
															
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
																
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
																
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
																
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									String SSA="//a[contains(text(),'Supplier Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									String BidPart1_Row="//button[@data-btn-row='BidPart1']";
									String BidPart2_Row="//button[@data-btn-row='BidPart2']";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart2_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
									}
									
									String AttachmentSubTemplate="//*[contains(@id, 'qout_attachment')]/div/form/div[2]/div/div/ul/li[2]/a";
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										
										boolean fd_addA=isElementDisplayed_Updated(By.xpath(addAttachment), 10);
										boolean fe_addA=isElementEnable_Updated(By.xpath(addAttachment), 10);
										if(fd_addA==true && fe_addA==true){
										click(By.xpath(addAttachment), "Add_Attachment1");
										}
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										
										*/
									}
									waitForElement(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, 100);
									click(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, "TenderAttachment_subtabLnk_BidSubmission_TG1");
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									universalNormalWait();
										String addAdditionalItem="//*[@id='_"+TabshortName+"']/div/div[3]/div/table/tbody/tr/td/button[1]";
										String selectAllItems="//*[@id='addOptionalItemModal_"+TabshortName+"']/div/div/div[2]/table/thead/tr/th[1]/input";
										String acceptItems="//*[@id='addOptionalItemModal_"+TabshortName+"']/div/div/div[3]/button";
										universalNormalWait();
										boolean fielddisplay_addAdditionalItem=isElementDisplayed_Updated(By.xpath(addAdditionalItem), 100);
										boolean interactable_addAdditionalItem=isElementEnable_Updated(By.xpath(addAdditionalItem), 100);
											if (fielddisplay_addAdditionalItem == true && interactable_addAdditionalItem==true) {
												click(By.xpath(addAdditionalItem), "addAdditionalItem");
												
												boolean fielddisplay_selectAllItems=isElementDisplayed_Updated(By.xpath(selectAllItems), 100);
												boolean interactable_selectAllItems=isElementEnable_Updated(By.xpath(selectAllItems), 100);
												if (fielddisplay_selectAllItems == true && interactable_selectAllItems==true) {
													click(By.xpath(selectAllItems), "selectAllItems");
													}

												boolean fielddisplay_acceptItems=isElementDisplayed_Updated(By.xpath(acceptItems), 100);
												boolean interactable_acceptItems=isElementEnable_Updated(By.xpath(acceptItems), 100);
												if (fielddisplay_acceptItems == true && interactable_acceptItems==true) {
												click(By.xpath(acceptItems), "addAdditionalItem");
												}
												
											}
									//==========================
									String br=getDataFromPropertiesFile("BidFromRowNumber", filePath_4);
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."+ FieldshortName + "')])["+br+"]";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
														if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])["+br+"]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														else {
														//String generateDate=generateRandomDate();
														String generateDate=getFutureDate(100);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
																.sendKeys(generateDate);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])["+br+"]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+br+"]";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])["+br+"]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(Date(10));
														//System.out.println(Date(10));
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])["+br+"]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
											if(elementsCount>1) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+br+"]";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												//System.out.println("Field is Enable: " + interactable);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), "Clear field value");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])["+br+"]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(6));
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])["+br+"]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), "Clear field value");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])["+br+"]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
														else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(getrandomInt);
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+br+"]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), "Clear field value");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+br+"]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
														else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															System.out.println(xpath_1);
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(randomDecimal);
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+br+"]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															System.out.println(xpath_A2A);
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if(elementsCount==1){
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+br+"]";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByVisibleText(keysValue);
														
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])["+br+"]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByIndex(1);
														
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])["+br+"]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+br+"]";
													scrollToElement(By.xpath(xpath_1));
													//scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])["+br+"]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(15));
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])["+br+"]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												waitForObj(2000);
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
			}
			waitForElementToBeClickable(tendercreationlocators.savebutton_Supplier);
			JSClick(tendercreationlocators.savebutton_Supplier, "savebutton");
			boolean fielddisplay=isElementDisplayed_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			boolean interactable=isElementEnable_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			if (fielddisplay == true && interactable == true) {
				click(tendercreationlocators.alertClose_QRC_bidSubmission, "alertClose_QRC_bidSubmission");
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void BidSubmission_ExGI_MV() throws Throwable {
			try {
				universalNormalWait();
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
				itemtemplatecount=tabcount.size();
				for (int h = 2; h <= tabcount.size(); h++) {
					JsonPath js;
					String jsS;
					String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')])[" + h + "]")).getText();jsS=tabres.get(h);js=new JsonPath(jsS);
					int i = 0;
					masterprocessids = js.get("templates[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("templates[" + i + "].subProcessName").toString();
						String tabShortName = js.get("templates[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("templates[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							scrollToTopOfThePage();
							boolean tabD=isElementDisplayed_Updated(By.xpath("//a[@id='" + tabShortName + "']"), 100);
							boolean tabE=isElementEnable_Updated(By.xpath("//a[@id='" + tabShortName + "']"), 100);
							if(tabD==true && tabE==true) {
							JSClick(By.xpath("//a[@id='" + tabShortName + "']"),"tabShortName");
							}	
							tabularformat = js.get("templates[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("templates[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
									if(addpopupbtns.size()==0) {
										waitForObj(2000);
										addpopupbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
										
									}
									if (addpopupbtns.size() > 0) {
										try {
											for (int m = 1; m <=addpopupbtns.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												/*
												boolean adddisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
														.isDisplayed();
														*/
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click, 'createRow')])[" + m + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													//==================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("templates[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("templates[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														
														}
														else {
															String DataTypeId = js.get("templates[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
															boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
															if (fielddisplayAL == true && interactableAL == true) {
																JSClick(By.xpath(xpath_A2A), "Apply To All");
																
																String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																
																}
															
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
																
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
																
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
																
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									String SSA="//a[contains(text(),'Supplier Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									String BidPart1_Row="//button[@data-btn-row='BidPart1']";
									String BidPart2_Row="//button[@data-btn-row='BidPart2']";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart2_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
									}
									
									String AttachmentSubTemplate="//*[contains(@id, 'qout_attachment')]/div/form/div[2]/div/div/ul/li[2]/a";
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										
										boolean fd_addA=isElementDisplayed_Updated(By.xpath(addAttachment), 10);
										boolean fe_addA=isElementEnable_Updated(By.xpath(addAttachment), 10);
										if(fd_addA==true && fe_addA==true){
										click(By.xpath(addAttachment), "Add_Attachment1");
										}
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										
										*/
									}
									waitForElement(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, 100);
									click(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, "TenderAttachment_subtabLnk_BidSubmission_TG1");
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
								universalNormalWait();
								ArrayList<String> shortName = new ArrayList<String>();
								ArrayList<String> longName = new ArrayList<String>();
								TabshortName = js.get("templates[" + i + "].shortName").toString();
									String addAdditionalItem="//*[@id='_"+TabshortName+"']/div/div[3]/div/table/tbody/tr/td/button[1]";
									String selectAllItems="//*[@id='addOptionalItemModal_"+TabshortName+"']/div/div/div[2]/table/thead/tr/th[1]/input";
									String acceptItems="//*[@id='addOptionalItemModal_"+TabshortName+"']/div/div/div[3]/button";
									universalNormalWait();
									boolean fielddisplay_addAdditionalItem=isElementDisplayed_Updated(By.xpath(addAdditionalItem), 100);
									boolean interactable_addAdditionalItem=isElementEnable_Updated(By.xpath(addAdditionalItem), 100);
										if (fielddisplay_addAdditionalItem == true && interactable_addAdditionalItem==true) {
											click(By.xpath(addAdditionalItem), "addAdditionalItem");
											
											boolean fielddisplay_selectAllItems=isElementDisplayed_Updated(By.xpath(selectAllItems), 100);
											boolean interactable_selectAllItems=isElementEnable_Updated(By.xpath(selectAllItems), 100);
											if (fielddisplay_selectAllItems == true && interactable_selectAllItems==true) {
												click(By.xpath(selectAllItems), "selectAllItems");
												}

											boolean fielddisplay_acceptItems=isElementDisplayed_Updated(By.xpath(acceptItems), 100);
											boolean interactable_acceptItems=isElementEnable_Updated(By.xpath(acceptItems), 100);
											if (fielddisplay_acceptItems == true && interactable_acceptItems==true) {
											click(By.xpath(acceptItems), "addAdditionalItem");
											}
											
										}
								
								for (int j = 0; j < js.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
									if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
										FieldshortName = js.get(
												"templates[" + i + "].templateFieldList[" + j + "].shortName")
												.toString();
										FieldlongName = js.get(
												"templates[" + i + "].templateFieldList[" + j + "].longName")
												.toString();
										shortName.add(FieldshortName);
										longName.add(FieldlongName);
										
										String controlTypeId = js.get("templates[" + i + "].templateFieldList["
												+ j + "].controlTypeId").toString();
										if (controlTypeId.equalsIgnoreCase("112")) {
											longName.remove(FieldlongName);
										}
										if (controlTypeId.equalsIgnoreCase("110")) {
											String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+rc+"]";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateDate);
													waitForObj(1000);
													}
													//longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
												}
												else {
												//String generateDate=generateRandomDate();
												String generateDate=getFutureDate(100);
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(generateDate);
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("104")) {
											String xpath = "//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')])["+rc+"]";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(Date(10));
													waitForObj(1000);
													}
													//longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1) {
											scrollToElement(By.xpath(xpath));
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
											if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
												}
												else {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(Date(10));
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("100")) {
											iv=0;
											String incrementValue=null;
								            String incrementValueApplicableFor = Dynamicity.getDataFromPropertiesFile("incrementValueApplicableFor", filePath_4);
								            String[] ivaf = incrementValueApplicableFor.split(",\\s*");
								            int present=0;
							            	String key=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
							            	boolean isPresent = Arrays.asList(ivaf).contains(key);
							            	if (isPresent) {
							            		present=1;
							                } else {
							                	present=0;
							                }
											String xpath = "//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
										if(elementsCount>1) {
											for(int rc=1; rc<=elementsCount; rc++) {
											String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
												+ FieldshortName + "')])["+rc+"]";
											scrollToElement(By.xpath(xpath_1));
											//scrollToTopOfThePage();
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
											if (fielddisplay == true && interactable == true) {
												String DataTypeId = js.get("templates[" + i + "].templateFieldList["
														+ j + "].dataTypeId").toString();
												if(DataTypeId.equalsIgnoreCase("101")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
													}
													else {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(generateRandomString(6));
														waitForObj(1000);
													}
												}
												if(DataTypeId.equalsIgnoreCase("100")) {
													String keys=null;
													String keysValue=null;
													if(present==1) {
														incrementValue = Dynamicity.getDataFromPropertiesFile("incrementValue", filePath_4);
														int b=Integer.parseInt(incrementValue);
														keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(iv==0) {
														iv=Integer.parseInt(keysValue);
														}
														else {
														iv=iv+b;
														}
														keysValue=Integer.toString(iv);
													}
													else {
														keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														keysValue = getDataFromPropertiesFile(keys, filePath_3);
													}
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
													}
													else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(getrandomInt);
														waitForObj(1000);
													}
												}
												if(DataTypeId.equalsIgnoreCase("102")) {
													String keys=null;
													String keysValue=null;
													if(present==1) {
														incrementValue = Dynamicity.getDataFromPropertiesFile("incrementValue", filePath_4);
														int b=Integer.parseInt(incrementValue);
														keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(iv==0) {
														iv=Integer.parseInt(keysValue);
														}
														else {
														iv=iv+b;
														}
														keysValue=Integer.toString(iv);
													}
													else {
														keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														keysValue = getDataFromPropertiesFile(keys, filePath_3);
													}
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
													}
													else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(randomDecimal);
														waitForObj(1000);
													}
												}
												//longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
											}
										}}
										else if(elementsCount==1){
											scrollToElement(By.xpath(xpath));
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
												String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].dataTypeId").toString();
												if(DataTypeId.equalsIgnoreCase("101")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(generateRandomString(6));
													}
												}
												if(DataTypeId.equalsIgnoreCase("100")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													getrandomInt = Integer.toString(getrandomInterger(2,50));
													clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
													.sendKeys(getrandomInt);
													}
												}
												if(DataTypeId.equalsIgnoreCase("102")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
													clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
													.sendKeys(randomDecimal);
													}
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("106")
												|| controlTypeId.equalsIgnoreCase("105")) {
											String xpath = "//select[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												String xpath_1 = "(//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+rc+"]";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
													sel.selectByVisibleText(keysValue);
													waitForObj(1000);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
													sel.selectByIndex(1);
													waitForObj(1000);
													}
													//longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("107")) {
											String xpath = "//textarea[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												String xpath_1 = "(//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+rc+"]";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
											if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
												waitForObj(1000);
												}
												else {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(generateRandomString(15));
												waitForObj(1000);
												}
												//longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1){
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
											if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
												}
												else {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(generateRandomString(15));
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
									}
								}
								//waitForObj(2000);
								waitForObj(5000);
								pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
										"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
							} catch (Exception e) {
								pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
										"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
							}}
							
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												waitForObj(2000);
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
			}
			waitForElementToBeClickable(tendercreationlocators.savebutton_Supplier);
			JSClick(tendercreationlocators.savebutton_Supplier, "savebutton");
			boolean fielddisplay=isElementDisplayed_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			boolean interactable=isElementEnable_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			if (fielddisplay == true && interactable == true) {
				click(tendercreationlocators.alertClose_QRC_bidSubmission, "alertClose_QRC_bidSubmission");
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void BidSubmission_ExGI_MDV() throws Throwable {
			try {
				universalNormalWait();
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
				itemtemplatecount=tabcount.size();
				for (int h = 2; h <= tabcount.size(); h++) {
					JsonPath js;
					String jsS;
					String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')])[" + h + "]")).getText();jsS=tabres.get(h);js=new JsonPath(jsS);
					int i = 0;
					masterprocessids = js.get("templates[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("templates[" + i + "].subProcessName").toString();
						String tabShortName = js.get("templates[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("templates[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							scrollToTopOfThePage();
							boolean tabD=isElementDisplayed_Updated(By.xpath("//a[@id='" + tabShortName + "']"), 100);
							boolean tabE=isElementEnable_Updated(By.xpath("//a[@id='" + tabShortName + "']"), 100);
							if(tabD==true && tabE==true) {
							JSClick(By.xpath("//a[@id='" + tabShortName + "']"),"tabShortName");
							}	
							tabularformat = js.get("templates[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("templates[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
									if(addpopupbtns.size()==0) {
										waitForObj(2000);
										addpopupbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
										
									}
									if (addpopupbtns.size() > 0) {
										try {
											for (int m = 1; m <=addpopupbtns.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												/*
												boolean adddisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
														.isDisplayed();
														*/
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click, 'createRow')])[" + m + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													
													String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													//==================
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
														
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::div//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("templates[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("templates[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
														boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
														if (fielddisplayAL == true && interactableAL == true) {
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															
															}
														
														}
														else {
															String DataTypeId = js.get("templates[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															
															
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
															boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
															if (fielddisplayAL == true && interactableAL == true) {
																JSClick(By.xpath(xpath_A2A), "Apply To All");
																
																String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																
																}
															
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
																
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
																
																
																String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
																boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
																boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
																if (fielddisplayAL == true && interactableAL == true) {
																	JSClick(By.xpath(xpath_A2A), "Apply To All");
																	
																	String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
																	click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
																	
																	}
																
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													
													String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													boolean fielddisplayAL=isElementDisplayed_Updated(By.xpath(xpath_A2A), searchTime);
													boolean interactableAL=isElementEnable_Updated(By.xpath(xpath_A2A), searchTime);
													if (fielddisplayAL == true && interactableAL == true) {
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														
														}
													
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													/*
													String keys = prop.getProperty(longName.get(longName.size() - 1).replaceAll("\\s+", "")
															.replaceAll("\\p{P}", ""));
													*/
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									String SSA="//a[contains(text(),'Supplier Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									String BidPart1_Row="//button[@data-btn-row='BidPart1']";
									String BidPart2_Row="//button[@data-btn-row='BidPart2']";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart2_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
									}
									
									String AttachmentSubTemplate="//*[contains(@id, 'qout_attachment')]/div/form/div[2]/div/div/ul/li[2]/a";
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										
										boolean fd_addA=isElementDisplayed_Updated(By.xpath(addAttachment), 10);
										boolean fe_addA=isElementEnable_Updated(By.xpath(addAttachment), 10);
										if(fd_addA==true && fe_addA==true){
										click(By.xpath(addAttachment), "Add_Attachment1");
										}
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										
										*/
									}
									waitForElement(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, 100);
									click(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, "TenderAttachment_subtabLnk_BidSubmission_TG1");
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
								universalNormalWait();
								ArrayList<String> shortName = new ArrayList<String>();
								ArrayList<String> longName = new ArrayList<String>();
								TabshortName = js.get("templates[" + i + "].shortName").toString();
									String addAdditionalItem="//*[@id='_"+TabshortName+"']/div/div[3]/div/table/tbody/tr/td/button[1]";
									String selectAllItems="//*[@id='addOptionalItemModal_"+TabshortName+"']/div/div/div[2]/table/thead/tr/th[1]/input";
									String acceptItems="//*[@id='addOptionalItemModal_"+TabshortName+"']/div/div/div[3]/button";
									universalNormalWait();
									boolean fielddisplay_addAdditionalItem=isElementDisplayed_Updated(By.xpath(addAdditionalItem), 100);
									boolean interactable_addAdditionalItem=isElementEnable_Updated(By.xpath(addAdditionalItem), 100);
										if (fielddisplay_addAdditionalItem == true && interactable_addAdditionalItem==true) {
											click(By.xpath(addAdditionalItem), "addAdditionalItem");
											
											boolean fielddisplay_selectAllItems=isElementDisplayed_Updated(By.xpath(selectAllItems), 100);
											boolean interactable_selectAllItems=isElementEnable_Updated(By.xpath(selectAllItems), 100);
											if (fielddisplay_selectAllItems == true && interactable_selectAllItems==true) {
												click(By.xpath(selectAllItems), "selectAllItems");
												}

											boolean fielddisplay_acceptItems=isElementDisplayed_Updated(By.xpath(acceptItems), 100);
											boolean interactable_acceptItems=isElementEnable_Updated(By.xpath(acceptItems), 100);
											if (fielddisplay_acceptItems == true && interactable_acceptItems==true) {
											click(By.xpath(acceptItems), "addAdditionalItem");
											}
											
										}
								
								for (int j = 0; j < js.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
									if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
										FieldshortName = js.get(
												"templates[" + i + "].templateFieldList[" + j + "].shortName")
												.toString();
										FieldlongName = js.get(
												"templates[" + i + "].templateFieldList[" + j + "].longName")
												.toString();
										shortName.add(FieldshortName);
										longName.add(FieldlongName);
										
										String controlTypeId = js.get("templates[" + i + "].templateFieldList["
												+ j + "].controlTypeId").toString();
										if (controlTypeId.equalsIgnoreCase("112")) {
											longName.remove(FieldlongName);
										}
										if (controlTypeId.equalsIgnoreCase("110")) {
											String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												int icv=rc-1;
												String xpath_1 = "//input[@id='" + TabshortName + "." + FieldshortName + "." + icv + "']";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue =null;
													try {
													keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
													}
													catch(Exception e) {
														keysValue ="";
													}
													if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
														keysValue ="";
													}
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateDate);
													waitForObj(1000);
													}
													//longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
												}
												else {
												//String generateDate=generateRandomDate();
												String generateDate=getFutureDate(100);
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(generateDate);
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("104")) {
											String xpath = "//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												int icv=rc-1;
												String xpath_1 = "//input[@id='" + TabshortName + "." + FieldshortName + "." + icv + "']";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue =null;
													try {
													keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
													}
													catch(Exception e) {
														keysValue ="";
													}
													if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
														keysValue ="";
													}
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(Date(10));
													waitForObj(1000);
													}
													//longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1) {
											scrollToElement(By.xpath(xpath));
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
											if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
												}
												else {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(Date(10));
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("100")) {
											String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
										if(elementsCount>1) {
											for(int rc=1; rc<=elementsCount; rc++) {
											int icv=rc-1;
											String xpath_1 = "//input[@id='" + TabshortName + "." + FieldshortName + "." + icv + "']";
											scrollToElement(By.xpath(xpath_1));
											//scrollToTopOfThePage();
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
											if (fielddisplay == true && interactable == true) {
												String DataTypeId = js.get("templates[" + i + "].templateFieldList["
														+ j + "].dataTypeId").toString();
												if(DataTypeId.equalsIgnoreCase("101")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue =null;
													try {
														keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
														}
														catch(Exception e) {
															keysValue ="";
														}
													if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
														keysValue ="";
													}
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
													}
													else {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(generateRandomString(6));
														waitForObj(1000);
													}
												}
												if(DataTypeId.equalsIgnoreCase("100")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue =null;
													try {
														keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
														}
														catch(Exception e) {
															keysValue ="";
														}
													if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
														keysValue ="";
													}
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
													}
													else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(getrandomInt);
														waitForObj(1000);
													}
												}
												if(DataTypeId.equalsIgnoreCase("102")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue =null;
													try {
														keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
														}
														catch(Exception e) {
															keysValue ="";
														}
													if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
														keysValue ="";
													}
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
													}
													else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(randomDecimal);
														waitForObj(1000);
													}
												}
												//longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
											}
										}}
										else if(elementsCount==1){
											scrollToElement(By.xpath(xpath));
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
												String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].dataTypeId").toString();
												if(DataTypeId.equalsIgnoreCase("101")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(generateRandomString(6));
													}
												}
												if(DataTypeId.equalsIgnoreCase("100")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													getrandomInt = Integer.toString(getrandomInterger(2,50));
													clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
													.sendKeys(getrandomInt);
													}
												}
												if(DataTypeId.equalsIgnoreCase("102")) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
													clear(By.xpath(xpath), longName.get(longName.size() - 1));
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
													.sendKeys(randomDecimal);
													}
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("106")
												|| controlTypeId.equalsIgnoreCase("105")) {
											String xpath = "//select[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												int icv=rc-1;
												String xpath_1 = "//select[@id='" + TabshortName + "." + FieldshortName + "." + icv + "']";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue =null;
													try {
													keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
													}
													catch(Exception e) {
														keysValue ="";
													}
													if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
														keysValue ="";
													}
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
													sel.selectByVisibleText(keysValue);
													waitForObj(1000);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
													sel.selectByIndex(1);
													waitForObj(1000);
													}
													//longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
										}
										if (controlTypeId.equalsIgnoreCase("107")) {
											String xpath = "//textarea[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')]";
											List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
											int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												int icv=rc-1;
												String xpath_1 = "//textarea[@id='" + TabshortName + "." + FieldshortName + "." + icv + "']";
												scrollToElement(By.xpath(xpath_1));
												//scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
											if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue =null;
												try {
												keysValue = getCellValue(BidDetails_Excel, sheetName, keys, rc);
												}
												catch(Exception e) {
													keysValue ="";
												}
												if(keysValue.equalsIgnoreCase("Error reading Excel file")) {
													keysValue ="";
												}
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
												waitForObj(1000);
												}
												else {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
														.sendKeys(generateRandomString(15));
												waitForObj(1000);
												}
												//longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1){
											boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
											boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
											if (fielddisplay == true && interactable == true) {
												String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
												String keysValue = getDataFromPropertiesFile(keys, filePath_3);
												if(!keysValue.equals("")) {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
												}
												else {
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(generateRandomString(15));
												}
												longName.remove(FieldlongName);
											} else {
												longName.remove(FieldlongName);
												}
											}
										}
									}
								}
								//waitForObj(2000);
								waitForObj(5000);
								pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
										"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
							} catch (Exception e) {
								pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
										"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
							}}
							
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("templates[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("templates[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("templates[" + i + "].templateFieldList[" + j + "].isEnabled").toString().equalsIgnoreCase("Y") && js.get("templates[" + i +"].templateFieldList[" + j + "].roleWiseFieldEntry").toString().equalsIgnoreCase("E") && js.get("templates[" + i + "].templateFieldList[" + j + "].isVisible").toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"templates[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("templates[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("templates[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), "Clear field value");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												waitForObj(2000);
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
			}
			waitForElementToBeClickable(tendercreationlocators.savebutton_Supplier);
			JSClick(tendercreationlocators.savebutton_Supplier, "savebutton");
			boolean fielddisplay=isElementDisplayed_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			boolean interactable=isElementEnable_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			if (fielddisplay == true && interactable == true) {
				click(tendercreationlocators.alertClose_QRC_bidSubmission, "alertClose_QRC_bidSubmission");
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void CreateTender_BidSubmission_withNonSOR() throws Throwable {
			try {
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
			//====================================================================================================================
				String gitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']")).getText();
				//System.out.println("UI Tabname:" + gitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String gitabNameBE = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						if (gitabname.equalsIgnoreCase(gitabNameBE)) {
							//System.out.println("Tender Creation Tab name:" + gitabname);
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + gitabNameBE + " is :" + ParentChildItem);
							JavascriptExecutor giJS = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement gitabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id='quot_gen_info']"));
							giJS.executeScript("arguments[0].click();", gitabElem);
							Thread.sleep(6000);
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(gitabname, "After clicking on Save Button",
											"Successfully Saved " + gitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=====================Test=======================
							/*
							if(Dynamicity.getDataFromPropertiesFile("SingleBidSubmission", filePath_4).equalsIgnoreCase("N")) {
							//Currency
							String Currency = "//select[@id='quot_gen_info.quote_currency.0']";
							//System.out.println(Currency);						
							boolean fielddisplay_Currency=isElementDisplayed_Updated(By.xpath(Currency), 2);
							boolean interactable_Currency=isElementEnable_Updated(By.xpath(Currency), 2);
							//System.out.println("Field is displayed: " + fielddisplay_Currency);
							//System.out.println("Field is interactable: " + interactable_Currency);
							if (fielddisplay_Currency == true && interactable_Currency == true && !Dynamicity.getDataFromPropertiesFile("Supplier_Currency"+s+"", filePath_4).equalsIgnoreCase("")) {
								String Cur=Dynamicity.getDataFromPropertiesFile("Supplier_Currency"+s+"", filePath_4);
								select(By.xpath(Currency), Cur);
								}
							else {
								//System.out.println("Data is not present for currency");
							}
							waitForObj(1000);
							//Vendor Type 
							String Vendor_Type = "//select[@id='quot_gen_info.unm_string_one.0']";
							//System.out.println(Vendor_Type);						
							boolean fielddisplay_Vendor_Type=isElementDisplayed_Updated(By.xpath(Vendor_Type), 2);
							boolean interactable_Vendor_Type=isElementEnable_Updated(By.xpath(Vendor_Type), 2);
							//System.out.println("Field is displayed: " + fielddisplay_Vendor_Type);
							//System.out.println("Field is interactable: " + interactable_Vendor_Type);
							if (fielddisplay_Vendor_Type == true && interactable_Vendor_Type == true && !Dynamicity.getDataFromPropertiesFile("Vendor_Type"+s+"", filePath_4).equalsIgnoreCase("")) {
								String vt=Dynamicity.getDataFromPropertiesFile("Vendor_Type"+s+"", filePath_4);
								select(By.xpath(Vendor_Type), vt);
								}
							else {
								//System.out.println("Data is not present for Vendor type");
							}
							}
							*/
							//=================================================
							waitForObj(1000);
							click(tendercreationlocators.savebutton_Supplier, "savebutton");
							waitForObj(2000);
						}
					}
				}
				//=================================Template except General Information====================================================================
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')]"));
				for (int h = 2; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//ul[contains(@class,'nav-tabs')]//li//a[contains(@ng-click,'tabClickFn')])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						String tabShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//ul[@class='nav nav-tabs']//li//a[text()=\"" + tabName + "\"]"));
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[@id=\"" + tabShortName + "\"]"));
							javas.executeScript("arguments[0].click();", tabElem);
							Thread.sleep(6000);
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//button[contains(@ng-click, 'createRow')]"));
									if (addpopupbtns.size() > 0) {
										try {
											for (int m = 1; m <=addpopupbtns.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath(
														"(//button[contains(@ng-click, 'createRow')])[" + m + "]"), 5);
												/*
												boolean adddisplay = ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//button[@data-original-title='Add'])[" + m + "]"))
														.isDisplayed();
														*/
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(
															"(//button[contains(@ng-click, 'createRow')])[" + m + "]"))
															.click();
												}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									//Supplier Specific Attachment++++++++++++++++++++++++++++++++++++++++++++	
									String SSA="//a[contains(text(),'Supplier Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									String BidPart1_Row="//button[@data-btn-row='BidPart1']";
									String BidPart2_Row="//button[@data-btn-row='BidPart2']";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart2_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
										}
									}
									//Attachment++++++++++++++++++++++++++++++++++++++++++++
									waitForObj(1000);
									String AttachmentSubTemplate="//body[1]/section[2]/section[1]/section[1]/div[1]/div[1]/div[3]/div[2]/div[6]/div[1]/form[1]/div[2]/div[1]/div[1]/ul[1]/li[2]/a[1]";
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										universalNormalWait();
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										waitForObj(500);
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										waitForObj(1000);
										*/
									}
									//Tender Attachment++++++++++++++++++++++++++++++++++++++++++++
									waitForElement(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, 100);
									click(tendercreationlocators.TenderAttachment_subtabLnk_BidSubmission_TG1, "TenderAttachment_subtabLnk_BidSubmission_TG1");
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									universalNormalWait();
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													for(int rc=1; rc<=elementsCount; rc++) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+rc+"]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
														if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														}
														else {
														//String generateDate=generateRandomDate();
														String generateDate=getFutureDate(100);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
																.sendKeys(generateDate);
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													for(int rc=1; rc<=elementsCount; rc++) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+rc+"]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(Date(10));
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}}
												else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
											if(elementsCount>1) {
												for(int rc=1; rc<=elementsCount; rc++) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')])["+rc+"]";
												scrollToElement(By.xpath(xpath_1));
												scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
														}
														else {
															clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(6));
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
														}
														else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(getrandomInt);
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
														}
														else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															clear(By.xpath(xpath_1), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(randomDecimal);
															waitForObj(1000);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}}
											else if(elementsCount==1){
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															clear(By.xpath(xpath), longName.get(longName.size() - 1));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														clear(By.xpath(xpath), longName.get(longName.size() - 1));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													for(int rc=1; rc<=elementsCount; rc++) {
													String xpath_1 = "(//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])["+rc+"]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByVisibleText(keysValue);
														waitForObj(1000);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByIndex(1);
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													for(int rc=1; rc<=elementsCount; rc++) {
													String xpath_1 = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])["+rc+"]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(15));
													waitForObj(1000);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}}
												else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			waitForElementToBeClickable(tendercreationlocators.savebutton_Supplier);
			JSClick(tendercreationlocators.savebutton_Supplier, "savebutton");
			boolean fielddisplay=isElementDisplayed_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			boolean interactable=isElementEnable_Updated(tendercreationlocators.alertClose_QRC_bidSubmission, 60);
			if (fielddisplay == true && interactable == true) {
				click(tendercreationlocators.alertClose_QRC_bidSubmission, "alertClose_QRC_bidSubmission");
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void CreateTender_BidSubmission_Evaluation_FromPRwithNonSOR_STG_New() throws Throwable {
			try {
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//li[@ng-repeat='tab in tabList']"));
				for (int h = 3; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//li[@ng-repeat='tab in tabList'])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						String tabShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 6 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							//scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//ul[@class='nav nav-tabs']//li//a[text()=\"" + tabName + "\"]"));
							//String TabString="//a[contains(text(),'" + uitabname + "')]";
							String TabString="//a[contains(text(),'" + tabName + "')]";
							//System.out.println(TabString);
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[contains(text(),'" + uitabname + "'])"));
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[contains(text(),'" + tabShortName + "']"));
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath(TabString));
							if(tabElem.isDisplayed() && tabElem.isEnabled()) {
								waitForObj(1000);
								tabElem.click();
							}
							universalNormalWait();
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\text.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									//Supplier Specific Attachment++++++++++++++++++++++++++++++++++++++++++++	
									String SSA="//a[contains(text(),'Bid Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											/*
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
											*/
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											/*
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[2]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
											*/
										}
									}
									//Attachment++++++++++++++++++++++++++++++++++++++++++++
									String AttachmentSubTemplate="//a[contains(text(),'Supplier Attachment')]";
									/*
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									*/
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										universalNormalWait();
										/*
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										waitForObj(500);
										*/
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										waitForObj(1000);
										*/
									}
									//Tender Attachment++++++++++++++++++++++++++++++++++++++++++++
									String TenderAttachment="//a[contains(text(),'Tender Attachment')]";
									boolean fielddisplay_TenderAttachment=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_TenderAttachment=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_TenderAttachment);
									//System.out.println("Field is interactable: " + interactable_TenderAttachment);
									if (fielddisplay_TenderAttachment == true && interactable_TenderAttachment==true) {
										click(By.xpath(TenderAttachment),"TenderAttachment");
										universalNormalWait();
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									universalNormalWait();
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											//System.out.println(FieldlongName);
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("111")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("109")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
														if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														//String generateDate=generateRandomDate();
														String generateDate=getFutureDate(100);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
																.sendKeys(generateDate);
														waitForObj(1000);
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(Date(10));
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
											if(elementsCount>1) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')])[1]";
												scrollToElement(By.xpath(xpath_1));
												scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(6));
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(getrandomInt);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(randomDecimal);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													//System.out.println("Field is Enabled: " + interactable);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size()-1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByVisibleText(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByIndex(1);
														waitForObj(1000);
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													waitForObj(1000);
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													waitForObj(1000);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(15));
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													waitForObj(1000);
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													waitForObj(1000);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													//set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													//generateRandomString(6);
													String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
													waitForObj(2000);
													set(By.xpath(xpath_1),filePath,"fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			// Savebutton
			/*
			waitForObj(2000);
			scrollToTopOfThePage();
			//scrollToElement(By.xpath("//button[@data-original-title='Save']"));
			waitForObj(2000);
			ThreadLocalWebdriver.getDriver().findElement(By.xpath("//button[@data-original-title='Save']")).click();
			waitForObj(2000);
			ThreadLocalWebdriver.getDriver().findElement(By.xpath("//div[@id='alertMessageModal']")).click();
			waitForObj(5000);
			waitForElementToBeClickable(tendercreationlocators.savebutton);
			waitForObj(2000);
			JSClick(tendercreationlocators.savebutton, "savebutton");
			universalNormalWait();
			//eTenderComponent.waitForSpinnerToDisappearInBidSubmission();
			waitForElement(tendercreationlocators.alertPopUp_QRC_bidSubmission, 100);
			IsElementPresent(tendercreationlocators.alertPopUp_QRC_bidSubmission);
			click(tendercreationlocators.alertClose_QRC_bidSubmission, "alertClose_QRC_bidSubmission");
			waitForObj(500);
			*/
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public void CreateTender_BidSubmission_Evaluation() throws Throwable {
			try {
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//li[@ng-repeat='tab in tabList']"));
				for (int h = 3; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//li[@ng-repeat='tab in tabList'])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("2")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						String tabShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
						if (uitabname.equalsIgnoreCase(tabName)) {
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 6 == 0) {
								//scrollToElement(tendercreationlocators.nextButtonBidDetails);
								JSClick(tendercreationlocators.nextButtonBidDetails, "nextButtonBidDetails");
							}
							//scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//ul[@class='nav nav-tabs']//li//a[text()=\"" + tabName + "\"]"));
							//String TabString="//a[contains(text(),'" + uitabname + "')]";
							String TabString="//a[contains(text(),'" + tabName + "')]";
							//System.out.println(TabString);
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[contains(text(),'" + uitabname + "'])"));
							//WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath("//a[contains(text(),'" + tabShortName + "']"));
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(By.xpath(TabString));
							if(tabElem.isDisplayed() && tabElem.isEnabled()) {
								waitForObj(1000);
								tabElem.click();
							}
							universalNormalWait();
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													if(FieldshortName.equalsIgnoreCase("bid_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														clear(By.xpath(xpath), "BidSubmissionStartDate");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidStartDate(ST));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+10;
														clear(By.xpath(xpath), "bid_end_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidDueDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+15;
														clear(By.xpath(xpath), "bid_open_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
														String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int SC= Integer.parseInt(supplierCount);
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=(SC*BT)+12;
														clear(By.xpath(xpath), "doc_sub_date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getBidOpenDate(bidSubmission));
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& !(tabShortName.equalsIgnoreCase("qout_attachment"))) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\text.xlsx","fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("101")&& tabShortName.equalsIgnoreCase("qout_attachment")) {
								try {
									//Supplier Specific Attachment++++++++++++++++++++++++++++++++++++++++++++	
									String SSA="//a[contains(text(),'Bid Specific Attachment')]";
									String BidPart1="//a[contains(text(),'BidPart1')]";
									String BidPart2="//a[contains(text(),'BidPart2')]";
									boolean fielddisplay_SSA=isElementDisplayed_Updated(By.xpath(SSA), searchTime);
									boolean interactable_SSA=isElementEnable_Updated(By.xpath(SSA), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_SSA);
									//System.out.println("Field is interactable: " + interactable_SSA);
									if (fielddisplay_SSA == true && interactable_SSA==true) {
										click(By.xpath(SSA),"Supplier Specific Attachment");
										boolean BidPartTab1_Displayed=isElementDisplayed_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab1_Enabled=isElementEnable_Updated(By.xpath(BidPart1), searchTime);
										boolean BidPartTab2_Displayed=isElementDisplayed_Updated(By.xpath(BidPart2), searchTime);
										boolean BidPartTab2_Enabled=isElementEnable_Updated(By.xpath(BidPart2), searchTime);
										if (BidPartTab1_Displayed == true && BidPartTab1_Enabled==true) {
											click(By.xpath(BidPart1), "BidPart1");
											/*
											List<WebElement> RowsBidpart1 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart1=RowsBidpart1.size();
											//System.out.println(count_RowsBidpart1);
											for(int c=0; c<count_RowsBidpart1; c++) {
												int id=c+1;
												String SSA_ColumnWise_B1="(//button[@data-btn-row='BidPart1'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B1);
												//click(By.xpath(SSA_ColumnWise_B1), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[1]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
											*/
										}
										if (BidPartTab2_Displayed == true && BidPartTab2_Enabled==true) {
											click(By.xpath(BidPart2), "BidPart2");
											/*
											List<WebElement> RowsBidpart2 = ThreadLocalWebdriver.getDriver().findElements(By.xpath(BidPart1_Row));
											int count_RowsBidpart2=RowsBidpart2.size();
											//System.out.println(count_RowsBidpart2);
											for(int c=0; c<count_RowsBidpart2; c++) {
												int id=c+1;
												String SSA_ColumnWise_B2="(//button[@data-btn-row='BidPart2'])["+id+"]";
												//System.out.println(SSA_ColumnWise_B2);
												//click(By.xpath(SSA_ColumnWise_B2), "Action Button");
												set(By.xpath("(//input[@id='bidderInput_"+c+"'])[2]"), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation"+c+".xlsx", "fileName");
											}
											*/
										}
									}
									//Attachment++++++++++++++++++++++++++++++++++++++++++++
									String AttachmentSubTemplate="//a[contains(text(),'Supplier Attachment')]";
									/*
									String addAttachment="//button[@id='addAttach']";
									String Action1="//tbody/tr[2]/td[5]/div[1]/button[1]";
									String Action2="//tbody/tr[3]/td[5]/div[1]/button[1]";
									String uploadAttachment="//input[@id='attachment_0']";
									*/
									boolean fielddisplay_AttachmentSubTemplate=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_AttachmentSubTemplate=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_AttachmentSubTemplate);
									//System.out.println("Field is interactable: " + interactable_AttachmentSubTemplate);
									if (fielddisplay_AttachmentSubTemplate == true && interactable_AttachmentSubTemplate==true) {
										click(By.xpath(AttachmentSubTemplate),"AttachmentSubTemplate");
										universalNormalWait();
										/*
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action1");
										set(By.xpath(uploadAttachment), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx", "fileName");
										waitForObj(500);
										*/
										/*
										//Upload from E-Briefcase
										click(By.xpath(addAttachment), "Add_Attachment1");
										click(By.xpath(Action1), "Action2");
										waitForElement(tendercreationlocators.UploadFromEbriefcase_TG1, 100);
										waitForElementToBeClickable(tendercreationlocators.UploadFromEbriefcase_TG1);
										click(tendercreationlocators.UploadFromEbriefcase_TG1, "UploadFromEbriefcase_TG1");
										waitForElementToBeClickable(tendercreationlocators.AddEbriefcaseFile_TG1);
										click(tendercreationlocators.AddEbriefcaseFile_TG1, "AddEbriefcaseFile_TG1");
										waitForElementToBeClickable(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1);
										click(tendercreationlocators.Attachment_subtabLnk_BidSubmission_TG1, "Attachment_subtabLnk_BidSubmission_TG1");
										waitForObj(1000);
										*/
									}
									//Tender Attachment++++++++++++++++++++++++++++++++++++++++++++
									String TenderAttachment="//a[contains(text(),'Tender Attachment')]";
									boolean fielddisplay_TenderAttachment=isElementDisplayed_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									boolean interactable_TenderAttachment=isElementEnable_Updated(By.xpath(AttachmentSubTemplate), searchTime);
									//System.out.println("Field is displayed: " + fielddisplay_TenderAttachment);
									//System.out.println("Field is interactable: " + interactable_TenderAttachment);
									if (fielddisplay_TenderAttachment == true && interactable_TenderAttachment==true) {
										click(By.xpath(TenderAttachment),"TenderAttachment");
										universalNormalWait();
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("102")) {
								try {
									universalNormalWait();
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											//System.out.println(FieldlongName);
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("111")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("109")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
														if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														//String generateDate=generateRandomDate();
														String generateDate=getFutureDate(100);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
																.sendKeys(generateDate);
														waitForObj(1000);
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													//String generateDate=generateRandomDate();
													String generateDate=getFutureDate(100);
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//inpt[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(Date(10));
														waitForObj(1000);
														String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
												scrollToElement(By.xpath(xpath));
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
											if(elementsCount>1) {
												String xpath_1 = "(//input[contains(@id,'" + TabshortName + "."
													+ FieldshortName + "')])[1]";
												scrollToElement(By.xpath(xpath_1));
												scrollToTopOfThePage();
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(6));
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(getrandomInt);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
														else {
															randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(randomDecimal);
															waitForObj(1000);
															String xpath_A2A = "(//input[contains(@id,'" + TabshortName + "."
																	+ FieldshortName + "')])[1]/parent::a//following-sibling::i[@data-original-title='Apply to all']";
															JSClick(By.xpath(xpath_A2A), "Apply To All");
															waitForObj(1000);
															String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
															click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
															waitForObj(1000);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//select[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
													//System.out.println("Field is Enabled: " + interactable);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size()-1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByVisibleText(keysValue);
														waitForObj(1000);
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)));
														sel.selectByIndex(1);
														waitForObj(1000);
														String xpath_A2A = "(//select[contains(@id,'" + TabshortName + "."
																+ FieldshortName + "')])[1]//following-sibling::i[@data-original-title='Apply to all']";
														JSClick(By.xpath(xpath_A2A), "Apply To All");
														waitForObj(1000);
														String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
														click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
														waitForObj(1000);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1) {
													scrollToElement(By.xpath(xpath));
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable==true) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByVisibleText(keysValue);
														}
														else {
														Select sel = new Select(
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
														sel.selectByIndex(1);
														}
														longName.remove(FieldlongName);
													} else {
														longName.remove(FieldlongName);
													}
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												List<WebElement> elements = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
												int elementsCount=elements.size();
												if(elementsCount>1) {
													String xpath_1 = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]";
													scrollToElement(By.xpath(xpath_1));
													scrollToTopOfThePage();
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_1), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_1), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1)).sendKeys(keysValue);
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													waitForObj(1000);
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													waitForObj(1000);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath_1))
															.sendKeys(generateRandomString(15));
													waitForObj(1000);
													String xpath_A2A = "(//textarea[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')])[1]/parent::a/parent::span//following-sibling::i[@data-original-title='Apply to all']";
													JSClick(By.xpath(xpath_A2A), "Apply To All");
													waitForObj(1000);
													String xpath_A2A_Confirm = "//button[contains(text(),'Confirm')]";
													click(By.xpath(xpath_A2A_Confirm), "Apply To All_Confirm");
													waitForObj(1000);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
												else if(elementsCount==1){
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isEnabled")
												.toString().equalsIgnoreCase("Y") && js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].mandatory")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											
											if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String xpath = "//a[contains(@id,'" + TabshortName + "."
															+ FieldshortName + "')]";
													String xpath_1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
													if (fielddisplay == true && interactable == true) {
													scrollToElement(By.xpath(xpath_1));
													//set(By.xpath(xpath_1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													//generateRandomString(6);
													String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
													waitForObj(2000);
													set(By.xpath(xpath_1),filePath,"fileName");
													longName.remove(FieldlongName);
													}
													else {
														longName.remove(FieldlongName);
														}
													}
												catch (Exception e) {
													longName.remove(FieldlongName);
													//System.out.println("attach file not available");
												}
											}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Successfully not Saved " + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		public void evaluateSupplier_Dynamic(String VendorName, String Decision, String Comment, int Cover) throws Throwable {
			try {
				log.info("started executing the method:: EvaluateSupplier");
				waitForElementToBeVisible(tendercreationlocators.myCommentSection);
				String BidderName=DatabaseComponent.SupplierCompanyName(VendorName);
				boolean supplierName=ThreadLocalWebdriver.getDriver().findElement(tendercreationlocators.supplierName(BidderName)).isDisplayed();
				if(supplierName) {
					click(tendercreationlocators.menuSupplierBidDetails(BidderName), "Click_Menu_BidDetails");
					click(tendercreationlocators.supplierBidDetails(BidderName), "BidDetails");
					waitForObj(4000);
					int part=Cover;
					if(ThreadLocalWebdriver.getDriver().findElement(tendercreationlocators.copyBidText).isDisplayed()) {
						//IsElementPresent(tendercreationlocators.copyBidText);
						click(tendercreationlocators.saveCopyBid, "BidDetails");
						if(part==1) {
							//CreateTender_BidSubmission_Evaluation_FromPRwithNonSOR_STG_New();
							CreateTender_BidSubmission_Evaluation();
						}
						else if (part==2) {
							//CreateTender_BidSubmission_Evaluation_FromPRwithNonSOR_STG_New();
							CreateTender_BidSubmission_Evaluation();
						}
					//waitForElementToBeVisible(tendercreationlocators.supplierName(BidderName));
					waitForElementToBeClickable(tendercreationlocators.clickSaveButton_New);
					click(tendercreationlocators.clickSaveButton_New, "ClickSaveButton");
					universalNormalWait();
					//waitForElementToBeClickable(tendercreationlocators.closeEval);
					JSClick(tendercreationlocators.closeEval, "ClickCloseAlertButton");
					waitForElementToBeClickable(tendercreationlocators.closeBidDetails_New);
					click(tendercreationlocators.closeBidDetails_New, "CloseBidDetails");
					waitForObj(2000);
					click(tendercreationlocators.supplierWiseStatus(BidderName), "supplierWiseStatus");
					waitForObj(2000);
					click(tendercreationlocators.supplierWiseDecison(Decision), "supplierWiseStatus");
					clear(tendercreationlocators.supplierWiseComment, "supplierWiseComment");
					set(tendercreationlocators.supplierWiseComment, Comment, "supplierWiseComment");
					click(tendercreationlocators.decisionSave, "decisionSave");
					IsElementPresent(tendercreationlocators.decisionSaveAlert);
					click(tendercreationlocators.alertCloseButton, "alertCloseButton");
					}
					else {
						if(part==1) {
							CreateTender_BidSubmission_Evaluation_FromPRwithNonSOR_STG_New();
						}
						else if (part==2) {
							CreateTender_BidSubmission_Evaluation_FromPRwithNonSOR_STG_New();
						}
						waitForElementToBeClickable(tendercreationlocators.clickSaveButton_New);
						click(tendercreationlocators.clickSaveButton_New, "ClickSaveButton");
						universalNormalWait();
						//waitForElementToBeClickable(tendercreationlocators.closeEval);
						JSClick(tendercreationlocators.closeEval, "ClickCloseAlertButton");
						waitForElementToBeClickable(tendercreationlocators.closeBidDetails_New);
						click(tendercreationlocators.closeBidDetails_New, "CloseBidDetails");
						waitForObj(2000);
						click(tendercreationlocators.supplierWiseStatus(BidderName), "supplierWiseStatus");
						waitForObj(2000);
						click(tendercreationlocators.supplierWiseDecison(Decision), "supplierWiseStatus");
						clear(tendercreationlocators.supplierWiseComment, "supplierWiseComment");
						set(tendercreationlocators.supplierWiseComment, Comment, "supplierWiseComment");
						click(tendercreationlocators.decisionSave, "decisionSave");
						IsElementPresent(tendercreationlocators.decisionSaveAlert);
						click(tendercreationlocators.alertCloseButton, "alertCloseButton");
					}
					waitForObj(3000);
					waitForElementToBeVisible(tendercreationlocators.supplierName(BidderName));
				}	
				pdfResultReport.addStepDetails("EvaluateSupplier",
						"BidDetails Section must be clciked successfully", "Successfully clicked BidDetails Section" + " ",
						"Pass", "Y");
				log.info("completed executing the method:: clickBidDetailsSectionForchoosenBidder");
			} catch (Exception e) {
				log.fatal("Not able to navigate To BidDetails Section" + e.getMessage());
				pdfResultReport.addStepDetails("EvaluateSupplier",
						"BidDetails Section must be clicked successfully",
						"Unable to click BidDetails Section" + e.getMessage(), "Fail", "N");
			}
		}
		String jsonString;
		public void fillup_Supplier_Specific_Detail() throws Throwable {
			try {
				log.info("started executing the method:: fillup_Supplier_Specific_Detail");
				waitForObj(2000);
				String SupplierCount= "//div[contains(text(),'Supplier Specific Detail')]/parent::div//a[contains(text(), 'Sanction Note details of: ')]";ts();
				List<WebElement> ListItems = ThreadLocalWebdriver.getDriver()
						.findElements(By.xpath(SupplierCount));
				//System.out.println(ListItems.size());
				int vendorCount;
				int u=1;
				int v=0;
		    	ObjectMapper mapper = new ObjectMapper();
		    	JsonNode rootNode = mapper.readTree(jsonString);
		    	JsonNode sanctionQuotationList = rootNode.get("sanctionQuotationList");
		    	vendorCount=sanctionQuotationList.size();
				for (WebElement Items : ListItems) {
					WebDriverWait wait = new WebDriverWait(ThreadLocalWebdriver.getDriver(), 20);
					wait.until(ExpectedConditions.visibilityOf(Items));
					wait.until(ExpectedConditions.elementToBeClickable(Items));
					JSClick(Items, "Supplier wise Sanction Details");	
			    	JsonNode sanctionTemplateGroupMap = sanctionQuotationList.get(v).get("sanctionTemplateGroupMap");
			    	if (sanctionQuotationList.isArray() && sanctionQuotationList.size() > 0) {
			            JsonNode firstQuotation = sanctionQuotationList.get(v);
			            sanctionTemplateGroupMap = firstQuotation.get("sanctionTemplateGroupMap");
			            if (sanctionTemplateGroupMap != null) {
			                Iterator<String> fieldNames = sanctionTemplateGroupMap.fieldNames();
			                int i=0;
			                while (fieldNames.hasNext()) {
			                    String fieldName = fieldNames.next();
			                    templates.add(fieldName);
			                    //System.out.println("Field name: " + templates.get(i));
			                    String templatename=templates.get(i);
			                	int size= sanctionTemplateGroupMap.get(templatename).size();
			                	//System.out.println("Total tabs present in group template:" + size);
			                	JsonNode thirdQuotation=sanctionTemplateGroupMap.get(templatename);
			                	if(size>0) {
			                		for(int j=0; j<size; j++) {
			                		String displaylayoutId =thirdQuotation.get(j).get("displayLayoutid").asText();
			                		String templateTypeID=thirdQuotation.get(j).get("templateTypeId").asText();
			                		String shortName=thirdQuotation.get(j).get("shortName").asText();
			                		String longName=thirdQuotation.get(j).get("longName").asText();
			                		String subProcessName=thirdQuotation.get(j).get("subProcessName").asText();
			                		if (displaylayoutId.equalsIgnoreCase("100")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("101")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(fShortName.equalsIgnoreCase("purchase_group")) {
				                        			mandatory="Y";  //pcbl specific check
				                        		}
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
													String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
													System.out.println(text(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/button[1]/span[1]/span")));
													if(text(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/button[1]/span[1]/span")).equalsIgnoreCase("Nothing selected")) {
													if(!keysValue.equals("")) {
													JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
													}
													else {
													try {
													JSClick(By.xpath(xpath), "Quotation Currency");
													}
													catch(Exception e) {
													System.out.println("Index 1 is not present:" +e.getMessage());
													}
													}
													}
													longName_SN.remove(fLongName);
													} else {
													longName_SN.remove(fLongName);
													}
													}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("102")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "Clear field details");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															if(fShortName.equalsIgnoreCase("item_qty")) {
																//System.out.println("Don't fill any value");
															}
															else {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
																}
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("103")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("104")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("105")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		}
			                	}
			            		i=i+1;
			                }
			            } else {
			            }
			        } else {
			    		}
			    	u=u+1;	
			    	v=v+1;
					//}
					//=================================
					JSClick(Items, "Supplier wise Sanction Details");
				}
				pdfResultReport.addStepDetails("fill up Supplier Specific Detail", "fill up Supplier Specific Detail successfully",
						"Successfully fill up Supplier Specific Detail" + " ", "Pass", "Y");
				log.info("completed executing the method:: fillup_Supplier_Specific_Detail");
				boolean fielddisplay_CD=isElementDisplayed_Updated(By.xpath("(//div[text()='Common Details']//parent::div)[1]/div[2]/div[2]/table/thead/tr/th[1]/input"), 2);
				boolean interactable_CD=isElementEnable_Updated(By.xpath("(//div[text()='Common Details']//parent::div)[1]/div[2]/div[2]/table/thead/tr/th[1]/input"), 2);
				if (fielddisplay_CD == true && interactable_CD == true) {
					JSClick(By.xpath("(//div[text()='Common Details']//parent::div)[1]/div[2]/div[2]/table/thead/tr/th[1]/input"), "Unselect Common Details Section");
				}
				waitForObj(2000);
			} catch (Exception e) {
				log.fatal("Unable to fill up Supplier Specific Detail" + e.getMessage());
				pdfResultReport.addStepDetails("Navigate to fill up Supplier Specific Detail", "Not able to fill up Supplier Specific Detail",
						"Unable to fill up Supplier Specific Detail" + e.getMessage(), "Fail", "N");
			}
		}
		public void ts() throws InterruptedException, IOException {
			inCheck=0;
			while(inCheck==0) {
			try {
				API_Component.provideTokenObject();API_Component.Login();API_Component.getSanctionDetails_S();jsonString=API_Component.js_S;
						}
			catch(Exception e) {
				inCheck=0;
				}
			}
		}
		public void fillup_Supplier_Specific_Detail_msn() throws Throwable {
			try {
				log.info("started executing the method:: fillup_Supplier_Specific_Detail");
				String SupplierCount= "//div[contains(text(),'Item Allotment')]/parent::div//a[contains(text(), 'Sanction Note details of: ')]";ms();
				List<WebElement> ListItems = ThreadLocalWebdriver.getDriver()
						.findElements(By.xpath(SupplierCount));
				//System.out.println(ListItems.size());
				int vendorCount;
				int u=1;
				int v=0;
		    	ObjectMapper mapper = new ObjectMapper();
		    	JsonNode rootNode = mapper.readTree(jsonString);
		    	JsonNode sanctionQuotationList = rootNode.get("sanctionQuotationList");
		    	vendorCount=sanctionQuotationList.size();
		    	//System.out.println(vendorCount);
				for (WebElement Items : ListItems) {
					WebDriverWait wait = new WebDriverWait(ThreadLocalWebdriver.getDriver(), 20);
					wait.until(ExpectedConditions.visibilityOf(Items));
					wait.until(ExpectedConditions.elementToBeClickable(Items));
					JSClick(Items, "Supplier wise Sanction Details");	
			    	JsonNode sanctionTemplateGroupMap = sanctionQuotationList.get(0).get("sanctionTemplateGroupMap");
			    	if (sanctionQuotationList.isArray() && sanctionQuotationList.size() > 0) {
			            JsonNode firstQuotation = sanctionQuotationList.get(0);
			            sanctionTemplateGroupMap = firstQuotation.get("sanctionTemplateGroupMap");
			            if (sanctionTemplateGroupMap != null) {
			                Iterator<String> fieldNames = sanctionTemplateGroupMap.fieldNames();
			                int i=0;
			                while (fieldNames.hasNext()) {
			                    String fieldName = fieldNames.next();
			                    templates.add(fieldName);
			                    //System.out.println("Field name: " + templates.get(i));
			                    String templatename=templates.get(i);
			                	int size= sanctionTemplateGroupMap.get(templatename).size();
			                	//System.out.println("Total tabs present in group template:" + size);
			                	JsonNode thirdQuotation=sanctionTemplateGroupMap.get(templatename);
			                	if(size>0) {
			                		for(int j=0; j<size; j++) {
			                		String displaylayoutId =thirdQuotation.get(j).get("displayLayoutid").asText();
			                		String templateTypeID=thirdQuotation.get(j).get("templateTypeId").asText();
			                		String shortName=thirdQuotation.get(j).get("shortName").asText();
			                		String longName=thirdQuotation.get(j).get("longName").asText();
			                		String subProcessName=thirdQuotation.get(j).get("subProcessName").asText();
			                		if (displaylayoutId.equalsIgnoreCase("100")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("101")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("102")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("103")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("104")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("105")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(j).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")||controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		}
			                	}
			            		i=i+1;
			                }
			            } else {
			            }
			        } else {
			    		}
			    	u=u+1;	
			    	v=v+1;
					//}
					//=================================
					JSClick(Items, "Supplier wise Sanction Details");
				}
				pdfResultReport.addStepDetails("fill up Supplier Specific Detail", "fill up Supplier Specific Detail successfully",
						"Successfully fill up Supplier Specific Detail" + " ", "Pass", "Y");
				log.info("completed executing the method:: fillup_Supplier_Specific_Detail");
			} catch (Exception e) {
				log.fatal("Unable to fill up Supplier Specific Detail" + e.getMessage());
				pdfResultReport.addStepDetails("Navigate to fill up Supplier Specific Detail", "Not able to fill up Supplier Specific Detail",
						"Unable to fill up Supplier Specific Detail" + e.getMessage(), "Fail", "N");
			}
		}
		public void ms() throws InterruptedException, IOException {
			inCheck=0;
			while(inCheck==0) {
				try {
				API_Component.provideTokenObject();API_Component.Login();API_Component.getSanctionDetails_MS();
				}
				catch(Exception e) {
					inCheck=0;
				}
			}
    	jsonString=API_Component.js_S;
		}
		public void fillup_Supplier_Specific_Detail_Indent() throws Throwable {
			try {
				log.info("started executing the method:: fillup_Supplier_Specific_Detail");
				String SupplierCount= "//div[contains(text(),'Item Allotment')]/parent::div//a[contains(text(), 'Sanction Note details of: ')]";is();
				List<WebElement> ListItems = ThreadLocalWebdriver.getDriver()
						.findElements(By.xpath(SupplierCount));
				//System.out.println(ListItems.size());
				int vendorCount;
				int u=1;
				int v=0;
		    	ObjectMapper mapper = new ObjectMapper();
		    	JsonNode rootNode = mapper.readTree(jsonString);
		    	JsonNode sanctionQuotationList = rootNode.get("sanctionQuotationList");
		    	vendorCount=ListItems.size();
		    	//System.out.println(vendorCount);
				for (WebElement Items : ListItems) {
					WebDriverWait wait = new WebDriverWait(ThreadLocalWebdriver.getDriver(), 20);
					wait.until(ExpectedConditions.visibilityOf(Items));
					wait.until(ExpectedConditions.elementToBeClickable(Items));
					JSClick(Items, "Supplier wise Sanction Details");
					waitForObj(1000);
			    	JsonNode sanctionTemplateGroupMap = sanctionQuotationList.get(v).get("sanctionTemplateGroupMap");
			    	if (sanctionQuotationList.isArray() && sanctionQuotationList.size() > 0) {
			            JsonNode firstQuotation = sanctionQuotationList.get(v);
			            sanctionTemplateGroupMap = firstQuotation.get("sanctionTemplateGroupMap");
			            if (sanctionTemplateGroupMap != null) {
			                Iterator<String> fieldNames = sanctionTemplateGroupMap.fieldNames();
			                int i=0;
			                while (fieldNames.hasNext()) {
			                    String fieldName = fieldNames.next();
			                    templates.add(fieldName);
			                    //System.out.println("Field name: " + templates.get(i));
			                    String templatename=templates.get(i);
			                	int size= sanctionTemplateGroupMap.get(templatename).size();
			                	//System.out.println("Total tabs present in group template:" + size);
			                	JsonNode thirdQuotation=sanctionTemplateGroupMap.get(templatename);
			                	if(size>0) {
			                		totalRowCount=size;
			                		for(int j=0; j<totalRowCount; j++) {
			                		//System.out.println("Initial Row Count: "+totalRowCount);
			                		String displaylayoutId =thirdQuotation.get(0).get("displayLayoutid").asText();
			                		String templateTypeID=thirdQuotation.get(0).get("templateTypeId").asText();
			                		String shortName=thirdQuotation.get(0).get("shortName").asText();
			                		String longName=thirdQuotation.get(0).get("longName").asText();
			                		String subProcessName=thirdQuotation.get(0).get("subProcessName").asText();
			                		if (displaylayoutId.equalsIgnoreCase("100")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("101")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("102")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														//=============count of Total Rows====================
														totalRowCount= ThreadLocalWebdriver.getDriver().findElements(By.xpath("//input[contains(@id, '" + shortName + "." + fShortName + "')]")).size();
														//System.out.println("totalRowCount: "+totalRowCount);
														//====================================================
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															if(fShortName.equalsIgnoreCase("item_qty")) {
																//System.out.println("Don't fill any value");
															}
															else {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
																}
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
														totalRowCount=1;
														break;
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("103")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("104")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("105")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												/*
												else if (controlTypeId.equalsIgnoreCase("105")||controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												*/
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		}
			                	}
			            		i=i+1;
			                }
			            } else {
			            }
			        } else {
			    		}
			    	u=u+1;	
			    	//v=v+1;
					//}
					//=================================
					JSClick(Items, "Supplier wise Sanction Details");
				}
				pdfResultReport.addStepDetails("fill up Supplier Specific Detail", "fill up Supplier Specific Detail successfully",
						"Successfully fill up Supplier Specific Detail" + " ", "Pass", "Y");
				log.info("completed executing the method:: fillup_Supplier_Specific_Detail");
			} catch (Exception e) {
				log.fatal("Unable to fill up Supplier Specific Detail" + e.getMessage());
				pdfResultReport.addStepDetails("Navigate to fill up Supplier Specific Detail", "Not able to fill up Supplier Specific Detail",
						"Unable to fill up Supplier Specific Detail" + e.getMessage(), "Fail", "N");
			}
		}
		public void is() throws InterruptedException, IOException {
			inCheck=0;
			while(inCheck==0) {
				try {
				API_Component.provideTokenObject();API_Component.Login();API_Component.getSanctionDetails_Indent();
				jsonString=API_Component.js_S;
				}
				catch(Exception e) {
					inCheck=0;
				}
			}
		}
		public void fillup_Supplier_Specific_Detail_PR() throws Throwable {
			try {
				log.info("started executing the method:: fillup_Supplier_Specific_Detail");
				String SupplierCount= "//div[contains(text(),'Item Allotment')]/parent::div//a[contains(text(), 'Sanction Note details of: ')]";prs();
				List<WebElement> ListItems = ThreadLocalWebdriver.getDriver().findElements(By.xpath(SupplierCount));
				//System.out.println(ListItems.size());
				int vendorCount;
				int u=1;
				int v=0;
		    	ObjectMapper mapper = new ObjectMapper();
		    	JsonNode rootNode = mapper.readTree(jsonString);
		    	JsonNode sanctionQuotationList = rootNode.get("sanctionQuotationList");
		    	vendorCount=ListItems.size();
		    	//System.out.println(vendorCount);
				for (WebElement Items : ListItems) {
					WebDriverWait wait = new WebDriverWait(ThreadLocalWebdriver.getDriver(), 20);
					wait.until(ExpectedConditions.visibilityOf(Items));
					wait.until(ExpectedConditions.elementToBeClickable(Items));
					JSClick(Items, "Supplier wise Sanction Details");
					waitForObj(1000);	
			    	JsonNode sanctionTemplateGroupMap = sanctionQuotationList.get(v).get("sanctionTemplateGroupMap");
			    	if (sanctionQuotationList.isArray() && sanctionQuotationList.size() > 0) {
			            JsonNode firstQuotation = sanctionQuotationList.get(v);
			            sanctionTemplateGroupMap = firstQuotation.get("sanctionTemplateGroupMap");
			            if (sanctionTemplateGroupMap != null) {
			                Iterator<String> fieldNames = sanctionTemplateGroupMap.fieldNames();
			                int i=0;
			                while (fieldNames.hasNext()) {
			                    String fieldName = fieldNames.next();
			                    templates.add(fieldName);
			                    //System.out.println("Field name: " + templates.get(i));
			                    String templatename=templates.get(i);
			                	int size= sanctionTemplateGroupMap.get(templatename).size();
			                	//System.out.println("Total tabs present in group template:" + size);
			                	JsonNode thirdQuotation=sanctionTemplateGroupMap.get(templatename);
			                	if(size>0) {
			                		totalRowCount=size;
			                		for(int j=0; j<totalRowCount; j++) {
			                		//System.out.println("Initial Row Count: "+totalRowCount);
			                		String displaylayoutId =thirdQuotation.get(0).get("displayLayoutid").asText();
			                		String templateTypeID=thirdQuotation.get(0).get("templateTypeId").asText();
			                		String shortName=thirdQuotation.get(0).get("shortName").asText();
			                		String longName=thirdQuotation.get(0).get("longName").asText();
			                		String subProcessName=thirdQuotation.get(0).get("subProcessName").asText();
			                		if (displaylayoutId.equalsIgnoreCase("100")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("101")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("102")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														totalRowCount= ThreadLocalWebdriver.getDriver().findElements(By.xpath("//input[contains(@id, '" + shortName + "." + fShortName + "')]")).size();
														//System.out.println("totalRowCount: "+totalRowCount);
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															if(fShortName.equalsIgnoreCase("item_qty") && qCSN.equalsIgnoreCase("no_check")) {
																clear(By.xpath(xpath), "Clear field details");
																String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
															else if(fShortName.equalsIgnoreCase("item_qty") && qCSN.equalsIgnoreCase("warning")) {
																clear(By.xpath(xpath), "Clear field details");
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys("1");
															}
															else if(fShortName.equalsIgnoreCase("item_qty") && qCSN.equalsIgnoreCase("error")) {
																clear(By.xpath(xpath), "Clear field details");
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys("1");
															}
															else {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
																}
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
														totalRowCount=1;
														break;
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("103")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("104")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		//System.out.println("fieldSize:" + fieldSize);
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		else if (displaylayoutId.equalsIgnoreCase("105")) {
			                			JsonNode fourthQuotation=thirdQuotation.get(0).get("sanctionTemplateFieldList");
				                		int fieldSize= fourthQuotation.size();
				                		if(fieldSize>0) {
				                			for(int k=0; k<fieldSize; k++) {
				                        		String dataTypeId =fourthQuotation.get(k).get("dataTypeId").asText();
				                        		String controlTypeId=fourthQuotation.get(k).get("controlTypeId").asText();
				                        		String fShortName=fourthQuotation.get(k).get("shortName").asText();
				                        		String fLongName=fourthQuotation.get(k).get("longName").asText();
				                        		String isEnabled=fourthQuotation.get(k).get("isEnabled").asText();
				                        		String mandatory=fourthQuotation.get(k).get("mandatory").asText();
				                        		//String formula=fourthQuotation.get(k).get("formula").asText();
				                        		String isVisible=fourthQuotation.get(k).get("isVisible").asText();
				                        		//String value=fourthQuotation.get(k).get("subProcessName").asText();
				                        		String value = fourthQuotation.get(k).has("value") ? fourthQuotation.get(k).get("value").asText() : null;
				                        		if(isEnabled.equalsIgnoreCase("Y") && isVisible.equalsIgnoreCase("1") && mandatory.equalsIgnoreCase("Y")) {
				                        		//Store field details
				                        		ArrayList<String> shortName_SN = new ArrayList<String>();
												ArrayList<String> longName_SN = new ArrayList<String>();
												shortName_SN.add(fShortName);
												longName_SN.add(fLongName);
												if (controlTypeId.equalsIgnoreCase("100")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(keysValue==null) {
															keysValue="100";
														}
														System.out.println(keysValue);
														if(!keysValue.equals("")|| keysValue==null) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														if(dataTypeId.equalsIgnoreCase("101")) {
															clear(By.xpath(xpath), "Clear field details");
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(6));
														}
														else if(dataTypeId.equalsIgnoreCase("100")) {
															clear(By.xpath(xpath), "Clear field details");
															String getrandomInt = Integer.toString(getrandomInterger(2,50));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(getrandomInt);
														}
														else if(dataTypeId.equalsIgnoreCase("102")) {
															clear(By.xpath(xpath), "Clear field details");
															String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(randomDecimal);
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("102")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("103")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("104")) {
													String xpath = "(//input[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("105")) {
													String xpath_Actual = "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													//System.out.println(xpath_Actual);
													String xpath= "(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li[1]/a";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															JSClick(By.xpath("(//*[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]/div/ul/li/a[contains(text(), '"+keysValue+"')]"), "Quotation Currency");
														}
														else {
															try {
															JSClick(By.xpath(xpath), "Quotation Currency");
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("106")) {
													String xpath = "(//select[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
															Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByVisibleText(keysValue);
														}
														else {
															try {
															Select sel = new Select(
																	ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
															sel.selectByIndex(1);
															}
															catch(Exception e) {
																//System.out.println("Index 1 is not present:" +e.getMessage());
															}
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("107")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Dynamicity.generateRandomString(15));
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("108")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("109")) {
													longName_SN.remove(fLongName);
												}
												else if (controlTypeId.equalsIgnoreCase("110")) {
													String xpath = "(//textarea[@id='" + shortName + "." + fShortName + "."+ j +"'])["+u+"]";
													boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
													boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
													if (fielddisplay == true && interactable == true) {
														String keys=longName_SN.get(longName_SN.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = Dynamicity.getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String generateDate=Dynamicity.generateRandomDate();
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateDate);
														}
														longName_SN.remove(fLongName);
													} else {
														longName_SN.remove(fLongName);
													}
												}
												else if (controlTypeId.equalsIgnoreCase("111")) {
													longName_SN.remove(fLongName);
													}
				                        		}
				                			}
				                		}
			                		}
			                		}
			                	}
			            		i=i+1;
			                }
			            } else {
			            }
			        } else {
			    		}
			    	u=u+1;
					JSClick(Items, "Supplier wise Sanction Details");
				}
				
				boolean fielddisplay_CD=isElementDisplayed_Updated(By.xpath("//div[text()='Common Details']"), 2);
				boolean interactable_CD=isElementEnable_Updated(By.xpath("//div[text()='Common Details']"), 2);
				if (fielddisplay_CD == true && interactable_CD == true) {
					 JSONObject jsonObject = new JSONObject(cd_S);
				     JSONObject sanctionDetailsTempMap = jsonObject.getJSONObject("sanctionDetailsTempMap");
				     JSONArray commonSntgNewArray = sanctionDetailsTempMap.getJSONArray("common_sntg_new@Common TG for SN");
				     JSONObject commonSntgNew = commonSntgNewArray.getJSONObject(0);
				     String displayLayoutid = Integer.toString(commonSntgNew.getInt("displayLayoutid"));
				     String shortName = commonSntgNew.getString("shortName");
				     if (displayLayoutid.equalsIgnoreCase("100")) {
				    	 
				     }
				     else if (displayLayoutid.equalsIgnoreCase("101")) {
				    	 for (int i = 0; i < commonSntgNewArray.length(); i++) {
				                JSONObject templateGroup = commonSntgNewArray.getJSONObject(i);
				                JSONArray sanctionTemplateFieldList = templateGroup.getJSONArray("sanctionTemplateFieldList");

				                for (int j = 0; j < sanctionTemplateFieldList.length(); j++) {
				                    JSONObject field = sanctionTemplateFieldList.getJSONObject(j);
				                    String controlTypeId =Integer.toString(field.getInt("controlTypeId"));
				                    String fShortName =field.getString("shortName");
				                    String fLongName=field.getString("longName");
				                    String dataTypeId=Integer.toString(field.getInt("dataTypeId"));
				                    
				                    if (controlTypeId.equalsIgnoreCase("100")) {
										String xpath = "//input[@id='" + shortName + "." + fShortName + ".0']";
										boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
										boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
										if (fielddisplay == true && interactable == true) {
											if(dataTypeId.equalsIgnoreCase("101")) {
												clear(By.xpath(xpath), "Clear field details");
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
												.sendKeys(Dynamicity.generateRandomString(6));
											}
											else if(dataTypeId.equalsIgnoreCase("100")) {
												clear(By.xpath(xpath), "Clear field details");
												String getrandomInt = Integer.toString(getrandomInterger(2,50));
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
												.sendKeys(getrandomInt);
											}
											else if(dataTypeId.equalsIgnoreCase("102")) {
												clear(By.xpath(xpath), "Clear field details");
												String randomDecimal = Double.toString(Dynamicity.generateRandomTwoDigitDecimal());
												ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
												.sendKeys(randomDecimal);
												}
											} 
									}
									else if (controlTypeId.equalsIgnoreCase("104")) {
										String xpath = "//input[@id='" + shortName + "." + fShortName + ".0']";
										boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
										boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
										if (fielddisplay == true && interactable == true) {
											ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(Date(10));	
										} 
									}
									else if (controlTypeId.equalsIgnoreCase("105")) {
										String xpath_Actual = "//*[@id='" + shortName + "." + fShortName + ".0']";
										String xpath= "//*[@id='" + shortName + "." + fShortName + ".0']/div/ul/li[1]/a";
										boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath_Actual), 2);
										boolean interactable=isElementEnable_Updated(By.xpath(xpath_Actual), 2);
										if (fielddisplay == true && interactable == true) {
											JSClick(By.xpath(xpath), "Quotation Currency");
										} 
									}
									else if (controlTypeId.equalsIgnoreCase("106")) {
										String xpath = "//select[@id='" + shortName + "." + fShortName + ".0']";
										boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
										boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
										if (fielddisplay == true && interactable == true) {
												try {
												Select sel = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
												sel.selectByIndex(1);
												}
												catch(Exception e) {
													//System.out.println("Index 1 is not present:" +e.getMessage());
												}
											} 
									}
									else if (controlTypeId.equalsIgnoreCase("107")) {
										String xpath = "//textarea[@id='" + shortName + "." + fShortName + ".0']";
										boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
										boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
										if (fielddisplay == true && interactable == true) {
											ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(Dynamicity.generateRandomString(15));
											
										} 
									}
									else if (controlTypeId.equalsIgnoreCase("110")) {
										String xpath = "//textarea[@id='" + shortName + "." + fShortName + ".0']";
										boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), 2);
										boolean interactable=isElementEnable_Updated(By.xpath(xpath), 2);
										if (fielddisplay == true && interactable == true) {
											String generateDate=Dynamicity.generateRandomDate();
											ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(generateDate);
											}
										} 
									else {}
									}
								}
				            }
				     else if (displayLayoutid.equalsIgnoreCase("102")) {
				    	 
				    	 }
				     else if (displayLayoutid.equalsIgnoreCase("103")) {
				    	 
				    	 }
				     else if (displayLayoutid.equalsIgnoreCase("104")) {
				    	
				    	 }
				     else if (displayLayoutid.equalsIgnoreCase("105")) {
				    	 
				    	 }
				     
				}
				waitForObj(2000);
				
				pdfResultReport.addStepDetails("fill up Supplier Specific Detail", "fill up Supplier Specific Detail successfully",
						"Successfully fill up Supplier Specific Detail" + " ", "Pass", "Y");
				log.info("completed executing the method:: fillup_Supplier_Specific_Detail");
			} catch (Exception e) {
				log.fatal("Unable to fill up Supplier Specific Detail" + e.getMessage());
				pdfResultReport.addStepDetails("Navigate to fill up Supplier Specific Detail", "Not able to fill up Supplier Specific Detail",
						"Unable to fill up Supplier Specific Detail" + e.getMessage(), "Fail", "N");
			}
		}
		public void prs() throws InterruptedException, IOException{
			inCheck=0;
			while(inCheck==0) {
			try {
				API_Component.provideTokenObject();API_Component.Login();API_Component.getSanctionDetails_PR();jsonString=API_Component.js_S;
			}
			catch(Exception e) {
				inCheck=0;
				}
			}
		}
		public static int n=0;
		public static boolean nB=false;
		public void Corrigendum_Tender() throws Throwable {
			try {
				log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
				JsonPath js=jsResponse;
				int itemtemplatecount = js.getInt("groupTemplateList.size()");
				//int itemtemplatecount = tTems.size();
				List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(
					By.xpath("//div[contains(@id, 'mat-tab-label')]"));
				for (int h = 1; h <= tabcount.size(); h++) {
				String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath(
						"(//div[contains(@id, 'mat-tab-label')])[" + h + "]")).getText();
				//System.out.println("UI Tabname:" + uitabname);
				if(nB==true) {
					break;
				}
				for (int i = 0; i < itemtemplatecount; i++) {
					masterprocessids = js.get("groupTemplateList[" + i + "].masterProcessId").toString();
					if (masterprocessids.equalsIgnoreCase("1")||uitabname.equalsIgnoreCase("GENERAL INFORMATION")) {
						String tabName = js.get("groupTemplateList[" + i + "].subProcessName").toString();
						//System.out.println(n);
						//System.out.println(tTems.size());
						if (uitabname.equalsIgnoreCase(tabName) && uitabname.equalsIgnoreCase(tTems.get(n))) {
							if(n==tTems.size()) {
								//System.out.println(n);
								nB=true;
								break;
							}
							n++;
							String ParentChildItem = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							//System.out.println("templateTypeId for the tab " + tabName + " is :" + ParentChildItem);
							if(h % 4 == 0) {
								String tb="//*[@id='accordionPanelsStayOpenExample']/div/nav/div/mat-tab-group/mat-tab-header/button[2]/div";
								if(isElementDisplayed_Updated(By.xpath(tb), 2)==true && isElementEnable_Updated(By.xpath(tb), 2)==true) {
									JSClick(By.xpath(tb),"Traverse button");
								}
							}
							scrollToTopOfThePage();
							JavascriptExecutor javas = (JavascriptExecutor) ThreadLocalWebdriver.getDriver();
							WebElement tabElem = ThreadLocalWebdriver.getDriver().findElement(
									By.xpath("//div/span[text()='" + tabName + "']"));
							String tn="//div/span[text()='" + tabName + "']";
							if(isElementDisplayed_Updated(By.xpath(tn), 20)==true && isElementEnable_Updated(By.xpath(tn), 20)==true) {
								JSClick(By.xpath(tn), tabName);
							}
							universalNormalWait();
							tabularformat = js.get("groupTemplateList[" + i + "].displayLayoutid").toString();
							templateTypeFormat = js.get("groupTemplateList[" + i + "].templateTypeId").toString();
							templateShortName = js.get("groupTemplateList[" + i + "].shortName").toString();
							if(tabName.equalsIgnoreCase("GENERAL INFORMATION")) {
								scrollToBottomOfThePage();
								clear(tendercreationlocators.detailedDescription, "detailedDescription");
								set(tendercreationlocators.detailedDescription, "This is dynamic Corrigendum Description", "detailedDescription");
								scrollToTopOfThePage();
							}
							else if (tabularformat.equalsIgnoreCase("100")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("101")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											shortName.add(FieldshortName);
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && !templateShortName.equalsIgnoreCase("rfqdate") && !templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("rfqdate")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "BidSubmission_Date");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {	
														if(FieldshortName.equalsIgnoreCase("bid_end_date")) {
															String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
															//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
															String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
															int ST= Integer.parseInt(StartTime);
															int SC= supplierCount;
															int BT= Integer.parseInt(bidTime);
															int bidSubmission=(SC*BT)+ST;
															WebElement element = ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath));
															Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
															actions.moveToElement(element).click().keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).sendKeys(Keys.DELETE).perform();
															waitForObj(2000);
															//ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(getBidDueDate(bidSubmission));
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(getBidDueDate(BT));
														}
														else if(FieldshortName.equalsIgnoreCase("bid_open_date")) {
															String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
															//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
															String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
															int ST= Integer.parseInt(StartTime);
															int SC= supplierCount;
															int BT= Integer.parseInt(bidTime);
															int bidSubmission=((SC*BT)+ST)+2;
															WebElement element = ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath));
															Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
															actions.moveToElement(element).click().keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).sendKeys(Keys.DELETE).perform();
															waitForObj(5000);
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(getBidOpenDate(BT+5));
														}
														else if(FieldshortName.equalsIgnoreCase("doc_sub_date")) {
															String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
															//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
															String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
															int ST= Integer.parseInt(StartTime);
															int SC= supplierCount;
															int BT= Integer.parseInt(bidTime);
															int bidSubmission=((SC*BT)+ST)+1;
															WebElement element = ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath));
															Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
															actions.moveToElement(element).click().keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).sendKeys(Keys.DELETE).perform();
															waitForObj(2000);
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(getBidOpenDate(BT+3));
															}
														}
														longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104") && templateShortName.equalsIgnoreCase("prebiddiscussion")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
														clear(By.xpath(xpath), "doc_sub_date_for_BidSubmission");
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													if(FieldshortName.equalsIgnoreCase("meeting_start_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)-3;
														WebElement element = ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath));
														Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
														actions.moveToElement(element).click().keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).sendKeys(Keys.DELETE).perform();
														waitForObj(2000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(getBidOpenDate(BT-15));
													}
													else if(FieldshortName.equalsIgnoreCase("meeting_end_date")) {
														String StartTime = getDataFromPropertiesFile("StartTime", filePath_4);
														//String supplierCount = getDataFromPropertiesFile("supplierCount", filePath_4);
														String bidTime = getDataFromPropertiesFile("bidTime", filePath_4);
														int ST= Integer.parseInt(StartTime);
														int SC= supplierCount;
														int BT= Integer.parseInt(bidTime);
														int bidSubmission=((SC*BT)+ST)-2;
														WebElement element = ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath));
														Actions actions = new Actions(ThreadLocalWebdriver.getDriver());
														actions.moveToElement(element).click().keyDown(Keys.CONTROL).sendKeys("a").keyUp(Keys.CONTROL).sendKeys(Keys.DELETE).perform();
														waitForObj(2000);
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(getBidOpenDate(BT-10));
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && !templateShortName.equalsIgnoreCase("rfqattachment") && !templateShortName.equalsIgnoreCase("requiredbidderattachment") && !templateShortName.equalsIgnoreCase("rfqpayment")) {
								try {
									List<WebElement> addTermsSpecification = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div[1]/div/button"));
									if (addTermsSpecification.size() > 0) {
										try {
											for (int m = 1; m <= addTermsSpecification.size(); m++) {
												//System.out.println("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]");
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div[1]/div/button)["+m+"]")).click();
												}
											}
										} catch (Exception e) {
											//System.out.println("addTermsSpecification not available");
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												}
												//========
												//String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//select[@name='" + TabshortName + "_" + FieldshortName + "']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+SB+"]";
												}
												else {
													xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												}
												//========
												//String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//textarea[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')])["+SB+"]";
												}
												else {
													xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												}
												//========
												//String xpath = "//input[contains(@id,'" + TabshortName + "." + FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												//==========
												String xpath =null;
												List<WebElement> wb = ThreadLocalWebdriver.getDriver()
														.findElements(By.xpath("//input[@type='radio']"));
												int SB=wb.size();
												if (SB> 1) {
													xpath="(//input[@type='radio'])["+SB+"]";
												}
												else {
													xpath = "//input[@type='radio']";
												}
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpathSpan= "//span[contains(@id, '" + TabshortName + "_" + FieldshortName + "')]";
												String xpath = "//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')]"; 
													List<WebElement> uploadIconCounts = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpathSpan));
													int uploadC=uploadIconCounts.size();
													String uploadXpath="(//span[contains(@id, '" + TabshortName + "_" + FieldshortName + "')])["+uploadC+"]";
													List<WebElement> fileInputCounts = ThreadLocalWebdriver.getDriver().findElements(By.xpath(xpath));
													int fileInputC=fileInputCounts.size();
													String inputXpath="(//input[contains(@name,'" + TabshortName + "_" + FieldshortName + "')])["+fileInputC+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(uploadXpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(uploadXpath), searchTime);
												if(fielddisplay==true && interactable==true){
												scrollToElement(By.xpath(uploadXpath));
												String filePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												waitForObj(2000);
												set(By.xpath(inputXpath),filePath,"fileName");
												waitForObj(2000);
												Path pathToDelete = Paths.get(filePath);
												try {
													Files.delete(pathToDelete);
												} catch (IOException e) {
													System.out.println("Failed to delete the file: " + e.getMessage());
												}
												longName.remove(FieldlongName);
													} 
												}
											else {
												longName.remove(FieldlongName);
											}
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqattachment")) {
								try {
									List<WebElement> addpopupbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button"));
									int addB=addpopupbtns.size();
									if (addB> 0) {
										try {
											for (int m = 1; m <= addB; m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)["+ addB + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div/div[1]/div[2]/div/a/button)[" + addB + "]")).click();
													}
											}
										} catch (Exception e) {
										}
									}
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														//set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation1.xlsx","fileName");
														pngFilePath = createRandomPNG(System.getProperty("user.dir") + "\\MediaFiles");
												        //System.out.println("PNG file created at: " + pngFilePath);
														waitForObj(2000);
														set(tendercreationlocators.tenderAttachmentLocator,pngFilePath,"fileName");
														waitForObj(2000);
														pathToDel = Paths.get(pngFilePath);
														longName.remove(FieldlongName);
														waitForObj(2000);
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//============================================
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("rfqpayment")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112") || controlTypeId.equalsIgnoreCase("102") || controlTypeId.equalsIgnoreCase("103") || controlTypeId.equalsIgnoreCase("107") || controlTypeId.equalsIgnoreCase("108") || controlTypeId.equalsIgnoreCase("109") || controlTypeId.equalsIgnoreCase("110") || controlTypeId.equalsIgnoreCase("104") || controlTypeId.equalsIgnoreCase("111") || controlTypeId.equalsIgnoreCase("100") || ((controlTypeId.equalsIgnoreCase("106")|| controlTypeId.equalsIgnoreCase("105")) &&  !FieldshortName.equalsIgnoreCase("payment_type"))) {
												longName.remove(FieldlongName);
											}
											else if ((controlTypeId.equalsIgnoreCase("106")|| controlTypeId.equalsIgnoreCase("105")) &&  FieldshortName.equalsIgnoreCase("payment_type")) {
												String xpath = "//select[@name='" + TabshortName + "_" + FieldshortName + "']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByValue("Not Required");;
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									//============================================
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='savePayment4']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//*[@id='savePayment4'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//*[@id='savePayment4'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("100") && templateShortName.equalsIgnoreCase("requiredbidderattachment")) {
								try {
									List<WebElement> addRequiredAttachment = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/div[1]/a/button"));
									if (addRequiredAttachment.size() > 0) {
										try {
											for (int m = 1; m <= addRequiredAttachment.size(); m++) {
												boolean adddisplay = isElementDisplayed_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												boolean isEnable = isElementEnable_Updated(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)["+ m + "]"), 1);
												if (adddisplay == true && isEnable==true) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/div[1]/a/button)[" + m + "]")).click();
													}
											}
										} catch (Exception e) {
											//System.out.println("addRequiredAttachment not available");
										}
									}
									List<WebElement> deleteIcon = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//*[@id='"+templateShortName+"']//table[@id='authorsList3']/tbody/tr/td/button"));
									int ds=deleteIcon.size()+1;
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+ds+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+ds+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
														String generateDate=Date(getrandomInterger(20, 60));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+ds+"]";
												String formula = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].formula").toString();
												String isAggregation = js.get("groupTemplateList[" + i + "].templateFieldList["
														+ j + "].isAggregation").toString();
												//System.out.println(formula);
												if(formula=="" && isAggregation.equalsIgnoreCase("N")) {
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																	+ j + "].dataTypeId").toString();
															if(DataTypeId.equalsIgnoreCase("101")) {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																	.sendKeys(generateRandomString(6));
															}
															if(DataTypeId.equalsIgnoreCase("100")) {
																getrandomInt = Integer.toString(getrandomInterger(2,50));
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(getrandomInt);
															}
															if(DataTypeId.equalsIgnoreCase("102")) {
																randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																.sendKeys(randomDecimal);
															}
														}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
													}
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+ds+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e){
														//System.out.println("Index 1 is not present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "(//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+ds+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable== true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "(//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')])["+ds+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "(//input[@type='radio'])["+ds+"]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												try {
													String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
													//System.out.println(shortName_Data);
													if(shortName_Data.equalsIgnoreCase("rfqattachment")) {	
													String xpath = "(//input[@file-model='tenderAttachments'])[1]";
													boolean fielddisplay = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isDisplayed();
													boolean fieldEnable = ThreadLocalWebdriver.getDriver()
															.findElement(By.xpath(xpath)).isEnabled();
													if(fieldEnable== true) {
														set(tendercreationlocators.tenderAttachmentLocator, System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
														longName.remove(FieldlongName);
														waitForObj(2000);
														}
													}
													if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
													String xpath1 = "(//input[contains(@id,'" + TabshortName + "_"
															+ FieldshortName + "')])["+ds+"]";
													set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
													longName.remove(FieldlongName);
													}
												} catch (Exception e) {
													longName.remove(FieldlongName);
												}
											}
										}
									}
									List<WebElement> okbtnspopup = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//div[@class='modal-footer']//button[text()='Add']"));
									try {
										for (int c = 1; c <= okbtnspopup.size(); c++) {
											boolean okbtnpopupdisplay = ThreadLocalWebdriver.getDriver()
													.findElement(By
															.xpath("(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
													.isDisplayed();
											if (okbtnpopupdisplay == true) {
												ThreadLocalWebdriver.getDriver()
														.findElement(By.xpath(
																"(//div[@class='modal-footer']//button[text()='Add'])[" + c + "]"))
														.click();
											}
										}
									} catch (Exception e) {
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============RFQ Item Template======================
							else if (tabularformat.equalsIgnoreCase("102") && templateTypeFormat.equalsIgnoreCase("103")) {
								try {
									List<WebElement> addPRItems = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a//button[contains(@tooltip, 'Add PR line Item')]"));
									String itemGrouping="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a/button[@tooltip='Item Grouping']";
									List<WebElement> addnonsorbtns =new ArrayList<>();
									String addButtons;
									if(isElementEnable_Updated(By.xpath(itemGrouping), searchTime)) {
										addnonsorbtns = ThreadLocalWebdriver.getDriver()
												.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
										addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[2]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]";
									}
									else {
										addnonsorbtns = ThreadLocalWebdriver.getDriver()
											.findElements(By.xpath("//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]"));
										addButtons="//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')]";
									}
									if (addnonsorbtns.size() > 0 && addPRItems.size()==0) {
										try {
											for (int m = 1; m <= addnonsorbtns.size(); m++) {
												boolean addnonsortdisplay = isElementDisplayed_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
												boolean isEnable = isElementEnable_Updated(By.xpath("("+addButtons+")[" + m + "]"), 5);
												if (addnonsortdisplay == true && isEnable==true) {
													//int FreshIndentTenderItemCount=Integer.parseInt(Dynamicity.getDataFromPropertiesFile("FreshIndentTenderItemCount", filePath_4));
													int FreshIndentTenderItemCount=1;
													int dateIterator=1;
													int FIC=0;
													for(int IC=0; FIC<FreshIndentTenderItemCount; IC++){
														//ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//*[@id='"+templateShortName+"']/div/div/table/tbody/tr/td/div[3]/a[1]/button[contains(@class, 'roundCirBtnTbl ms-2 mb-10 ng-star-inserted')])[" + m + "]")).click();
														JSClick(By.xpath("("+addButtons+")[" + m + "]"), "Add button");
														String LastPage="//*[@id='"+templateShortName+"']//*[@id='topPagination']/pagination-controls/pagination-template/nav/ul/li/a[contains(text(), 'Next')]/parent::li/preceding-sibling::*[1]/a";
														if (isElementEnable_Updated(By.xpath(LastPage),5)==true) {
															click(By.xpath(LastPage), "Visit last page");
															waitForObj(2000);
															String Rows="//*[@id='"+templateShortName+"']//*[@id='rfqItemtabl-"+templateShortName+" itmtbl-custom']/tr/td[1]/input";
															//System.out.println(Rows);
															dateIterator=ThreadLocalWebdriver.getDriver().findElements(By.xpath(Rows)).size();
															//dateIterator=1;
															FIC=dateIterator-1;
														}
														else {
															String Rows="//*[@id='"+templateShortName+"']//*[@id='rfqItemtabl-"+templateShortName+" itmtbl-custom']/tr/td[1]/input";
															//System.out.println(Rows);
															dateIterator=ThreadLocalWebdriver.getDriver().findElements(By.xpath(Rows)).size();
															FIC=dateIterator-1;
														}
														waitForObj(1000);
														ArrayList<String> shortName = new ArrayList<String>();
														ArrayList<String> longName = new ArrayList<String>();
														TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
														for (int j = 0; j < js
																.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
															if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
																	.toString().equalsIgnoreCase("Y")) {
																FieldshortName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
																		.toString();
																FieldlongName = js.get(
																		"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
																		.toString();
																shortName.add(FieldshortName);
																longName.add(FieldlongName);
																String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																		+ j + "].controlTypeId").toString();
																if (controlTypeId.equalsIgnoreCase("112")) {
																	longName.remove(FieldlongName);
																}
																else if (controlTypeId.equalsIgnoreCase("110")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		//String generateDate=generateRandomDate();
																		String generateDate=getFutureDate(100);
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateDate);
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("104")) {
																	String xpath = "(//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(Date(10));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("100")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
																				+ j + "].dataTypeId").toString();
																		if(DataTypeId.equalsIgnoreCase("101")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(6));
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("100")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			getrandomInt = Integer.toString(getrandomInterger(2,50));
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(getrandomInt);
																			}
																		}
																		if(DataTypeId.equalsIgnoreCase("102")) {
																			String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																			String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																			if(!keysValue.equals("")) {
																			clear(By.xpath(xpath), "");
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																			}
																			else {
																			clear(By.xpath(xpath), "");
																			randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
																			ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																			.sendKeys(randomDecimal);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("106")
																		|| controlTypeId.equalsIgnoreCase("105")) {
																	String xpath = "(//select[@name='" + TabshortName + "_" + FieldshortName + "'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable==true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		Select sel = new Select(
																				ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																		sel.selectByVisibleText(keysValue);
																		}
																		else {
																			if(FieldshortName.equalsIgnoreCase("mandatory_item")) {
																				/*
																				String mandatory_item="//div/button[text()='Confirm']";
																				waitForElementToBeVisible(By.xpath(mandatory_item));
																				JSClick(By.xpath(mandatory_item), "confirm mandatory item");
																				waitForObj(1000);
																				*/
																				Select sel_MI = new Select(ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel_MI.selectByValue("Yes");
																			}
																			else {
																				Select sel = new Select(
																						ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
																				sel.selectByIndex(1);
																			}
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("107")) {
																	String xpath = "//textarea[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC +"')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(!keysValue.equals("")) {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
																				.sendKeys(generateRandomString(15));
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("102")) {
																	String xpath = "//input[contains(@id,'" + TabshortName + "."
																			+ FieldshortName + "." + FIC + "')]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true && interactable == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("103")) {
																	String xpath = "(//input[@type='radio'])["+dateIterator+"]";
																	scrollToElement(By.xpath(xpath));
																	boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
																	if (fielddisplay == true) {
																		String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
																		String keysValue = getDataFromPropertiesFile(keys, filePath_3);
																		if(keysValue.equalsIgnoreCase("DoNotSelect")) {
																		System.out.println("Buyer Does not want to select Checkbox/Radio button");
																		}
																		else {
																		ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
																		}
																		longName.remove(FieldlongName);
																	} else {
																		longName.remove(FieldlongName);
																	}
																}
																else if (controlTypeId.equalsIgnoreCase("108")) {
																	try {
																		String shortName_Data = js.get("groupTemplateList[" + i + "].shortName").toString();
																		//System.out.println(shortName_Data);
																		if(!shortName_Data.equalsIgnoreCase("rfqattachment")) {
																		String xpath1 = "//input[contains(@id,'" + TabshortName + "_"
																				+ FieldshortName + "." + FIC + "')]";
																		set(By.xpath(xpath1), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
																		longName.remove(FieldlongName);
																	}
																	} catch (Exception e) {
																		longName.remove(FieldlongName);
																		}
																	}
																}
															}
														//dateIterator=dateIterator+1;	
													}		
												}
											}
										} catch (Exception e) {
										}
									}
									else {
										if(Dynamicity.getDataFromPropertiesFile("PRNumber", filePath_4).equalsIgnoreCase("")) {
											universalNormalWait();
											API_Component.prUploadForSingleItem();
											universalNormalWait();
											String addPRItem="//*[@id='"+templateShortName+"']//button[@tooltip='Add PR line Item(s)']";
											if(isElementEnable_Updated(By.xpath(addPRItem),20)==true && isElementDisplayed_Updated(By.xpath(addPRItem),20)==true) {
												click(By.xpath(addPRItem), "Click on Add PR line Item(s) button");
												universalNormalWait();
											}
											etenderPRcomponentobj.enterPRInSearch();
											etenderPRcomponentobj.itemAllSelection();
											etenderPRcomponentobj.addPRFromCorrigendum();
											universalNormalWait();
											eTenderComponent.waitForSpinnerToDisappear_new();
											universalNormalWait();
										}
										else {
											universalNormalWait();
											String addPRItem="//*[@id='"+templateShortName+"']//button[@tooltip='Add PR line Item(s)']";
											if(isElementEnable_Updated(By.xpath(addPRItem),20)==true && isElementDisplayed_Updated(By.xpath(addPRItem),20)==true) {
												click(By.xpath(addPRItem), "Click on Add PR line Item(s) button");
												universalNormalWait();
											}
											etenderPRcomponentobj.enterPRInSearch_ExceptHMEL();
											etenderPRcomponentobj.itemAllSelection();
											etenderPRcomponentobj.addPRFromCorrigendum();
											universalNormalWait();
											eTenderComponent.waitForSpinnerToDisappear_new();
											universalNormalWait();
										}
									}
									//waitForObj(2000);
									waitForObj(5000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							//=============End RFQ item Template==================
							else if (tabularformat.equalsIgnoreCase("104")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
													longName.remove(FieldlongName);
												}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@name,'" + TabshortName + "_"
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													try {	
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													catch(Exception e) {
														//System.out.println("Just one dropdown value is present: " + e.getMessage());
													}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													//System.out.println("Here is the Keysvalue: "+keysValue);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("103")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
							else if (tabularformat.equalsIgnoreCase("105")) {
								try {
									ArrayList<String> shortName = new ArrayList<String>();
									ArrayList<String> longName = new ArrayList<String>();
									TabshortName = js.get("groupTemplateList[" + i + "].shortName").toString();
									for (int j = 0; j < js
											.getInt("groupTemplateList[" + i + "].templateFieldList.size()"); j++) {
										if (js.get("groupTemplateList[" + i + "].templateFieldList[" + j + "].isVisible")
												.toString().equalsIgnoreCase("Y")) {
											FieldshortName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].shortName")
													.toString();
											FieldlongName = js.get(
													"groupTemplateList[" + i + "].templateFieldList[" + j + "].longName")
													.toString();
											shortName.add(FieldshortName);
											longName.add(FieldlongName);
											String controlTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
													+ j + "].controlTypeId").toString();
											if (controlTypeId.equalsIgnoreCase("112")) {
												longName.remove(FieldlongName);
											}
											else if (controlTypeId.equalsIgnoreCase("110")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													String generateDate=generateRandomDate();
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateDate);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("104")) {
												String xpath = "//input[contains(@name,'" + TabshortName + "_"+ FieldshortName +"')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(Date(10));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("100")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String DataTypeId = js.get("groupTemplateList[" + i + "].templateFieldList["
															+ j + "].dataTypeId").toString();
													if(DataTypeId.equalsIgnoreCase("101")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(6));
														}
													}
													if(DataTypeId.equalsIgnoreCase("100")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														getrandomInt = Integer.toString(getrandomInterger(2,50));
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(getrandomInt);
														}
													}
													if(DataTypeId.equalsIgnoreCase("102")) {
														String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
														String keysValue = getDataFromPropertiesFile(keys, filePath_3);
														if(!keysValue.equals("")) {
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
														}
														else {
														randomDecimal = Double.toString(generateRandomTwoDigitDecimal());
														ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
														.sendKeys(randomDecimal);
														}
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("106")
													|| controlTypeId.equalsIgnoreCase("105")) {
												String xpath = "//select[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable==true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByVisibleText(keysValue);
													}
													else {
													Select sel = new Select(
															ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)));
													sel.selectByIndex(1);
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("107")) {
												String xpath = "//textarea[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(!keysValue.equals("")) {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).sendKeys(keysValue);
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath))
															.sendKeys(generateRandomString(15));
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("102")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "."
														+ FieldshortName + "')]";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("103")) {
												String xpath = "//input[@type='radio']";
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (fielddisplay == true && interactable == true) {
													String keys=longName.get(longName.size() - 1).replaceAll("\\s+", "").replaceAll("\\p{P}", "");
													String keysValue = getDataFromPropertiesFile(keys, filePath_3);
													if(keysValue.equalsIgnoreCase("DoNotSelect")) {
													System.out.println("Buyer Does not want to select Checkbox/Radio button");
													}
													else {
													ThreadLocalWebdriver.getDriver().findElement(By.xpath(xpath)).click();
													}
													longName.remove(FieldlongName);
												} else {
													longName.remove(FieldlongName);
												}
											}
											else if (controlTypeId.equalsIgnoreCase("108")) {
												String xpath = "//input[contains(@id,'" + TabshortName + "_"
												+ FieldshortName + "')]"; 
												boolean fielddisplay=isElementDisplayed_Updated(By.xpath(xpath), searchTime);
												boolean interactable=isElementEnable_Updated(By.xpath(xpath), searchTime);
												if (interactable == true) {
												scrollToElement(By.xpath(xpath));
												set(By.xpath(xpath), System.getProperty("user.dir") + "\\MediaFiles\\rfqCreation.xlsx","fileName");
												longName.remove(FieldlongName);
												} else {
												longName.remove(FieldlongName);
												}
												}
										}
									}
									waitForObj(2000);
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Pass", "Y");
								} catch (Exception e) {
									pdfResultReport.addStepDetails(uitabname, "After clicking on Save Button",
											"Successfully Saved " + uitabname + " tab" + " ", "Fail", "Y");
								}
							}
						}
					}
				}
			}
			pdfResultReport.addStepDetails("Final Save", "After clicking on Save Button", "Successfully Saved" + " ", "Pass", "Y");
		}
		catch (Exception e) {
			pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
					"Unable to save" + "fail" + " tab" + " ", "Fail", "Y");
			}
		}
		
		public static Set<Integer> getUniqueTemplateGroupIds(String jsonString) {
			Set<Integer> uniqueTemplateGroupIds = new LinkedHashSet<>();
	        JSONObject jsonObject = new JSONObject(jsonString);
	        JSONArray templates = jsonObject.getJSONArray("templates");
	        for (int i = 0; i < templates.length(); i++) {
	            JSONObject template = templates.getJSONObject(i);
	            int templateGroupId = template.getInt("templategroupId");
	            uniqueTemplateGroupIds.add(templateGroupId);
	            nonUniqueTemplateGroupIds.add(templateGroupId);
	        }
	        return uniqueTemplateGroupIds;
	    }
		static int fp=0;
		static int gp=0;
		static int hp=2;
		public void Verification_SupplierSide_Preview() throws Throwable {
				try {
					log.info("started executing the method:: CreateTenderFromPRwithNonSOR_STG");
					
					List<Integer> list = new ArrayList<>(uniqueTG);
						for(int p=0; p<list.size(); p++) {
							API_Component.gTD(String.valueOf(list.get(p)));
							JsonPath js=jsResponse_v2;
							JsonPath js1=jsResponse_v1;
							int dataRowC_js = js.getInt("templates.size()");
					        int targetValue = list.get(p);
					        int count = 0;
					        for (Integer value : nonUniqueTemplateGroupIds) {
					            if (value.equals(targetValue)) {
					                count++;
					            }
					        }
							int dataRowC_js1 = js1.getInt("templates.size()");
							List<WebElement> tabcount = ThreadLocalWebdriver.getDriver().findElements(By.xpath("//app-generic-preview//span[@class='mdc-tab__text-label']"));
							while (hp <= tabcount.size()) {
							String uitabname = ThreadLocalWebdriver.getDriver().findElement(By.xpath("(//app-generic-preview//span[@class='mdc-tab__text-label'])[" + hp + "]")).getText();
							fp=0;
							while (gp < dataRowC_js1) {
								String shortName1=js1.get("templates[" + gp + "].shortName").toString();
								String tabName=js1.get("templates[" + gp + "].subProcessName").toString();
								if (tabName.equalsIgnoreCase(uitabname)) {
									if(hp % 4 == 0) {
										boolean traverseE=isElementEnable_Updated(By.xpath("(//button[contains(@class, 'header-pagination-after')])[2]"), searchTime);
										boolean traverseV=isElementDisplayed_Updated(By.xpath("(//button[contains(@class, 'header-pagination-after')])[2]"), searchTime);
										if(traverseE==true && traverseV==true) {
										JSClick(By.xpath("(//button[contains(@class, 'header-pagination-after')])[2]"),"Traverse button");
										}
									}
									if(fp==0) {
										scrollToElement(By.xpath("(//app-generic-preview//span[@class='mdc-tab__text-label'])[" + hp + "]"));
										waitForObj(1000);
										JSClick(By.xpath("(//span[text()= '"+tabName+"'])[2]"),"Tab name: " +tabName);
										fp=fp+1;
									}
									int rp=0;
									String tabularformat=null;
									String templateTypeFormat=null;
									String templateShortName=null;
									String tabularformat1=null;
									String templateTypeFormat1=null;
									String templateShortName1=null;
									String controlTypeId=null;
									String controlTypeId1=null;
									String dataTypeId=null;
									String dataTypeId1=null;
									String fshortName=null;
									String fshortName1=null;
									String flongName=null;
									String flongName1=null;
									String fdisplayOrder=null;
									String fdisplayOrder1=null;
									String fisVisible=null;
									String fisVisible1=null;
									String isAggregation=null;
									String isAggregation1=null;
									String bidValueFlag=null;
									String bidValueFlag1=null;
									String rateFieldFlag=null;
									String rateFieldFlag1=null;
									String value=null;
									String value1=null;
									String roleWiseFieldEntry=null;
									String roleWiseFieldEntry1=null;
									
									int fc=0;
									int fc1=0;
									for (int wp=0; wp<dataRowC_js; wp++) {
										String shortName=js.get("templates[" + wp + "].shortName").toString();
										if(shortName.equalsIgnoreCase(shortName1) && rp<count) {
											tabularformat = js.get("templates[" + wp + "].displayLayoutid").toString();
											templateTypeFormat = js.get("templates[" + wp + "].templateTypeId").toString();
											templateShortName = js.get("templates[" + wp + "].shortName").toString();
											fc=js.getInt("templates[" + wp + "].templateFieldList.size()");
												fc1=js1.getInt("templates[" + gp + "].templateFieldList.size()");
												tabularformat1 = js1.get("templates[" + gp + "].displayLayoutid").toString();
												templateTypeFormat1 = js1.get("templates[" + gp + "].templateTypeId").toString();
												templateShortName1 = js1.get("templates[" + gp + "].shortName").toString();
												int fi=0;
												int fi1=0;
												while(fc>fi) {
													if(fi1<0) {
														fi1=0;
													}
													if(fi1>fc1) {
														fi1=fc1;
													}
													try {
														Object templateField = js.get("templates[" + wp + "].templateFieldList[" + fi + "]");
														Object templateField1 = js1.get("templates[" + gp + "].templateFieldList[" + fi1 + "]");
													
														if (templateField != null) {
													        // Check if it's an instance of Map (HashMap)
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            Object controlTypeIdObject = templateFieldMap.get("controlTypeId");

													            if (controlTypeIdObject != null) {
													                controlTypeId = controlTypeIdObject.toString();
													            } else {
													                System.out.println("controlTypeId is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            Object controlTypeIdObject = templateFieldMap.get("controlTypeId");

													            if (controlTypeIdObject != null) {
													                controlTypeId1 = controlTypeIdObject.toString();
													                
													            } else {
													                System.out.println("controlTypeId1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													    
													    if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object dataTypeIdObject = templateFieldMap.get("dataTypeId");

													            if (dataTypeIdObject != null) {
													            	dataTypeId = dataTypeIdObject.toString();
													            } else {
													                System.out.println("dataTypeId is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            Object dataTypeIdObject = templateFieldMap.get("dataTypeId");

													            if (dataTypeIdObject != null) {
													            	dataTypeId1 = dataTypeIdObject.toString();
													            } else {
													                System.out.println("dataTypeId1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													  
													    if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object shortNameObject = templateFieldMap.get("shortName");

													            if (shortNameObject != null) {
													            	fshortName = shortNameObject.toString();
													            } else {
													                System.out.println("fshortName is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            Object shortNameObject = templateFieldMap.get("shortName");

													            if (shortNameObject != null) {
													            	fshortName1 = shortNameObject.toString();
													            } else {
													                System.out.println("fshortName1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													   
														if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object longNameObject = templateFieldMap.get("longName");

													            if (longNameObject != null) {
													            	flongName = longNameObject.toString();
													            } else {
													                System.out.println("flongName is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            
													            Object longNameObject = templateFieldMap.get("longName");

													            if (longNameObject != null) {
													            	flongName1 = longNameObject.toString();
													            } else {
													                System.out.println("flongName1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													   
														if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object displayOrderObject = templateFieldMap.get("displayOrder");

													            if (displayOrderObject != null) {
													            	fdisplayOrder = displayOrderObject.toString();
													            } else {
													                System.out.println("fdisplayOrder is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            
													            Object displayOrderObject = templateFieldMap.get("displayOrder");

													            if (displayOrderObject != null) {
													            	fdisplayOrder1 = displayOrderObject.toString();
													            } else {
													                System.out.println("fdisplayOrder is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													   
														if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object isVisibleObject = templateFieldMap.get("isVisible");

													            if (isVisibleObject != null) {
													            	fisVisible = isVisibleObject.toString();
													            } else {
													                System.out.println("fisVisible is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            
													            Object isVisibleObject = templateFieldMap.get("isVisible");

													            if (isVisibleObject != null) {
													            	fisVisible1 = isVisibleObject.toString();
													            } else {
													                System.out.println("fisVisible1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													 
														if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object isAggregationObject = templateFieldMap.get("isAggregation");

													            if (isAggregationObject != null) {
													            	isAggregation = isAggregationObject.toString();
													            } else {
													                System.out.println("isAggregation is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            
													            Object isAggregationObject = templateFieldMap.get("isAggregation");

													            if (isAggregationObject != null) {
													            	isAggregation1 = isAggregationObject.toString();
													            } else {
													                System.out.println("isAggregation1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													    
														if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object valueObject = templateFieldMap.get("value");

													            if (valueObject != null) {
													            	value = valueObject.toString();
													            } else {
													                System.out.println("value is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            
													            Object valueObject = templateFieldMap.get("value");

													            if (valueObject != null) {
													            	value1 = valueObject.toString();
													            } else {
													                System.out.println("value1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													   
														if (templateField != null) {
													        if (templateField instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField;
													            
													            Object roleWiseFieldEntryObject = templateFieldMap.get("roleWiseFieldEntry");

													            if (roleWiseFieldEntryObject != null) {
													            	roleWiseFieldEntry = roleWiseFieldEntryObject.toString();
													            } else {
													                System.out.println("roleWiseFieldEntry is null for templateFieldList[" + fi + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi + "] is null");
													    }
														if (templateField1 != null) {
													        if (templateField1 instanceof Map) {
													            Map<String, Object> templateFieldMap = (Map<String, Object>) templateField1;
													            
													            Object roleWiseFieldEntryObject = templateFieldMap.get("roleWiseFieldEntry");

													            if (roleWiseFieldEntryObject != null) {
													            	roleWiseFieldEntry1 = roleWiseFieldEntryObject.toString();
													            } else {
													                System.out.println("roleWiseFieldEntry1 is null for templateFieldList[" + fi1 + "]");
													            }
													        } else {
													            System.out.println("Unexpected object type: " + templateField.getClass().getName());
													        }
													    } else {
													        System.out.println("templateFieldList[" + fi1 + "] is null");
													    }
													  
														if (tabularformat.equalsIgnoreCase("100")) {
															if (controlTypeId.equalsIgnoreCase("102")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("100")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("103")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("107")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("108")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("106")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("105")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("109")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("110")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_D(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("104")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_DT(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("111")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
														}
														else if (tabularformat.equalsIgnoreCase("101")) {
															if (controlTypeId.equalsIgnoreCase("102")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("100")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("103")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("107")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("108")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("106")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("105")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("109")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("110")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_D(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("104")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_DT(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("111")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
																											
														}
														else if (tabularformat.equalsIgnoreCase("102")) {
															if (controlTypeId.equalsIgnoreCase("102")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("100")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("103")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("107")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("108")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("106")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("105")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("109")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("110")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_D(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("104")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_DT(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("111")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															
														}
														else if (tabularformat.equalsIgnoreCase("104")) {
															if (controlTypeId.equalsIgnoreCase("102")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("100")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("103")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("107")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("108")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("106")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("105")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("109")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("110")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_D(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("104")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_DT(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("111")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															
														}
														else if (tabularformat.equalsIgnoreCase("105")) {
															if (controlTypeId.equalsIgnoreCase("102")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("100")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("103")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("107")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("108")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("106")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("105")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("109")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("110")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_D(value);
																		Long v1=TimestampConverter_D(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_D(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("104")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+v+", and it is displaying as "+v1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		Long v=TimestampConverter_DT(value);
																		Long v1=TimestampConverter_DT(value1);
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+v+", and it is not displaying as "+v1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	Long v=TimestampConverter_DT(value);
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+v+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
															else if (controlTypeId.equalsIgnoreCase("111")) {
																if(fshortName.equalsIgnoreCase(fshortName1)) {
																	if(value.equalsIgnoreCase(value1)) {
																		pdfResultReport.addStepDetails("Data has been successfully verified.",
																				""+flongName+" must be verified successfully in tender preview",
																				"The field value entered for "+flongName+" is "+value+", and it is displaying as "+value1+" in the preview.", "Pass", "Y");
																		log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
																	}
																	else {
																		log.fatal("Data has not been successfully verified.");
																		pdfResultReport.addStepDetails("Data don't match with each other", "Field name is: "+flongName,
																				"The field value entered for "+flongName+" is "+value+", and it is not displaying as "+value1+" in the preview.", "Fail", "N");
																	}
																}
																else {
																	pdfResultReport.addStepDetails("Data has been successfully verified.",
																			""+flongName+" must be verified successfully in tender preview",
																			"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
																	log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");fi1=fi1-1;
																}
															}
														}
														else {
															pdfResultReport.addStepDetails("Data has been successfully verified.",
																	""+flongName+" must be verified successfully in tender preview",
																	"The field value entered for "+flongName+" is "+value+", and it is not displaying in the preview. because for role Wise this Field is : Hidden", "Pass", "Y");
															log.info("Verification has been completed for the field: "+flongName+" under the template: "+uitabname+"");
															System.out.println(flongName+ "is missing from Supplier Preview, because for role Wise Field is : Hidden");
														}
													fi=fi+1;
													fi1=fi1+1;
												} catch (Exception e) {
													fi=fi+1;
													fi1=fi1+1;
												    System.out.println("Error retrieving "+flongName+": " + e);
												}
											}
											rp=rp+1;
											gp=gp+1;
										}
										else {
											pdfResultReport.addStepDetails("Data has been successfully verified.",
													""+flongName+" must be verified successfully in tender preview",
													"This Shortname under this row is restricted from supplier, the fieldname is "+flongName+" and template name is: " +uitabname, "Pass", "Y");
											log.info("This Shortname under this row is restricted from supplier, the fieldname is "+flongName+" and template name is: " +uitabname);
											System.out.println("This Shortname under this row is restricted from supplier, the fieldname is "+flongName+" and template name is: " +uitabname);
										}
									}
										
									}
									
									break;
								}
								pdfResultReport.addStepDetails("Successfully verified all details", "Clicking on next template", "Successfully verified "+uitabname+"" + " ", "Pass", "Y");
								hp=hp+1;
								System.out.println("hp value: "+hp);
								break;
							}
						}
					}
				catch (Exception e) {
					pdfResultReport.addStepDetails("fail", "After clicking on Save Button",
							"Unable to save" + "fail" + " tab" + " ", "Fail", "Y");
					}
				}
		public static String getCellValue(String filePath, String sheetName, String columnName, int rowNum) {
	        try (FileInputStream fis = new FileInputStream(filePath);
	             Workbook workbook = new XSSFWorkbook(fis)) {
	             
	            Sheet sheet = workbook.getSheet(sheetName);
	            if (sheet == null) {
	                throw new IllegalArgumentException("Sheet not found: " + sheetName);
	            }
	            Row headerRow = sheet.getRow(0);
	            if (headerRow == null) {
	                throw new IllegalArgumentException("Header row is empty");
	            }
	            int colIndex = -1;
	            for (Cell cell : headerRow) {
	                if (cell.getStringCellValue().equalsIgnoreCase(columnName)) {
	                    colIndex = cell.getColumnIndex();
	                    break;
	                }
	            }
	            if (colIndex == -1) {
	                throw new IllegalArgumentException("Column not found: " + columnName);
	            }
	            Row row = sheet.getRow(rowNum);
	            if (row == null) {
	                throw new IllegalArgumentException("Row not found: " + rowNum);
	            }

	            Cell cell = row.getCell(colIndex);
	            return (cell != null) ? cell.toString() : "Error reading Excel file";

	        } catch (IOException e) {
	            e.printStackTrace();
	            return "Error reading Excel file";
	        }
	    }
}
	
